
Discovery3_12.05.2023_CCD42-10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000430c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b0  080044b0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b8  080044b8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000024c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a8  200002a8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009841  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6e  00000000  00000000  000298cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002b540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021362  00000000  00000000  0002c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a57a  00000000  00000000  0004d80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb839  00000000  00000000  00057d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001235bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fd4  00000000  00000000  00123610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800447c 	.word	0x0800447c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800447c 	.word	0x0800447c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <E2V_CLICKS_Ini>:
uint32_t* dma2_lifcr = DMA2_BASE+0x8UL;
uint32_t* dma2_stream3_ndtr = DMA2_BASE+0x5CUL;
uint32_t* dma2_stream3_cr = DMA2_BASE+0x58UL;

void E2V_CLICKS_Ini()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	r1u_to_r3d = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.1);
	r3d_to_r2u = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.23);
	r2u_to_r1d = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.1);
	r1d_to_r0u = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.07);
*/
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <E2V_CLICKS_Ini+0x94>)
 80004d2:	f44f 0277 	mov.w	r2, #16187392	; 0xf70000
 80004d6:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R1 + 16U))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));


	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U));
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <E2V_CLICKS_Ini+0x94>)
 80004da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004de:	619a      	str	r2, [r3, #24]

	number_Of_Lines = 515;
 80004e0:	4b20      	ldr	r3, [pc, #128]	; (8000564 <E2V_CLICKS_Ini+0x98>)
 80004e2:	f240 2203 	movw	r2, #515	; 0x203
 80004e6:	601a      	str	r2, [r3, #0]
	number_Of_Lines = 516;
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <E2V_CLICKS_Ini+0x98>)
 80004ea:	f44f 7201 	mov.w	r2, #516	; 0x204
 80004ee:	601a      	str	r2, [r3, #0]
	number_Of_Rows = 2148;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <E2V_CLICKS_Ini+0x9c>)
 80004f2:	f640 0264 	movw	r2, #2148	; 0x864
 80004f6:	601a      	str	r2, [r3, #0]
//	number_Of_Rows = 700;

	OR_Clock_period = 4;/*in mks (1, 2, 4)*/
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <E2V_CLICKS_Ini+0xa0>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	601a      	str	r2, [r3, #0]
	mS_To_Wait = 1;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <E2V_CLICKS_Ini+0xa4>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]

	CCD_Mode = 0;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <E2V_CLICKS_Ini+0xa8>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
	CCD_Brust_N = 1;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <E2V_CLICKS_Ini+0xac>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
	CCD_Brust_Delay = 1000;
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <E2V_CLICKS_Ini+0xb0>)
 8000512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000516:	601a      	str	r2, [r3, #0]

	switch (OR_Clock_period)
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <E2V_CLICKS_Ini+0xa0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d010      	beq.n	8000542 <E2V_CLICKS_Ini+0x76>
 8000520:	2b04      	cmp	r3, #4
 8000522:	d812      	bhi.n	800054a <E2V_CLICKS_Ini+0x7e>
 8000524:	2b01      	cmp	r3, #1
 8000526:	d002      	beq.n	800052e <E2V_CLICKS_Ini+0x62>
 8000528:	2b02      	cmp	r3, #2
 800052a:	d005      	beq.n	8000538 <E2V_CLICKS_Ini+0x6c>
 800052c:	e00d      	b.n	800054a <E2V_CLICKS_Ini+0x7e>
		{
		case 1:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 8000530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000534:	601a      	str	r2, [r3, #0]
			break;
 8000536:	e00d      	b.n	8000554 <E2V_CLICKS_Ini+0x88>
		case 2:
			E2V_CLICKS_OR_Clock_Freq = 500;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 800053a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800053e:	601a      	str	r2, [r3, #0]
			break;
 8000540:	e008      	b.n	8000554 <E2V_CLICKS_Ini+0x88>
		case 4:
			E2V_CLICKS_OR_Clock_Freq = 250;
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 8000544:	22fa      	movs	r2, #250	; 0xfa
 8000546:	601a      	str	r2, [r3, #0]
			break;
 8000548:	e004      	b.n	8000554 <E2V_CLICKS_Ini+0x88>
		default:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000550:	601a      	str	r2, [r3, #0]
			break;
 8000552:	bf00      	nop
		}
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40020c00 	.word	0x40020c00
 8000564:	20000080 	.word	0x20000080
 8000568:	20000084 	.word	0x20000084
 800056c:	20000088 	.word	0x20000088
 8000570:	2000008c 	.word	0x2000008c
 8000574:	20000090 	.word	0x20000090
 8000578:	20000094 	.word	0x20000094
 800057c:	20000098 	.word	0x20000098
 8000580:	20000078 	.word	0x20000078

08000584 <E2V_CLICKS_Base_Aqu_Output>:

*/


void E2V_CLICKS_Base_Aqu_Output ()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09a      	sub	sp, #104	; 0x68
 8000588:	af00      	add	r7, sp, #0
	switch (OR_Clock_period)
 800058a:	4b8e      	ldr	r3, [pc, #568]	; (80007c4 <E2V_CLICKS_Base_Aqu_Output+0x240>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d010      	beq.n	80005b4 <E2V_CLICKS_Base_Aqu_Output+0x30>
 8000592:	2b04      	cmp	r3, #4
 8000594:	d812      	bhi.n	80005bc <E2V_CLICKS_Base_Aqu_Output+0x38>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d002      	beq.n	80005a0 <E2V_CLICKS_Base_Aqu_Output+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d005      	beq.n	80005aa <E2V_CLICKS_Base_Aqu_Output+0x26>
 800059e:	e00d      	b.n	80005bc <E2V_CLICKS_Base_Aqu_Output+0x38>
		{
		case 1:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 80005a0:	4b89      	ldr	r3, [pc, #548]	; (80007c8 <E2V_CLICKS_Base_Aqu_Output+0x244>)
 80005a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a6:	601a      	str	r2, [r3, #0]
			break;
 80005a8:	e00d      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		case 2:
			E2V_CLICKS_OR_Clock_Freq = 500;
 80005aa:	4b87      	ldr	r3, [pc, #540]	; (80007c8 <E2V_CLICKS_Base_Aqu_Output+0x244>)
 80005ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005b0:	601a      	str	r2, [r3, #0]
			break;
 80005b2:	e008      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		case 4:
			E2V_CLICKS_OR_Clock_Freq = 250;
 80005b4:	4b84      	ldr	r3, [pc, #528]	; (80007c8 <E2V_CLICKS_Base_Aqu_Output+0x244>)
 80005b6:	22fa      	movs	r2, #250	; 0xfa
 80005b8:	601a      	str	r2, [r3, #0]
			break;
 80005ba:	e004      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		default:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 80005bc:	4b82      	ldr	r3, [pc, #520]	; (80007c8 <E2V_CLICKS_Base_Aqu_Output+0x244>)
 80005be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c2:	601a      	str	r2, [r3, #0]
			break;
 80005c4:	bf00      	nop
		}
	if (mS_To_Wait <= 0) mS_To_Wait = 1;
 80005c6:	4b81      	ldr	r3, [pc, #516]	; (80007cc <E2V_CLICKS_Base_Aqu_Output+0x248>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <E2V_CLICKS_Base_Aqu_Output+0x50>
 80005ce:	4b7f      	ldr	r3, [pc, #508]	; (80007cc <E2V_CLICKS_Base_Aqu_Output+0x248>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]

//	HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП

	uint16_t lines_counter = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint8_t opcode;
	uint8_t txWr0 = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t txWr1 = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint32_t addr = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	663b      	str	r3, [r7, #96]	; 0x60
	int8_t buf[3] = {0,0,0};
 80005ea:	4a79      	ldr	r2, [pc, #484]	; (80007d0 <E2V_CLICKS_Base_Aqu_Output+0x24c>)
 80005ec:	463b      	mov	r3, r7
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	3302      	adds	r3, #2
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	701a      	strb	r2, [r3, #0]
	int8_t sn = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	  uint32_t* GPIO_BSRR_Adress = &(E2V_CLICKS_PORT->BSRR);
 8000600:	4b74      	ldr	r3, [pc, #464]	; (80007d4 <E2V_CLICKS_Base_Aqu_Output+0x250>)
 8000602:	653b      	str	r3, [r7, #80]	; 0x50

	  uint32_t High_R = (0x1UL << (E2V_CLICKS_R));
 8000604:	2340      	movs	r3, #64	; 0x40
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t Low_R = (0x1UL << (E2V_CLICKS_R+16U));
 8000608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint32_t High_R1 = (0x1UL << (E2V_CLICKS_R1));
 800060e:	2310      	movs	r3, #16
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
	  uint32_t Low_R1 = (0x1UL << (E2V_CLICKS_R1+16U));
 8000612:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
	  uint32_t High_R2 = (0x1UL << (E2V_CLICKS_R2));
 8000618:	2320      	movs	r3, #32
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  uint32_t Low_R2 = (0x1UL << (E2V_CLICKS_R2+16U));
 800061c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
	  uint32_t High_R3 = (0x1UL << (E2V_CLICKS_R3));
 8000622:	2380      	movs	r3, #128	; 0x80
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
	  uint32_t Low_R3 = (0x1UL << (E2V_CLICKS_R3+16U));
 8000626:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800062a:	633b      	str	r3, [r7, #48]	; 0x30

	  uint32_t High_DG = (0x1UL << (E2V_CLICKS_DG));
 800062c:	2308      	movs	r3, #8
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint32_t Low_DG = (0x1UL << (E2V_CLICKS_DG+16U));
 8000630:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
	  uint32_t High_I1 = (0x1UL << (E2V_CLICKS_I1));
 8000636:	2302      	movs	r3, #2
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t Low_I1 = (0x1UL << (E2V_CLICKS_I1+16U));
 800063a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800063e:	623b      	str	r3, [r7, #32]
	  uint32_t High_I2 = (0x1UL << (E2V_CLICKS_I2));
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
	  uint32_t Low_I2 = (0x1UL << (E2V_CLICKS_I2+16U));
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	61bb      	str	r3, [r7, #24]
	  uint32_t High_I3 = (0x1UL << (E2V_CLICKS_I3));
 800064a:	2304      	movs	r3, #4
 800064c:	617b      	str	r3, [r7, #20]
	  uint32_t Low_I3 = (0x1UL << (E2V_CLICKS_I3+16U));
 800064e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000652:	613b      	str	r3, [r7, #16]
	  uint32_t High_d15 = (0x1UL << (15U));
 8000654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000658:	60fb      	str	r3, [r7, #12]
	  uint32_t Low_d15 = (0x1UL << (15U+16U));
 800065a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800065e:	60bb      	str	r3, [r7, #8]

	  High_I3 = High_I3|High_d15;
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4313      	orrs	r3, r2
 8000666:	617b      	str	r3, [r7, #20]
	  Low_I3 = Low_I3|Low_d15;
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4313      	orrs	r3, r2
 800066e:	613b      	str	r3, [r7, #16]

	*GPIO_BSRR_Adress = Low_I1|Low_I2|Low_I3|Low_DG|High_R1|High_R2|Low_R3|High_R;
 8000670:	6a3a      	ldr	r2, [r7, #32]
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	431a      	orrs	r2, r3
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	431a      	orrs	r2, r3
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	431a      	orrs	r2, r3
 800067e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000680:	431a      	orrs	r2, r3
 8000682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000684:	431a      	orrs	r2, r3
 8000686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000688:	431a      	orrs	r2, r3
 800068a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800068c:	431a      	orrs	r2, r3
 800068e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000690:	601a      	str	r2, [r3, #0]

	*GPIO_BSRR_Adress = High_DG;
 8000692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000696:	601a      	str	r2, [r3, #0]

	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 8000698:	2300      	movs	r3, #0
 800069a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800069e:	e064      	b.n	800076a <E2V_CLICKS_Base_Aqu_Output+0x1e6>
//			  	while (delay<35U)
//			  		{
//			  		delay++;
//			  		}

			  	*GPIO_BSRR_Adress = High_I1;
 80006a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a4:	601a      	str	r2, [r3, #0]
			  	delay = 0U;
 80006a6:	4b4c      	ldr	r3, [pc, #304]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
			  	while (delay<35U)
 80006ac:	e004      	b.n	80006b8 <E2V_CLICKS_Base_Aqu_Output+0x134>
			  		{
			  		delay++;
 80006ae:	4b4a      	ldr	r3, [pc, #296]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a48      	ldr	r2, [pc, #288]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006b6:	6013      	str	r3, [r2, #0]
			  	while (delay<35U)
 80006b8:	4b47      	ldr	r3, [pc, #284]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b22      	cmp	r3, #34	; 0x22
 80006be:	d9f6      	bls.n	80006ae <E2V_CLICKS_Base_Aqu_Output+0x12a>
//			  	while (delay<35U)
//			  		{
//			  		delay++;
//			  		}

			  	*GPIO_BSRR_Adress = High_I2;
 80006c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	601a      	str	r2, [r3, #0]
			  	delay = 0U;
 80006c6:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
			  	while (delay<35U)
 80006cc:	e004      	b.n	80006d8 <E2V_CLICKS_Base_Aqu_Output+0x154>
			  		{
			  		delay++;
 80006ce:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	4a40      	ldr	r2, [pc, #256]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006d6:	6013      	str	r3, [r2, #0]
			  	while (delay<35U)
 80006d8:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b22      	cmp	r3, #34	; 0x22
 80006de:	d9f6      	bls.n	80006ce <E2V_CLICKS_Base_Aqu_Output+0x14a>
			  		}

			  	*GPIO_BSRR_Adress = Low_I1;
 80006e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006e2:	6a3a      	ldr	r2, [r7, #32]
 80006e4:	601a      	str	r2, [r3, #0]
			  	delay = 0U;
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
				while (delay<35U)
 80006ec:	e004      	b.n	80006f8 <E2V_CLICKS_Base_Aqu_Output+0x174>
			  		{
			  		delay++;
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a38      	ldr	r2, [pc, #224]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006f6:	6013      	str	r3, [r2, #0]
				while (delay<35U)
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b22      	cmp	r3, #34	; 0x22
 80006fe:	d9f6      	bls.n	80006ee <E2V_CLICKS_Base_Aqu_Output+0x16a>
			  		}

				*GPIO_BSRR_Adress = High_I3;
 8000700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	601a      	str	r2, [r3, #0]
				delay = 0U;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
				while (delay<35U)
 800070c:	e004      	b.n	8000718 <E2V_CLICKS_Base_Aqu_Output+0x194>
				  	{
				  	delay++;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a30      	ldr	r2, [pc, #192]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000716:	6013      	str	r3, [r2, #0]
				while (delay<35U)
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b22      	cmp	r3, #34	; 0x22
 800071e:	d9f6      	bls.n	800070e <E2V_CLICKS_Base_Aqu_Output+0x18a>
				  	}

				*GPIO_BSRR_Adress = Low_I2;
 8000720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000722:	69ba      	ldr	r2, [r7, #24]
 8000724:	601a      	str	r2, [r3, #0]
				delay = 0U;
 8000726:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
				while (delay<35U)
 800072c:	e004      	b.n	8000738 <E2V_CLICKS_Base_Aqu_Output+0x1b4>
				  	{
				  	delay++;
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000736:	6013      	str	r3, [r2, #0]
				while (delay<35U)
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b22      	cmp	r3, #34	; 0x22
 800073e:	d9f6      	bls.n	800072e <E2V_CLICKS_Base_Aqu_Output+0x1aa>
				  	}

			  	*GPIO_BSRR_Adress = Low_I3;
 8000740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	601a      	str	r2, [r3, #0]
			  	delay = 0U;
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
			  	while (delay<70U)
 800074c:	e004      	b.n	8000758 <E2V_CLICKS_Base_Aqu_Output+0x1d4>
			  		{
			  		delay++;
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000756:	6013      	str	r3, [r2, #0]
			  	while (delay<70U)
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b45      	cmp	r3, #69	; 0x45
 800075e:	d9f6      	bls.n	800074e <E2V_CLICKS_Base_Aqu_Output+0x1ca>
	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 8000760:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000764:	3301      	adds	r3, #1
 8000766:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800076a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <E2V_CLICKS_Base_Aqu_Output+0x258>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d394      	bcc.n	80006a0 <E2V_CLICKS_Base_Aqu_Output+0x11c>
			  		}
	}


	*GPIO_BSRR_Adress = Low_R1;
 8000776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800077a:	601a      	str	r2, [r3, #0]
	delay = 0U;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
	while (delay<2U)
 8000782:	e004      	b.n	800078e <E2V_CLICKS_Base_Aqu_Output+0x20a>
		{
		delay++;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 800078c:	6013      	str	r3, [r2, #0]
	while (delay<2U)
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d9f6      	bls.n	8000784 <E2V_CLICKS_Base_Aqu_Output+0x200>
		}

	*GPIO_BSRR_Adress = Low_R2;
 8000796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800079a:	601a      	str	r2, [r3, #0]
		delay = 0U;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
		while (delay<2U)
 80007a2:	e004      	b.n	80007ae <E2V_CLICKS_Base_Aqu_Output+0x22a>
			{
			delay++;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80007ac:	6013      	str	r3, [r2, #0]
		while (delay<2U)
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d9f6      	bls.n	80007a4 <E2V_CLICKS_Base_Aqu_Output+0x220>
			}

	*GPIO_BSRR_Adress = Low_DG;
 80007b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007ba:	601a      	str	r2, [r3, #0]
	delay = 0U;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <E2V_CLICKS_Base_Aqu_Output+0x254>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
	while (delay<35U)
 80007c2:	e012      	b.n	80007ea <E2V_CLICKS_Base_Aqu_Output+0x266>
 80007c4:	20000088 	.word	0x20000088
 80007c8:	20000078 	.word	0x20000078
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	08004494 	.word	0x08004494
 80007d4:	40020c18 	.word	0x40020c18
 80007d8:	2000007c 	.word	0x2000007c
 80007dc:	20000080 	.word	0x20000080
		{
		delay++;
 80007e0:	4b9a      	ldr	r3, [pc, #616]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a99      	ldr	r2, [pc, #612]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80007e8:	6013      	str	r3, [r2, #0]
	while (delay<35U)
 80007ea:	4b98      	ldr	r3, [pc, #608]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b22      	cmp	r3, #34	; 0x22
 80007f0:	d9f6      	bls.n	80007e0 <E2V_CLICKS_Base_Aqu_Output+0x25c>
		}

		*GPIO_BSRR_Adress = High_R1;
 80007f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007f6:	601a      	str	r2, [r3, #0]
		*GPIO_BSRR_Adress = High_R2;
 80007f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007fc:	601a      	str	r2, [r3, #0]
		*GPIO_BSRR_Adress = Low_R3;
 80007fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000802:	601a      	str	r2, [r3, #0]
		*GPIO_BSRR_Adress = High_R;
 8000804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000808:	601a      	str	r2, [r3, #0]

				delay = 0U;
 800080a:	4b90      	ldr	r3, [pc, #576]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
				while (delay<2U)
 8000810:	e004      	b.n	800081c <E2V_CLICKS_Base_Aqu_Output+0x298>
					{
					delay++;
 8000812:	4b8e      	ldr	r3, [pc, #568]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a8c      	ldr	r2, [pc, #560]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 800081a:	6013      	str	r3, [r2, #0]
				while (delay<2U)
 800081c:	4b8b      	ldr	r3, [pc, #556]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d9f6      	bls.n	8000812 <E2V_CLICKS_Base_Aqu_Output+0x28e>
					}



	uint32_t Ticks_To_Wait = mS_To_Wait*6718-848;
 8000824:	4b8a      	ldr	r3, [pc, #552]	; (8000a50 <E2V_CLICKS_Base_Aqu_Output+0x4cc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f641 223e 	movw	r2, #6718	; 0x1a3e
 800082c:	fb02 f303 	mul.w	r3, r2, r3
 8000830:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8000834:	607b      	str	r3, [r7, #4]
//	Ticks_To_Wait = 5870+6718;

	delay = 0U;
 8000836:	4b85      	ldr	r3, [pc, #532]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
	while (delay<Ticks_To_Wait)
 800083c:	e008      	b.n	8000850 <E2V_CLICKS_Base_Aqu_Output+0x2cc>
		{
		delay++;
 800083e:	4b83      	ldr	r3, [pc, #524]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a81      	ldr	r2, [pc, #516]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000846:	6013      	str	r3, [r2, #0]
		if (tcp_recieve) break;
 8000848:	4b82      	ldr	r3, [pc, #520]	; (8000a54 <E2V_CLICKS_Base_Aqu_Output+0x4d0>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d105      	bne.n	800085c <E2V_CLICKS_Base_Aqu_Output+0x2d8>
	while (delay<Ticks_To_Wait)
 8000850:	4b7e      	ldr	r3, [pc, #504]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d8f1      	bhi.n	800083e <E2V_CLICKS_Base_Aqu_Output+0x2ba>
 800085a:	e000      	b.n	800085e <E2V_CLICKS_Base_Aqu_Output+0x2da>
		if (tcp_recieve) break;
 800085c:	bf00      	nop
		}

// 	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1));

	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 800085e:	2300      	movs	r3, #0
 8000860:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8000864:	f000 bc0e 	b.w	8001084 <E2V_CLICKS_Base_Aqu_Output+0xb00>
	{

		sn = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
//		if (lines_counter&0x0001)sn = 1;

		opcode = BSB_S0+sn*4;
 800086e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3301      	adds	r3, #1
 8000878:	70fb      	strb	r3, [r7, #3]
		opcode = (opcode<<3)|OM_FDM1;
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	b25b      	sxtb	r3, r3
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	b25b      	sxtb	r3, r3
 8000886:	70fb      	strb	r3, [r7, #3]

		txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	2124      	movs	r1, #36	; 0x24
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fd79 	bl	8002384 <w5500_readReg>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2125      	movs	r1, #37	; 0x25
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fd71 	bl	8002384 <w5500_readReg>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		addr = (txWr0<<8)|(txWr1);
 80008a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80008ac:	021a      	lsls	r2, r3, #8
 80008ae:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80008b2:	4313      	orrs	r3, r2
 80008b4:	663b      	str	r3, [r7, #96]	; 0x60

		opcode = BSB_S0_TX+sn*4;
 80008b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	3302      	adds	r3, #2
 80008c0:	70fb      	strb	r3, [r7, #3]
		opcode = (opcode<<3)|OM_FDM0;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	70fb      	strb	r3, [r7, #3]

		W5500_SS_SELECT();
 80008c8:	2200      	movs	r2, #0
 80008ca:	2110      	movs	r1, #16
 80008cc:	4862      	ldr	r0, [pc, #392]	; (8000a58 <E2V_CLICKS_Base_Aqu_Output+0x4d4>)
 80008ce:	f002 fcd5 	bl	800327c <HAL_GPIO_WritePin>

		DMA2_Stream3->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008d2:	4b62      	ldr	r3, [pc, #392]	; (8000a5c <E2V_CLICKS_Base_Aqu_Output+0x4d8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a61      	ldr	r2, [pc, #388]	; (8000a5c <E2V_CLICKS_Base_Aqu_Output+0x4d8>)
 80008d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008dc:	6013      	str	r3, [r2, #0]
		DMA2_Stream3->NDTR = buff_size;
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <E2V_CLICKS_Base_Aqu_Output+0x4dc>)
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	4b5e      	ldr	r3, [pc, #376]	; (8000a5c <E2V_CLICKS_Base_Aqu_Output+0x4d8>)
 80008e4:	605a      	str	r2, [r3, #4]
		DMA2_Stream3->PAR = &SPI1->DR;
 80008e6:	4b5d      	ldr	r3, [pc, #372]	; (8000a5c <E2V_CLICKS_Base_Aqu_Output+0x4d8>)
 80008e8:	4a5e      	ldr	r2, [pc, #376]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80008ea:	609a      	str	r2, [r3, #8]
		DMA2_Stream3->M0AR = buff_to_send;
 80008ec:	4b5b      	ldr	r3, [pc, #364]	; (8000a5c <E2V_CLICKS_Base_Aqu_Output+0x4d8>)
 80008ee:	4a5e      	ldr	r2, [pc, #376]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 80008f0:	60da      	str	r2, [r3, #12]
		SET_BIT(hspi1.Instance->CR1, SPI_CR1_SPE);
 80008f2:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <E2V_CLICKS_Base_Aqu_Output+0x4e8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b5c      	ldr	r3, [pc, #368]	; (8000a6c <E2V_CLICKS_Base_Aqu_Output+0x4e8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000900:	601a      	str	r2, [r3, #0]

	    buff_to_send[0]=(addr & 0xFF00)>> 8;
 8000902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800090a:	701a      	strb	r2, [r3, #0]
	    buff_to_send[1]=(addr & 0x00FF);
 800090c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b55      	ldr	r3, [pc, #340]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000912:	705a      	strb	r2, [r3, #1]
        buff_to_send[2]=opcode|(RWB_WRITE<<2);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800091e:	709a      	strb	r2, [r3, #2]

        buff_to_send[3]=3;
 8000920:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000922:	2203      	movs	r2, #3
 8000924:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=14;
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000928:	220e      	movs	r2, #14
 800092a:	711a      	strb	r2, [r3, #4]
	    buff_to_send[5]=15;
 800092c:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800092e:	220f      	movs	r2, #15
 8000930:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=92;
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000934:	225c      	movs	r2, #92	; 0x5c
 8000936:	719a      	strb	r2, [r3, #6]
        buff_to_send[7]=65;
 8000938:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800093a:	2241      	movs	r2, #65	; 0x41
 800093c:	71da      	strb	r2, [r3, #7]
        buff_to_send[8]=35;
 800093e:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000940:	2223      	movs	r2, #35	; 0x23
 8000942:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=0;
 8000944:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000946:	2200      	movs	r2, #0
 8000948:	725a      	strb	r2, [r3, #9]
	    buff_to_send[10]=0;
 800094a:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800094c:	2200      	movs	r2, #0
 800094e:	729a      	strb	r2, [r3, #10]

	    buff_to_send[11]=(uint8_t)((lines_counter&0xFF00)>>8);
 8000950:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	b29b      	uxth	r3, r3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800095c:	72da      	strb	r2, [r3, #11]
	    buff_to_send[12]=(uint8_t)((lines_counter&0x00FF));
 800095e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000966:	731a      	strb	r2, [r3, #12]
        buff_to_send[13]=0x00;
 8000968:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 800096a:	2200      	movs	r2, #0
 800096c:	735a      	strb	r2, [r3, #13]
        buff_to_send[14]=0x00;
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000970:	2200      	movs	r2, #0
 8000972:	739a      	strb	r2, [r3, #14]

			  	  *spi1_cr2=0x0UL;
 8000974:	4b3e      	ldr	r3, [pc, #248]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 800097c:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <E2V_CLICKS_Base_Aqu_Output+0x4f0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000984:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 14; //DMA2_Stream3->NDTR
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <E2V_CLICKS_Base_Aqu_Output+0x4f4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	220e      	movs	r2, #14
 800098c:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <E2V_CLICKS_Base_Aqu_Output+0x4f8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a3b      	ldr	r2, [pc, #236]	; (8000a80 <E2V_CLICKS_Base_Aqu_Output+0x4fc>)
 8000994:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2202      	movs	r2, #2
 800099c:	601a      	str	r2, [r3, #0]


			  	//////////////////////////////////////////////////////////////////////////////////////////////////////////

					*GPIO_BSRR_Adress = High_I3;
 800099e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	601a      	str	r2, [r3, #0]
				  	delay = 0U;
 80009a4:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 80009aa:	e004      	b.n	80009b6 <E2V_CLICKS_Base_Aqu_Output+0x432>
				  		{
				  		delay++;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009b4:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 80009b6:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b22      	cmp	r3, #34	; 0x22
 80009bc:	d9f6      	bls.n	80009ac <E2V_CLICKS_Base_Aqu_Output+0x428>
				  		}

				  	*GPIO_BSRR_Adress = High_I1;
 80009be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c2:	601a      	str	r2, [r3, #0]
				  	delay = 0U;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 80009ca:	e004      	b.n	80009d6 <E2V_CLICKS_Base_Aqu_Output+0x452>
				  		{
				  		delay++;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009d4:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b22      	cmp	r3, #34	; 0x22
 80009dc:	d9f6      	bls.n	80009cc <E2V_CLICKS_Base_Aqu_Output+0x448>
				  		}

				  	*GPIO_BSRR_Adress = Low_I3;
 80009de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	601a      	str	r2, [r3, #0]
				  	delay = 0U;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 80009ea:	e004      	b.n	80009f6 <E2V_CLICKS_Base_Aqu_Output+0x472>
				  		{
				  		delay++;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009f4:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b22      	cmp	r3, #34	; 0x22
 80009fc:	d9f6      	bls.n	80009ec <E2V_CLICKS_Base_Aqu_Output+0x468>
				  		}

				  	*GPIO_BSRR_Adress = High_I2;
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	601a      	str	r2, [r3, #0]
				  	delay = 0U;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 8000a0a:	e004      	b.n	8000a16 <E2V_CLICKS_Base_Aqu_Output+0x492>
				  		{
				  		delay++;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a14:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b22      	cmp	r3, #34	; 0x22
 8000a1c:	d9f6      	bls.n	8000a0c <E2V_CLICKS_Base_Aqu_Output+0x488>
				  		}

				  	*GPIO_BSRR_Adress = Low_I1;
 8000a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a20:	6a3a      	ldr	r2, [r7, #32]
 8000a22:	601a      	str	r2, [r3, #0]
				  	delay = 0U;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
					while (delay<35U)
 8000a2a:	e004      	b.n	8000a36 <E2V_CLICKS_Base_Aqu_Output+0x4b2>
				  		{
				  		delay++;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a34:	6013      	str	r3, [r2, #0]
					while (delay<35U)
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b22      	cmp	r3, #34	; 0x22
 8000a3c:	d9f6      	bls.n	8000a2c <E2V_CLICKS_Base_Aqu_Output+0x4a8>
				  		}

					*GPIO_BSRR_Adress = High_I3;
 8000a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	601a      	str	r2, [r3, #0]
					delay = 0U;
 8000a44:	4b01      	ldr	r3, [pc, #4]	; (8000a4c <E2V_CLICKS_Base_Aqu_Output+0x4c8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
					while (delay<35U)
 8000a4a:	e020      	b.n	8000a8e <E2V_CLICKS_Base_Aqu_Output+0x50a>
 8000a4c:	2000007c 	.word	0x2000007c
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	200002a0 	.word	0x200002a0
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40026458 	.word	0x40026458
 8000a60:	20000000 	.word	0x20000000
 8000a64:	4001300c 	.word	0x4001300c
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	200001e8 	.word	0x200001e8
 8000a70:	20000004 	.word	0x20000004
 8000a74:	20000008 	.word	0x20000008
 8000a78:	2000000c 	.word	0x2000000c
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	0600045f 	.word	0x0600045f
					  	{
					  	delay++;
 8000a84:	4b96      	ldr	r3, [pc, #600]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a95      	ldr	r2, [pc, #596]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000a8c:	6013      	str	r3, [r2, #0]
					while (delay<35U)
 8000a8e:	4b94      	ldr	r3, [pc, #592]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b22      	cmp	r3, #34	; 0x22
 8000a94:	d9f6      	bls.n	8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>
					  	}

					*GPIO_BSRR_Adress = Low_I2;
 8000a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	601a      	str	r2, [r3, #0]
					delay = 0U;
 8000a9c:	4b90      	ldr	r3, [pc, #576]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
					while (delay<35U)
 8000aa2:	e004      	b.n	8000aae <E2V_CLICKS_Base_Aqu_Output+0x52a>
					  	{
					  	delay++;
 8000aa4:	4b8e      	ldr	r3, [pc, #568]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a8d      	ldr	r2, [pc, #564]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000aac:	6013      	str	r3, [r2, #0]
					while (delay<35U)
 8000aae:	4b8c      	ldr	r3, [pc, #560]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b22      	cmp	r3, #34	; 0x22
 8000ab4:	d9f6      	bls.n	8000aa4 <E2V_CLICKS_Base_Aqu_Output+0x520>
					  	}

				  	*GPIO_BSRR_Adress = Low_I3;
 8000ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	601a      	str	r2, [r3, #0]
				  	delay = 0U;
 8000abc:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 8000ac2:	e004      	b.n	8000ace <E2V_CLICKS_Base_Aqu_Output+0x54a>
				  		{
				  		delay++;
 8000ac4:	4b86      	ldr	r3, [pc, #536]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a85      	ldr	r2, [pc, #532]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000acc:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 8000ace:	4b84      	ldr	r3, [pc, #528]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b22      	cmp	r3, #34	; 0x22
 8000ad4:	d9f6      	bls.n	8000ac4 <E2V_CLICKS_Base_Aqu_Output+0x540>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad6:	b672      	cpsid	i
}
 8000ad8:	bf00      	nop

				  	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
				  	  __disable_irq();

//		  				*GPIO_BSRR_Adress = Low_R;
					  	delay = 0U;
 8000ada:	4b81      	ldr	r3, [pc, #516]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]


			  	switch (E2V_CLICKS_OR_Clock_Freq)
 8000ae0:	4b80      	ldr	r3, [pc, #512]	; (8000ce4 <E2V_CLICKS_Base_Aqu_Output+0x760>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ae8:	f000 8219 	beq.w	8000f1e <E2V_CLICKS_Base_Aqu_Output+0x99a>
 8000aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af0:	f000 8230 	beq.w	8000f54 <E2V_CLICKS_Base_Aqu_Output+0x9d0>
			  					delay++;
			  					}

			  				}
*/
for (int i= 0;i<number_Of_Rows;i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000af8:	e20a      	b.n	8000f10 <E2V_CLICKS_Base_Aqu_Output+0x98c>
	{
	if ((i == 487))
 8000afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000afc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d14e      	bne.n	8000ba2 <E2V_CLICKS_Base_Aqu_Output+0x61e>
			{
        buff_to_send[0]=3;
 8000b04:	4b78      	ldr	r3, [pc, #480]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b06:	2203      	movs	r2, #3
 8000b08:	701a      	strb	r2, [r3, #0]
        buff_to_send[1]=14;
 8000b0a:	4b77      	ldr	r3, [pc, #476]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	705a      	strb	r2, [r3, #1]
	    buff_to_send[2]=15;
 8000b10:	4b75      	ldr	r3, [pc, #468]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b12:	220f      	movs	r2, #15
 8000b14:	709a      	strb	r2, [r3, #2]
	    buff_to_send[3]=92;
 8000b16:	4b74      	ldr	r3, [pc, #464]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b18:	225c      	movs	r2, #92	; 0x5c
 8000b1a:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=65;
 8000b1c:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b1e:	2241      	movs	r2, #65	; 0x41
 8000b20:	711a      	strb	r2, [r3, #4]
        buff_to_send[5]=35;
 8000b22:	4b71      	ldr	r3, [pc, #452]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b24:	2223      	movs	r2, #35	; 0x23
 8000b26:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=(uint8_t)((i&0xFF00)>>8);
 8000b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b2a:	121b      	asrs	r3, r3, #8
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b6e      	ldr	r3, [pc, #440]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b30:	719a      	strb	r2, [r3, #6]
	    buff_to_send[7]=(uint8_t)((i&0x00FF));
 8000b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b38:	71da      	strb	r2, [r3, #7]

	    buff_to_send[8]=(uint8_t)((lines_counter&0xFF00)>>8);
 8000b3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b68      	ldr	r3, [pc, #416]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b46:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=(uint8_t)((lines_counter&0x00FF));
 8000b48:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b50:	725a      	strb	r2, [r3, #9]
        buff_to_send[10]=0x01;
 8000b52:	4b65      	ldr	r3, [pc, #404]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	729a      	strb	r2, [r3, #10]
        buff_to_send[11]=0x00;
 8000b58:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	72da      	strb	r2, [r3, #11]

			  	  *spi1_cr2=0x0UL;
 8000b5e:	4b63      	ldr	r3, [pc, #396]	; (8000cec <E2V_CLICKS_Base_Aqu_Output+0x768>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 8000b66:	4b62      	ldr	r3, [pc, #392]	; (8000cf0 <E2V_CLICKS_Base_Aqu_Output+0x76c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000b6e:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 11; //DMA2_Stream3->NDTR
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <E2V_CLICKS_Base_Aqu_Output+0x770>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	220b      	movs	r2, #11
 8000b76:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 8000b78:	4b5f      	ldr	r3, [pc, #380]	; (8000cf8 <E2V_CLICKS_Base_Aqu_Output+0x774>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a5f      	ldr	r2, [pc, #380]	; (8000cfc <E2V_CLICKS_Base_Aqu_Output+0x778>)
 8000b7e:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <E2V_CLICKS_Base_Aqu_Output+0x768>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2202      	movs	r2, #2
 8000b86:	601a      	str	r2, [r3, #0]

				  	delay = 0U;
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
				  	while (delay<20U)
 8000b8e:	e004      	b.n	8000b9a <E2V_CLICKS_Base_Aqu_Output+0x616>
				  		{
				  		delay++;
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a52      	ldr	r2, [pc, #328]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000b98:	6013      	str	r3, [r2, #0]
				  	while (delay<20U)
 8000b9a:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b13      	cmp	r3, #19
 8000ba0:	d9f6      	bls.n	8000b90 <E2V_CLICKS_Base_Aqu_Output+0x60c>
				  		}

			}
	if ((i == 974))
 8000ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ba4:	f240 32ce 	movw	r2, #974	; 0x3ce
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d14e      	bne.n	8000c4a <E2V_CLICKS_Base_Aqu_Output+0x6c6>
			{
        buff_to_send[0]=3;
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	701a      	strb	r2, [r3, #0]
        buff_to_send[1]=14;
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bb4:	220e      	movs	r2, #14
 8000bb6:	705a      	strb	r2, [r3, #1]
	    buff_to_send[2]=15;
 8000bb8:	4b4b      	ldr	r3, [pc, #300]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bba:	220f      	movs	r2, #15
 8000bbc:	709a      	strb	r2, [r3, #2]
	    buff_to_send[3]=92;
 8000bbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bc0:	225c      	movs	r2, #92	; 0x5c
 8000bc2:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=65;
 8000bc4:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bc6:	2241      	movs	r2, #65	; 0x41
 8000bc8:	711a      	strb	r2, [r3, #4]
        buff_to_send[5]=35;
 8000bca:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bcc:	2223      	movs	r2, #35	; 0x23
 8000bce:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=(uint8_t)((i&0xFF00)>>8);
 8000bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bd2:	121b      	asrs	r3, r3, #8
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bd8:	719a      	strb	r2, [r3, #6]
	    buff_to_send[7]=(uint8_t)((i&0x00FF));
 8000bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000be0:	71da      	strb	r2, [r3, #7]
	    buff_to_send[8]=(uint8_t)((lines_counter&0xFF00)>>8);
 8000be2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bee:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=(uint8_t)((lines_counter&0x00FF));
 8000bf0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bf8:	725a      	strb	r2, [r3, #9]
        buff_to_send[10]=0x02;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	729a      	strb	r2, [r3, #10]
        buff_to_send[11]=0x00;
 8000c00:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	72da      	strb	r2, [r3, #11]

			  	  *spi1_cr2=0x0UL;
 8000c06:	4b39      	ldr	r3, [pc, #228]	; (8000cec <E2V_CLICKS_Base_Aqu_Output+0x768>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <E2V_CLICKS_Base_Aqu_Output+0x76c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000c16:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 11; //DMA2_Stream3->NDTR
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <E2V_CLICKS_Base_Aqu_Output+0x770>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	220b      	movs	r2, #11
 8000c1e:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <E2V_CLICKS_Base_Aqu_Output+0x774>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <E2V_CLICKS_Base_Aqu_Output+0x778>)
 8000c26:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <E2V_CLICKS_Base_Aqu_Output+0x768>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	601a      	str	r2, [r3, #0]

			  	delay = 0U;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
			  	while (delay<20U)
 8000c36:	e004      	b.n	8000c42 <E2V_CLICKS_Base_Aqu_Output+0x6be>
			  		{
			  		delay++;
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a28      	ldr	r2, [pc, #160]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000c40:	6013      	str	r3, [r2, #0]
			  	while (delay<20U)
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b13      	cmp	r3, #19
 8000c48:	d9f6      	bls.n	8000c38 <E2V_CLICKS_Base_Aqu_Output+0x6b4>
			  		}

			}
	if ((i == 1461))
 8000c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c4c:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d15e      	bne.n	8000d12 <E2V_CLICKS_Base_Aqu_Output+0x78e>
			{
        buff_to_send[0]=3;
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	701a      	strb	r2, [r3, #0]
        buff_to_send[1]=14;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c5c:	220e      	movs	r2, #14
 8000c5e:	705a      	strb	r2, [r3, #1]
	    buff_to_send[2]=15;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c62:	220f      	movs	r2, #15
 8000c64:	709a      	strb	r2, [r3, #2]
	    buff_to_send[3]=92;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c68:	225c      	movs	r2, #92	; 0x5c
 8000c6a:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=65;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c6e:	2241      	movs	r2, #65	; 0x41
 8000c70:	711a      	strb	r2, [r3, #4]
        buff_to_send[5]=35;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c74:	2223      	movs	r2, #35	; 0x23
 8000c76:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=(uint8_t)((i&0xFF00)>>8);
 8000c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c7a:	121b      	asrs	r3, r3, #8
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c80:	719a      	strb	r2, [r3, #6]
	    buff_to_send[7]=(uint8_t)((i&0x00FF));
 8000c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c88:	71da      	strb	r2, [r3, #7]
	    buff_to_send[8]=(uint8_t)((lines_counter&0xFF00)>>8);
 8000c8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000c96:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=(uint8_t)((lines_counter&0x00FF));
 8000c98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000ca0:	725a      	strb	r2, [r3, #9]
        buff_to_send[10]=0x03;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	729a      	strb	r2, [r3, #10]
        buff_to_send[11]=0x00;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <E2V_CLICKS_Base_Aqu_Output+0x764>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	72da      	strb	r2, [r3, #11]

			  	  *spi1_cr2=0x0UL;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <E2V_CLICKS_Base_Aqu_Output+0x768>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <E2V_CLICKS_Base_Aqu_Output+0x76c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000cbe:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 11; //DMA2_Stream3->NDTR
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <E2V_CLICKS_Base_Aqu_Output+0x770>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	220b      	movs	r2, #11
 8000cc6:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <E2V_CLICKS_Base_Aqu_Output+0x774>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <E2V_CLICKS_Base_Aqu_Output+0x778>)
 8000cce:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <E2V_CLICKS_Base_Aqu_Output+0x768>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]

				  	delay = 0U;
 8000cd8:	4b01      	ldr	r3, [pc, #4]	; (8000ce0 <E2V_CLICKS_Base_Aqu_Output+0x75c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
				  	while (delay<20U)
 8000cde:	e014      	b.n	8000d0a <E2V_CLICKS_Base_Aqu_Output+0x786>
 8000ce0:	2000007c 	.word	0x2000007c
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	2000009c 	.word	0x2000009c
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	0600045f 	.word	0x0600045f
				  		{
				  		delay++;
 8000d00:	4b88      	ldr	r3, [pc, #544]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	4a87      	ldr	r2, [pc, #540]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000d08:	6013      	str	r3, [r2, #0]
				  	while (delay<20U)
 8000d0a:	4b86      	ldr	r3, [pc, #536]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b13      	cmp	r3, #19
 8000d10:	d9f6      	bls.n	8000d00 <E2V_CLICKS_Base_Aqu_Output+0x77c>
				  		}

			}
	if ((i == 1948))
 8000d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d14:	f240 729c 	movw	r2, #1948	; 0x79c
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d14e      	bne.n	8000dba <E2V_CLICKS_Base_Aqu_Output+0x836>
			{
        buff_to_send[0]=3;
 8000d1c:	4b82      	ldr	r3, [pc, #520]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	701a      	strb	r2, [r3, #0]
        buff_to_send[1]=14;
 8000d22:	4b81      	ldr	r3, [pc, #516]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d24:	220e      	movs	r2, #14
 8000d26:	705a      	strb	r2, [r3, #1]
	    buff_to_send[2]=15;
 8000d28:	4b7f      	ldr	r3, [pc, #508]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	709a      	strb	r2, [r3, #2]
	    buff_to_send[3]=92;
 8000d2e:	4b7e      	ldr	r3, [pc, #504]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d30:	225c      	movs	r2, #92	; 0x5c
 8000d32:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=65;
 8000d34:	4b7c      	ldr	r3, [pc, #496]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d36:	2241      	movs	r2, #65	; 0x41
 8000d38:	711a      	strb	r2, [r3, #4]
        buff_to_send[5]=35;
 8000d3a:	4b7b      	ldr	r3, [pc, #492]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d3c:	2223      	movs	r2, #35	; 0x23
 8000d3e:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=(uint8_t)((i&0xFF00)>>8);
 8000d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d42:	121b      	asrs	r3, r3, #8
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b78      	ldr	r3, [pc, #480]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d48:	719a      	strb	r2, [r3, #6]
	    buff_to_send[7]=(uint8_t)((i&0x00FF));
 8000d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b76      	ldr	r3, [pc, #472]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d50:	71da      	strb	r2, [r3, #7]
	    buff_to_send[8]=(uint8_t)((lines_counter&0xFF00)>>8);
 8000d52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b72      	ldr	r3, [pc, #456]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d5e:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=(uint8_t)((lines_counter&0x00FF));
 8000d60:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b70      	ldr	r3, [pc, #448]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d68:	725a      	strb	r2, [r3, #9]
        buff_to_send[10]=0x04;
 8000d6a:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	729a      	strb	r2, [r3, #10]
        buff_to_send[11]=0x00;
 8000d70:	4b6d      	ldr	r3, [pc, #436]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	72da      	strb	r2, [r3, #11]

			  	  *spi1_cr2=0x0UL;
 8000d76:	4b6d      	ldr	r3, [pc, #436]	; (8000f2c <E2V_CLICKS_Base_Aqu_Output+0x9a8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 8000d7e:	4b6c      	ldr	r3, [pc, #432]	; (8000f30 <E2V_CLICKS_Base_Aqu_Output+0x9ac>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000d86:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 11; //DMA2_Stream3->NDTR
 8000d88:	4b6a      	ldr	r3, [pc, #424]	; (8000f34 <E2V_CLICKS_Base_Aqu_Output+0x9b0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	220b      	movs	r2, #11
 8000d8e:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 8000d90:	4b69      	ldr	r3, [pc, #420]	; (8000f38 <E2V_CLICKS_Base_Aqu_Output+0x9b4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <E2V_CLICKS_Base_Aqu_Output+0x9b8>)
 8000d96:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 8000d98:	4b64      	ldr	r3, [pc, #400]	; (8000f2c <E2V_CLICKS_Base_Aqu_Output+0x9a8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	601a      	str	r2, [r3, #0]

				  	delay = 0U;
 8000da0:	4b60      	ldr	r3, [pc, #384]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
				  	while (delay<20U)
 8000da6:	e004      	b.n	8000db2 <E2V_CLICKS_Base_Aqu_Output+0x82e>
				  		{
				  		delay++;
 8000da8:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a5d      	ldr	r2, [pc, #372]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000db0:	6013      	str	r3, [r2, #0]
				  	while (delay<20U)
 8000db2:	4b5c      	ldr	r3, [pc, #368]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b13      	cmp	r3, #19
 8000db8:	d9f6      	bls.n	8000da8 <E2V_CLICKS_Base_Aqu_Output+0x824>
				  		}

			}
	adc = (((GPIOE->IDR)&0x0000ffff)<<2) + (((GPIOB->IDR)&0x00000300)>>8);// считать значение ADC
 8000dba:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <E2V_CLICKS_Base_Aqu_Output+0x9bc>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	009a      	lsls	r2, r3, #2
 8000dc0:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <E2V_CLICKS_Base_Aqu_Output+0x9c0>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	4a60      	ldr	r2, [pc, #384]	; (8000f48 <E2V_CLICKS_Base_Aqu_Output+0x9c4>)
 8000dc6:	6912      	ldr	r2, [r2, #16]
 8000dc8:	0a12      	lsrs	r2, r2, #8
 8000dca:	f002 0203 	and.w	r2, r2, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a5e      	ldr	r2, [pc, #376]	; (8000f4c <E2V_CLICKS_Base_Aqu_Output+0x9c8>)
 8000dd2:	6013      	str	r3, [r2, #0]
//	adc = adc >> 2;

	*GPIO_BSRR_Adress = High_R2;
 8000dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dd8:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000de0:	4b50      	ldr	r3, [pc, #320]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]

  	GPIOB->BSRR = 0x1UL << 12U + 16U; 		//КОНЕЦ acquire, начало convert
 8000de6:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <E2V_CLICKS_Base_Aqu_Output+0x9c4>)
 8000de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dec:	619a      	str	r2, [r3, #24]

	*GPIO_BSRR_Adress = Low_R1;
 8000dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000df2:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]

	*GPIO_BSRR_Adress = High_R;
 8000dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfe:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000e00:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
	while (delay<2U)
 8000e06:	e004      	b.n	8000e12 <E2V_CLICKS_Base_Aqu_Output+0x88e>
		{
		delay++;
 8000e08:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a45      	ldr	r2, [pc, #276]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e10:	6013      	str	r3, [r2, #0]
	while (delay<2U)
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d9f6      	bls.n	8000e08 <E2V_CLICKS_Base_Aqu_Output+0x884>
		}

	*GPIO_BSRR_Adress = Low_R;
 8000e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e1e:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
	while (delay<2U)
 8000e26:	e004      	b.n	8000e32 <E2V_CLICKS_Base_Aqu_Output+0x8ae>
		{
		delay++;
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e30:	6013      	str	r3, [r2, #0]
	while (delay<2U)
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d9f6      	bls.n	8000e28 <E2V_CLICKS_Base_Aqu_Output+0x8a4>
		}

  	GPIOB->BSRR = 0x1UL << 12U; 		//сброс флага NCNVST
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <E2V_CLICKS_Base_Aqu_Output+0x9c4>)
 8000e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e40:	619a      	str	r2, [r3, #24]

	*GPIO_BSRR_Adress = High_R3;
 8000e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e46:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]

	*GPIO_BSRR_Adress = Low_R2;
 8000e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e5e:	601a      	str	r2, [r3, #0]

//	adc = 0;
//			HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)

	  buff_to_send[0]=(uint8_t)((adc&0x00FF0000)>>16);		///////////////////////////////
 8000e60:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <E2V_CLICKS_Base_Aqu_Output+0x9c8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0c1b      	lsrs	r3, r3, #16
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000e6a:	701a      	strb	r2, [r3, #0]
	  buff_to_send[1]=(uint8_t)((adc&0x0000FF00)>>8);			///////////////////////////////
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <E2V_CLICKS_Base_Aqu_Output+0x9c8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000e76:	705a      	strb	r2, [r3, #1]
	  buff_to_send[2]=(uint8_t)((adc&0x000000FF)>>0);			///////////////////////////////
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <E2V_CLICKS_Base_Aqu_Output+0x9c8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000e80:	709a      	strb	r2, [r3, #2]

	*spi1_cr2=0x0UL;									///////////////////////////////
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <E2V_CLICKS_Base_Aqu_Output+0x9a8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
	*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <E2V_CLICKS_Base_Aqu_Output+0x9ac>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000e92:	601a      	str	r2, [r3, #0]
	*dma2_stream3_ndtr = 3; //DMA2_Stream2->NDTR///////////////////////////////
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <E2V_CLICKS_Base_Aqu_Output+0x9b0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	601a      	str	r2, [r3, #0]
	*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <E2V_CLICKS_Base_Aqu_Output+0x9b4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <E2V_CLICKS_Base_Aqu_Output+0x9b8>)
 8000ea2:	601a      	str	r2, [r3, #0]
	*spi1_cr2=0x2UL;									///////////////////////////////
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <E2V_CLICKS_Base_Aqu_Output+0x9a8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	601a      	str	r2, [r3, #0]


	delay = 0U;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
	while (delay<10U)
 8000eb2:	e004      	b.n	8000ebe <E2V_CLICKS_Base_Aqu_Output+0x93a>
		{
		delay++;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ebc:	6013      	str	r3, [r2, #0]
	while (delay<10U)
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	d9f6      	bls.n	8000eb4 <E2V_CLICKS_Base_Aqu_Output+0x930>
		}

	*GPIO_BSRR_Adress = High_R1;
 8000ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000eca:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]

	*GPIO_BSRR_Adress = Low_R3;
 8000ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ee2:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

//	ADC1->CR2 = 0x40000001;							///////////////////////////////

	delay = 0U;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
	while (delay<5U)
 8000ef6:	e004      	b.n	8000f02 <E2V_CLICKS_Base_Aqu_Output+0x97e>
		{
		delay++;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000f00:	6013      	str	r3, [r2, #0]
	while (delay<5U)
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d9f6      	bls.n	8000ef8 <E2V_CLICKS_Base_Aqu_Output+0x974>
for (int i= 0;i<number_Of_Rows;i++)
 8000f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <E2V_CLICKS_Base_Aqu_Output+0x9cc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	f4ff adef 	bcc.w	8000afa <E2V_CLICKS_Base_Aqu_Output+0x576>

//  adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////


	}
break;
 8000f1c:	e01b      	b.n	8000f56 <E2V_CLICKS_Base_Aqu_Output+0x9d2>
*/			  			break;
 8000f1e:	bf00      	nop
 8000f20:	e019      	b.n	8000f56 <E2V_CLICKS_Base_Aqu_Output+0x9d2>
 8000f22:	bf00      	nop
 8000f24:	2000007c 	.word	0x2000007c
 8000f28:	2000009c 	.word	0x2000009c
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	20000008 	.word	0x20000008
 8000f34:	2000000c 	.word	0x2000000c
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	0600045f 	.word	0x0600045f
 8000f40:	40021000 	.word	0x40021000
 8000f44:	0003fffc 	.word	0x0003fffc
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	2000019c 	.word	0x2000019c
 8000f50:	20000084 	.word	0x20000084
			  			    adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////

//			  				delay = 0U;
//			  				delay = 0U;
			  				}
*/			  			break;
 8000f54:	bf00      	nop
			  		}

  				*GPIO_BSRR_Adress = High_R;
 8000f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f5a:	601a      	str	r2, [r3, #0]
  				delay = 0U;
 8000f5c:	4ba5      	ldr	r3, [pc, #660]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
  				delay = 0U;
 8000f62:	4ba4      	ldr	r3, [pc, #656]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
  				delay = 0U;
 8000f68:	4ba2      	ldr	r3, [pc, #648]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]

  				*GPIO_BSRR_Adress = High_R1;
 8000f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f72:	601a      	str	r2, [r3, #0]

  			  buff_to_send[0]=(uint8_t)((adc&0x00FF0000)>>8);		///////////////////////////////
 8000f74:	4ba0      	ldr	r3, [pc, #640]	; (80011f8 <E2V_CLICKS_Base_Aqu_Output+0xc74>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4ba0      	ldr	r3, [pc, #640]	; (80011fc <E2V_CLICKS_Base_Aqu_Output+0xc78>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  			  buff_to_send[1]=(uint8_t)((adc&0x0000FF00));			///////////////////////////////
 8000f7e:	4b9e      	ldr	r3, [pc, #632]	; (80011f8 <E2V_CLICKS_Base_Aqu_Output+0xc74>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4b9e      	ldr	r3, [pc, #632]	; (80011fc <E2V_CLICKS_Base_Aqu_Output+0xc78>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	705a      	strb	r2, [r3, #1]
  			  buff_to_send[2]=(uint8_t)((adc&0x000000FF));			///////////////////////////////
 8000f88:	4b9b      	ldr	r3, [pc, #620]	; (80011f8 <E2V_CLICKS_Base_Aqu_Output+0xc74>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b9b      	ldr	r3, [pc, #620]	; (80011fc <E2V_CLICKS_Base_Aqu_Output+0xc78>)
 8000f90:	709a      	strb	r2, [r3, #2]

  			*spi1_cr2=0x0UL;									///////////////////////////////
 8000f92:	4b9b      	ldr	r3, [pc, #620]	; (8001200 <E2V_CLICKS_Base_Aqu_Output+0xc7c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
  			*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000f9a:	4b9a      	ldr	r3, [pc, #616]	; (8001204 <E2V_CLICKS_Base_Aqu_Output+0xc80>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000fa2:	601a      	str	r2, [r3, #0]
  			*dma2_stream3_ndtr = 3; //DMA2_Stream2->NDTR///////////////////////////////
 8000fa4:	4b98      	ldr	r3, [pc, #608]	; (8001208 <E2V_CLICKS_Base_Aqu_Output+0xc84>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	601a      	str	r2, [r3, #0]
  			*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000fac:	4b97      	ldr	r3, [pc, #604]	; (800120c <E2V_CLICKS_Base_Aqu_Output+0xc88>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a97      	ldr	r2, [pc, #604]	; (8001210 <E2V_CLICKS_Base_Aqu_Output+0xc8c>)
 8000fb2:	601a      	str	r2, [r3, #0]
  			*spi1_cr2=0x2UL;
 8000fb4:	4b92      	ldr	r3, [pc, #584]	; (8001200 <E2V_CLICKS_Base_Aqu_Output+0xc7c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	601a      	str	r2, [r3, #0]
  			///////////////////////////////
  			delay = 0U;
 8000fbc:	4b8d      	ldr	r3, [pc, #564]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
  			while (delay<20U)
 8000fc2:	e004      	b.n	8000fce <E2V_CLICKS_Base_Aqu_Output+0xa4a>
  				{
  				delay++;
 8000fc4:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a8a      	ldr	r2, [pc, #552]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000fcc:	6013      	str	r3, [r2, #0]
  			while (delay<20U)
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b13      	cmp	r3, #19
 8000fd4:	d9f6      	bls.n	8000fc4 <E2V_CLICKS_Base_Aqu_Output+0xa40>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd6:	b662      	cpsie	i
}
 8000fd8:	bf00      	nop

				__enable_irq();

			  	//////////////////////////////////////////////////////////////////////////////////////////////////////////

		W5500_SS_DESELECT();
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2110      	movs	r1, #16
 8000fde:	488d      	ldr	r0, [pc, #564]	; (8001214 <E2V_CLICKS_Base_Aqu_Output+0xc90>)
 8000fe0:	f002 f94c 	bl	800327c <HAL_GPIO_WritePin>
		addr = addr+number_Of_Rows*3+11*5;
 8000fe4:	4b8c      	ldr	r3, [pc, #560]	; (8001218 <E2V_CLICKS_Base_Aqu_Output+0xc94>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	441a      	add	r2, r3
 8000fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3337      	adds	r3, #55	; 0x37
 8000ff4:	663b      	str	r3, [r7, #96]	; 0x60
//		if (addr > 0xffff)addr=addr-0xffff;

		if (lines_counter == 70)
 8000ff6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ffa:	2b46      	cmp	r3, #70	; 0x46
 8000ffc:	d102      	bne.n	8001004 <E2V_CLICKS_Base_Aqu_Output+0xa80>
		{
			delay = 0;
 8000ffe:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
		}

		opcode = BSB_S0+sn*4;
 8001004:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3301      	adds	r3, #1
 800100e:	70fb      	strb	r3, [r7, #3]
		opcode = (opcode<<3)|OM_FDM1;
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	b25b      	sxtb	r3, r3
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	b25b      	sxtb	r3, r3
 800101c:	70fb      	strb	r3, [r7, #3]

		txWr0 = (addr&0xFF00)>>8;
 800101e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		txWr1 = (addr&0x00FF);
 8001026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001028:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 800102c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2124      	movs	r1, #36	; 0x24
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f973 	bl	8002320 <w5500_writeReg>
		w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 800103a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	2125      	movs	r1, #37	; 0x25
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f96c 	bl	8002320 <w5500_writeReg>

		opcode=0;
 8001048:	2300      	movs	r3, #0
 800104a:	70fb      	strb	r3, [r7, #3]
		opcode = BSB_S0+sn*4;
 800104c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3301      	adds	r3, #1
 8001056:	70fb      	strb	r3, [r7, #3]
		opcode = (opcode<<3)|OM_FDM1;
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	b25b      	sxtb	r3, r3
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	b25b      	sxtb	r3, r3
 8001064:	70fb      	strb	r3, [r7, #3]
		w5500_writeReg(opcode,Sn_CR, CR_SEND);
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	2220      	movs	r2, #32
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f001 f957 	bl	8002320 <w5500_writeReg>


		if (tcp_recieve) break;
 8001072:	4b6a      	ldr	r3, [pc, #424]	; (800121c <E2V_CLICKS_Base_Aqu_Output+0xc98>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10c      	bne.n	8001094 <E2V_CLICKS_Base_Aqu_Output+0xb10>
	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 800107a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800107e:	3301      	adds	r3, #1
 8001080:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001084:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001088:	4b65      	ldr	r3, [pc, #404]	; (8001220 <E2V_CLICKS_Base_Aqu_Output+0xc9c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	f4ff abeb 	bcc.w	8000868 <E2V_CLICKS_Base_Aqu_Output+0x2e4>
 8001092:	e000      	b.n	8001096 <E2V_CLICKS_Base_Aqu_Output+0xb12>
		if (tcp_recieve) break;
 8001094:	bf00      	nop

	}

//	HAL_ADC_Stop(&hadc1);

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <E2V_CLICKS_Base_Aqu_Output+0xca0>)
 8001098:	f44f 0277 	mov.w	r2, #16187392	; 0xf70000
 800109c:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R1 + 16U))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));


	delay = 0U;
 800109e:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
	while (delay<100)
 80010a4:	e004      	b.n	80010b0 <E2V_CLICKS_Base_Aqu_Output+0xb2c>
		{
		delay++;
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010ae:	6013      	str	r3, [r2, #0]
	while (delay<100)
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b63      	cmp	r3, #99	; 0x63
 80010b6:	d9f6      	bls.n	80010a6 <E2V_CLICKS_Base_Aqu_Output+0xb22>
		}

	delay = 0U;
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
	while (delay<100)
 80010be:	e004      	b.n	80010ca <E2V_CLICKS_Base_Aqu_Output+0xb46>
		{
		delay++;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010c8:	6013      	str	r3, [r2, #0]
	while (delay<100)
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b63      	cmp	r3, #99	; 0x63
 80010d0:	d9f6      	bls.n	80010c0 <E2V_CLICKS_Base_Aqu_Output+0xb3c>
		}
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U));
 80010d2:	4b54      	ldr	r3, [pc, #336]	; (8001224 <E2V_CLICKS_Base_Aqu_Output+0xca0>)
 80010d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010d8:	619a      	str	r2, [r3, #24]



for (int i = 0; i < 10; i++ )
 80010da:	2300      	movs	r3, #0
 80010dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80010de:	e079      	b.n	80011d4 <E2V_CLICKS_Base_Aqu_Output+0xc50>
{
	while (delay<2000)
		{
		delay++;
 80010e0:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a43      	ldr	r2, [pc, #268]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010e8:	6013      	str	r3, [r2, #0]
	while (delay<2000)
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010f2:	d3f5      	bcc.n	80010e0 <E2V_CLICKS_Base_Aqu_Output+0xb5c>
		}
	sn = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	opcode = BSB_S0+sn*4;
 80010fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3301      	adds	r3, #1
 8001104:	70fb      	strb	r3, [r7, #3]
	opcode = (opcode<<3)|OM_FDM1;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	b25b      	sxtb	r3, r3
 8001112:	70fb      	strb	r3, [r7, #3]

	txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2124      	movs	r1, #36	; 0x24
 8001118:	4618      	mov	r0, r3
 800111a:	f001 f933 	bl	8002384 <w5500_readReg>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2125      	movs	r1, #37	; 0x25
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f92b 	bl	8002384 <w5500_readReg>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	addr = (txWr0<<8)|(txWr1);
 8001134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001138:	021a      	lsls	r2, r3, #8
 800113a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800113e:	4313      	orrs	r3, r2
 8001140:	663b      	str	r3, [r7, #96]	; 0x60


	addr = addr+14;
 8001142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001144:	330e      	adds	r3, #14
 8001146:	663b      	str	r3, [r7, #96]	; 0x60
	if (addr > 0xffff)addr=addr-0xffffU;
 8001148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800114a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114e:	d304      	bcc.n	800115a <E2V_CLICKS_Base_Aqu_Output+0xbd6>
 8001150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001152:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001156:	3bff      	subs	r3, #255	; 0xff
 8001158:	663b      	str	r3, [r7, #96]	; 0x60

	opcode = BSB_S0+sn*4;
 800115a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	3301      	adds	r3, #1
 8001164:	70fb      	strb	r3, [r7, #3]
	opcode = (opcode<<3)|OM_FDM1;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	b25b      	sxtb	r3, r3
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	b25b      	sxtb	r3, r3
 8001172:	70fb      	strb	r3, [r7, #3]

	txWr0 = (addr&0xFF00)>>8;
 8001174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	txWr1 = (addr&0x00FF);
 800117c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800117e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8001182:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	2124      	movs	r1, #36	; 0x24
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f8c8 	bl	8002320 <w5500_writeReg>
	w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8001190:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2125      	movs	r1, #37	; 0x25
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f8c1 	bl	8002320 <w5500_writeReg>

	opcode=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	70fb      	strb	r3, [r7, #3]
	opcode = BSB_S0+sn*4;
 80011a2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	70fb      	strb	r3, [r7, #3]
	opcode = (opcode<<3)|OM_FDM1;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	70fb      	strb	r3, [r7, #3]
	w5500_writeReg(opcode,Sn_CR, CR_SEND);
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2220      	movs	r2, #32
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 f8ac 	bl	8002320 <w5500_writeReg>
	delay = 0U;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <E2V_CLICKS_Base_Aqu_Output+0xc70>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
for (int i = 0; i < 10; i++ )
 80011ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011d0:	3301      	adds	r3, #1
 80011d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80011d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011d6:	2b09      	cmp	r3, #9
 80011d8:	dd87      	ble.n	80010ea <E2V_CLICKS_Base_Aqu_Output+0xb66>

}

if (tcp_recieve) TCP_Recieve();
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <E2V_CLICKS_Base_Aqu_Output+0xc98>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <E2V_CLICKS_Base_Aqu_Output+0xc62>
 80011e2:	f000 fd55 	bl	8001c90 <TCP_Recieve>
tcp_recieve = 0;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <E2V_CLICKS_Base_Aqu_Output+0xc98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]


//*GPIO_BSRR_Adress = High_I1|High_I2|High_I3|Low_DG|Low_R1|Low_R2|High_R3|Low_R;

}
 80011ec:	bf00      	nop
 80011ee:	3768      	adds	r7, #104	; 0x68
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000007c 	.word	0x2000007c
 80011f8:	2000019c 	.word	0x2000019c
 80011fc:	2000009c 	.word	0x2000009c
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000010 	.word	0x20000010
 8001210:	0600045f 	.word	0x0600045f
 8001214:	40020000 	.word	0x40020000
 8001218:	20000084 	.word	0x20000084
 800121c:	200002a0 	.word	0x200002a0
 8001220:	20000080 	.word	0x20000080
 8001224:	40020c00 	.word	0x40020c00

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f001 f907 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f861 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 f96b 	bl	8001510 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f000 f94f 	bl	80014dc <MX_DMA_Init>
  MX_SPI1_Init();
 800123e:	f000 f917 	bl	8001470 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001242:	f000 f8c3 	bl	80013cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  w5500_ini();
 8001246:	f000 fb7d 	bl	8001944 <w5500_ini>
  w5500_startUDP(0);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 fcb2 	bl	8001bb4 <w5500_startUDP>
  w5500_startUDP(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fcaf 	bl	8001bb4 <w5500_startUDP>
  w5500_startTCP();
 8001256:	f000 ff19 	bl	800208c <w5500_startTCP>

  OR_Clock_period = 1;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <main+0xc0>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  E2V_CLICKS_Ini();
 8001260:	f7ff f934 	bl	80004cc <E2V_CLICKS_Ini>
  uint8_t trigger = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t counter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  volatile uint32_t i= 0;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if ((CCD_Mode & 0x01) == 1)								//Start aqu
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <main+0xc4>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d02b      	beq.n	80012d4 <main+0xac>
	  {
			  if ((CCD_Mode & 0x04) == 0)						//no trigger
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <main+0xc4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <main+0x74>
			  {
	  		  	  E2V_CLICKS_Base_Aqu_Output();
 8001288:	f7ff f97c 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <main+0xc4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <main+0xc4>)
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e01b      	b.n	80012d4 <main+0xac>
			  }
			  else											//trigger
			  {
				  while(1)
				  {
				  trigger=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <main+0xc8>)
 80012a2:	f001 ffd3 	bl	800324c <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
			  	  if (trigger == 1)							//triggered
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d102      	bne.n	80012b6 <main+0x8e>
			  	  	  {
			  		E2V_CLICKS_Base_Aqu_Output();
 80012b0:	f7ff f968 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
			  		  	  break;
 80012b4:	e005      	b.n	80012c2 <main+0x9a>
			  	  	  }
				  if (tcp_recieve) break;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <main+0xcc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <main+0x98>
				  trigger=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80012be:	e7ed      	b.n	800129c <main+0x74>
				  if (tcp_recieve) break;
 80012c0:	bf00      	nop
				  }
			  	  trigger = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <main+0xc4>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <main+0xc4>)
 80012d2:	701a      	strb	r2, [r3, #0]
			  }
	  }

	  if (tcp_recieve)
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <main+0xcc>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0c9      	beq.n	8001270 <main+0x48>
		  {
		  TCP_Recieve();
 80012dc:	f000 fcd8 	bl	8001c90 <TCP_Recieve>
		  tcp_recieve = 0;
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <main+0xcc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	  if ((CCD_Mode & 0x01) == 1)								//Start aqu
 80012e6:	e7c3      	b.n	8001270 <main+0x48>
 80012e8:	20000088 	.word	0x20000088
 80012ec:	20000090 	.word	0x20000090
 80012f0:	40020400 	.word	0x40020400
 80012f4:	200002a0 	.word	0x200002a0

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	; 0x50
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2230      	movs	r2, #48	; 0x30
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f003 f8b0 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <SystemClock_Config+0xcc>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <SystemClock_Config+0xcc>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <SystemClock_Config+0xd0>)
 8001342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SystemClock_Config+0xd0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001368:	2304      	movs	r3, #4
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800136c:	23a8      	movs	r3, #168	; 0xa8
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001374:	2307      	movs	r3, #7
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4618      	mov	r0, r3
 800137e:	f001 ffbb 	bl	80032f8 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001388:	f000 f9a8 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001398:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2105      	movs	r1, #5
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 fa1c 	bl	80037e8 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b6:	f000 f991 	bl	80016dc <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	; 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <MX_ADC1_Init+0x98>)
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <MX_ADC1_Init+0x9c>)
 80013e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_ADC1_Init+0x98>)
 80013e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_ADC1_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_ADC1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_ADC1_Init+0x98>)
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <MX_ADC1_Init+0xa0>)
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_ADC1_Init+0x98>)
 800141a:	2201      	movs	r2, #1
 800141c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_ADC1_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_ADC1_Init+0x98>)
 8001428:	2201      	movs	r2, #1
 800142a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_ADC1_Init+0x98>)
 800142e:	f001 f89d 	bl	800256c <HAL_ADC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 f950 	bl	80016dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800143c:	230d      	movs	r3, #13
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_ADC1_Init+0x98>)
 800144e:	f001 f8d1 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001458:	f000 f940 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200001a0 	.word	0x200001a0
 8001468:	40012000 	.word	0x40012000
 800146c:	0f000001 	.word	0x0f000001

08001470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <MX_SPI1_Init+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_SPI1_Init+0x64>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014bc:	220a      	movs	r2, #10
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_SPI1_Init+0x64>)
 80014c2:	f002 fb7d 	bl	8003bc0 <HAL_SPI_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014cc:	f000 f906 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200001e8 	.word	0x200001e8
 80014d8:	40013000 	.word	0x40013000

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_DMA_Init+0x30>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <MX_DMA_Init+0x30>)
 80014ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_DMA_Init+0x30>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a5f      	ldr	r2, [pc, #380]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a43      	ldr	r2, [pc, #268]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <MX_GPIO_Init+0x1b8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_SCS_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2114      	movs	r1, #20
 80015d2:	483e      	ldr	r0, [pc, #248]	; (80016cc <MX_GPIO_Init+0x1bc>)
 80015d4:	f001 fe52 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	483c      	ldr	r0, [pc, #240]	; (80016d0 <MX_GPIO_Init+0x1c0>)
 80015e0:	f001 fe4c 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015e4:	2200      	movs	r2, #0
 80015e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015ea:	483a      	ldr	r0, [pc, #232]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80015ec:	f001 fe46 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80015f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015fa:	2302      	movs	r3, #2
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4834      	ldr	r0, [pc, #208]	; (80016d8 <MX_GPIO_Init+0x1c8>)
 8001606:	f001 fc85 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800160a:	2301      	movs	r3, #1
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001612:	2302      	movs	r3, #2
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	482b      	ldr	r0, [pc, #172]	; (80016cc <MX_GPIO_Init+0x1bc>)
 800161e:	f001 fc79 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin SPI1_SCS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_SCS_Pin;
 8001622:	2314      	movs	r3, #20
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4824      	ldr	r0, [pc, #144]	; (80016cc <MX_GPIO_Init+0x1bc>)
 800163a:	f001 fc6b 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800163e:	2308      	movs	r3, #8
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001642:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	481e      	ldr	r0, [pc, #120]	; (80016cc <MX_GPIO_Init+0x1bc>)
 8001654:	f001 fc5e 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB15 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8
 8001658:	f24a 3301 	movw	r3, #41729	; 0xa301
 800165c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_GPIO_Init+0x1c0>)
 800166e:	f001 fc51 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <MX_GPIO_Init+0x1c0>)
 800168c:	f001 fc42 	bl	8002f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001694:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <MX_GPIO_Init+0x1c4>)
 80016aa:	f001 fc33 	bl	8002f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2009      	movs	r0, #9
 80016b4:	f001 fa97 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016b8:	2009      	movs	r0, #9
 80016ba:	f001 fab0 	bl	8002c1e <HAL_NVIC_EnableIRQ>

}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	; 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40021000 	.word	0x40021000

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <Error_Handler+0x8>
	...

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_MspInit+0x4c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <HAL_MspInit+0x4c>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x4c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x4c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001726:	2007      	movs	r0, #7
 8001728:	f001 fa52 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_ADC_MspInit+0x7c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d127      	bne.n	80017aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_ADC_MspInit+0x80>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_ADC_MspInit+0x80>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_ADC_MspInit+0x80>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_ADC_MspInit+0x80>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_ADC_MspInit+0x80>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_ADC_MspInit+0x80>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001792:	2308      	movs	r3, #8
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001796:	2303      	movs	r3, #3
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_ADC_MspInit+0x84>)
 80017a6:	f001 fbb5 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40012000 	.word	0x40012000
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020800 	.word	0x40020800

080017c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <HAL_SPI_MspInit+0xe0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d159      	bne.n	8001896 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_SPI_MspInit+0xe4>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <HAL_SPI_MspInit+0xe4>)
 80017ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_SPI_MspInit+0xe4>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <HAL_SPI_MspInit+0xe4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <HAL_SPI_MspInit+0xe4>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_SPI_MspInit+0xe4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800181a:	23e0      	movs	r3, #224	; 0xe0
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	481c      	ldr	r0, [pc, #112]	; (80018a8 <HAL_SPI_MspInit+0xe8>)
 8001836:	f001 fb6d 	bl	8002f14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_SPI_MspInit+0xf0>)
 800183e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001842:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001846:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800187c:	f001 f9ea 	bl	8002c54 <HAL_DMA_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001886:	f7ff ff29 	bl	80016dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_SPI_MspInit+0xec>)
 800188e:	649a      	str	r2, [r3, #72]	; 0x48
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_SPI_MspInit+0xec>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40013000 	.word	0x40013000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	20000240 	.word	0x20000240
 80018b0:	40026458 	.word	0x40026458

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001900:	f000 fdf0 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800190c:	2008      	movs	r0, #8
 800190e:	f001 fccf 	bl	80032b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  tcp_recieve = 1;
 8001912:	4b02      	ldr	r3, [pc, #8]	; (800191c <EXTI3_IRQHandler+0x14>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002a0 	.word	0x200002a0

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <w5500_ini>:

//-----------------------------------------------
//-----------------------------------------------

void w5500_ini(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  uint8_t opcode=0;
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
  //Hard Reset
  HAL_GPIO_WritePin(W5500_RST_GPIO_PORT, W5500_RST_PIN, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	4891      	ldr	r0, [pc, #580]	; (8001b98 <w5500_ini+0x254>)
 8001954:	f001 fc92 	bl	800327c <HAL_GPIO_WritePin>
  HAL_Delay(70);
 8001958:	2046      	movs	r0, #70	; 0x46
 800195a:	f000 fde3 	bl	8002524 <HAL_Delay>
  HAL_GPIO_WritePin(W5500_RST_GPIO_PORT, W5500_RST_PIN, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2104      	movs	r1, #4
 8001962:	488d      	ldr	r0, [pc, #564]	; (8001b98 <w5500_ini+0x254>)
 8001964:	f001 fc8a 	bl	800327c <HAL_GPIO_WritePin>
  HAL_Delay(70);
 8001968:	2046      	movs	r0, #70	; 0x46
 800196a:	f000 fddb 	bl	8002524 <HAL_Delay>
  //Soft Reset
  opcode = (BSB_COMMON<<3)|OM_FDM1;
 800196e:	2301      	movs	r3, #1
 8001970:	71fb      	strb	r3, [r7, #7]
  w5500_writeReg(opcode, MR, 0x80);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fcd1 	bl	8002320 <w5500_writeReg>
  HAL_Delay(100);
 800197e:	2064      	movs	r0, #100	; 0x64
 8001980:	f000 fdd0 	bl	8002524 <HAL_Delay>
  //Configute Net
  w5500_writeReg(opcode, GAR0,ipgate[0]);
 8001984:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <w5500_ini+0x258>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2101      	movs	r1, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fcc7 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, GAR1,ipgate[1]);
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <w5500_ini+0x258>)
 8001994:	785a      	ldrb	r2, [r3, #1]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2102      	movs	r1, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fcc0 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, GAR2,ipgate[2]);
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <w5500_ini+0x258>)
 80019a2:	789a      	ldrb	r2, [r3, #2]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2103      	movs	r1, #3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fcb9 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, GAR3,ipgate[3]);
 80019ae:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <w5500_ini+0x258>)
 80019b0:	78da      	ldrb	r2, [r3, #3]
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2104      	movs	r1, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fcb2 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR0,ipmask[0]);
 80019bc:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <w5500_ini+0x25c>)
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2105      	movs	r1, #5
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcab 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR1,ipmask[1]);
 80019ca:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <w5500_ini+0x25c>)
 80019cc:	785a      	ldrb	r2, [r3, #1]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2106      	movs	r1, #6
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fca4 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR2,ipmask[2]);
 80019d8:	4b71      	ldr	r3, [pc, #452]	; (8001ba0 <w5500_ini+0x25c>)
 80019da:	789a      	ldrb	r2, [r3, #2]
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2107      	movs	r1, #7
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fc9d 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR3,ipmask[3]);
 80019e6:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <w5500_ini+0x25c>)
 80019e8:	78da      	ldrb	r2, [r3, #3]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2108      	movs	r1, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fc96 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR0,macaddr[0]);
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <w5500_ini+0x260>)
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2109      	movs	r1, #9
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fc8f 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR1,macaddr[1]);
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <w5500_ini+0x260>)
 8001a04:	785a      	ldrb	r2, [r3, #1]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	210a      	movs	r1, #10
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fc88 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR2,macaddr[2]);
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <w5500_ini+0x260>)
 8001a12:	789a      	ldrb	r2, [r3, #2]
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	210b      	movs	r1, #11
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fc81 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR3,macaddr[3]);
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <w5500_ini+0x260>)
 8001a20:	78da      	ldrb	r2, [r3, #3]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	210c      	movs	r1, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fc7a 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR4,macaddr[4]);
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <w5500_ini+0x260>)
 8001a2e:	791a      	ldrb	r2, [r3, #4]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	210d      	movs	r1, #13
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fc73 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR5,macaddr[5]);
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <w5500_ini+0x260>)
 8001a3c:	795a      	ldrb	r2, [r3, #5]
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	210e      	movs	r1, #14
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc6c 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR0,ipaddr[0]);
 8001a48:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <w5500_ini+0x264>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	210f      	movs	r1, #15
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fc65 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR1,ipaddr[1]);
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <w5500_ini+0x264>)
 8001a58:	785a      	ldrb	r2, [r3, #1]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fc5e 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR2,ipaddr[2]);
 8001a64:	4b50      	ldr	r3, [pc, #320]	; (8001ba8 <w5500_ini+0x264>)
 8001a66:	789a      	ldrb	r2, [r3, #2]
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2111      	movs	r1, #17
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fc57 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR3,ipaddr[3]);
 8001a72:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <w5500_ini+0x264>)
 8001a74:	78da      	ldrb	r2, [r3, #3]
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2112      	movs	r1, #18
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fc50 	bl	8002320 <w5500_writeReg>
  //Configure Interups
  w5500_writeReg(opcode, INTLEVEL0 ,0x00);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2200      	movs	r2, #0
 8001a84:	2113      	movs	r1, #19
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fc4a 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, INTLEVEL1 ,0x00);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2114      	movs	r1, #20
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fc44 	bl	8002320 <w5500_writeReg>
  w5500_writeReg(opcode, IMR ,0x00);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2116      	movs	r1, #22
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fc3e 	bl	8002320 <w5500_writeReg>

  w5500_writeReg(opcode, SIMR ,0xff);
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	2118      	movs	r1, #24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fc38 	bl	8002320 <w5500_writeReg>

  w5500_writeReg((BSB_S0<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[0]);
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <w5500_ini+0x268>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	211e      	movs	r1, #30
 8001ab8:	2009      	movs	r0, #9
 8001aba:	f000 fc31 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S1<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[1]);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <w5500_ini+0x268>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	211e      	movs	r1, #30
 8001ac6:	2029      	movs	r0, #41	; 0x29
 8001ac8:	f000 fc2a 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S2<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[2]);
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <w5500_ini+0x268>)
 8001ace:	789b      	ldrb	r3, [r3, #2]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	211e      	movs	r1, #30
 8001ad4:	2049      	movs	r0, #73	; 0x49
 8001ad6:	f000 fc23 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S3<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[3]);
 8001ada:	4b34      	ldr	r3, [pc, #208]	; (8001bac <w5500_ini+0x268>)
 8001adc:	78db      	ldrb	r3, [r3, #3]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	211e      	movs	r1, #30
 8001ae2:	2069      	movs	r0, #105	; 0x69
 8001ae4:	f000 fc1c 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S4<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[4]);
 8001ae8:	4b30      	ldr	r3, [pc, #192]	; (8001bac <w5500_ini+0x268>)
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	461a      	mov	r2, r3
 8001aee:	211e      	movs	r1, #30
 8001af0:	2089      	movs	r0, #137	; 0x89
 8001af2:	f000 fc15 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S5<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[5]);
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <w5500_ini+0x268>)
 8001af8:	795b      	ldrb	r3, [r3, #5]
 8001afa:	461a      	mov	r2, r3
 8001afc:	211e      	movs	r1, #30
 8001afe:	20a9      	movs	r0, #169	; 0xa9
 8001b00:	f000 fc0e 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S6<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[6]);
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <w5500_ini+0x268>)
 8001b06:	799b      	ldrb	r3, [r3, #6]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	211e      	movs	r1, #30
 8001b0c:	20c9      	movs	r0, #201	; 0xc9
 8001b0e:	f000 fc07 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S7<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[7]);
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <w5500_ini+0x268>)
 8001b14:	79db      	ldrb	r3, [r3, #7]
 8001b16:	461a      	mov	r2, r3
 8001b18:	211e      	movs	r1, #30
 8001b1a:	20e9      	movs	r0, #233	; 0xe9
 8001b1c:	f000 fc00 	bl	8002320 <w5500_writeReg>

  w5500_writeReg((BSB_S0<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[0]);
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <w5500_ini+0x26c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	211f      	movs	r1, #31
 8001b28:	2009      	movs	r0, #9
 8001b2a:	f000 fbf9 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S1<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[1]);
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <w5500_ini+0x26c>)
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	461a      	mov	r2, r3
 8001b34:	211f      	movs	r1, #31
 8001b36:	2029      	movs	r0, #41	; 0x29
 8001b38:	f000 fbf2 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S2<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[2]);
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <w5500_ini+0x26c>)
 8001b3e:	789b      	ldrb	r3, [r3, #2]
 8001b40:	461a      	mov	r2, r3
 8001b42:	211f      	movs	r1, #31
 8001b44:	2049      	movs	r0, #73	; 0x49
 8001b46:	f000 fbeb 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S3<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[3]);
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <w5500_ini+0x26c>)
 8001b4c:	78db      	ldrb	r3, [r3, #3]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	211f      	movs	r1, #31
 8001b52:	2069      	movs	r0, #105	; 0x69
 8001b54:	f000 fbe4 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S4<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[4]);
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <w5500_ini+0x26c>)
 8001b5a:	791b      	ldrb	r3, [r3, #4]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	211f      	movs	r1, #31
 8001b60:	2089      	movs	r0, #137	; 0x89
 8001b62:	f000 fbdd 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S5<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[5]);
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <w5500_ini+0x26c>)
 8001b68:	795b      	ldrb	r3, [r3, #5]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	211f      	movs	r1, #31
 8001b6e:	20a9      	movs	r0, #169	; 0xa9
 8001b70:	f000 fbd6 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S6<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[6]);
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <w5500_ini+0x26c>)
 8001b76:	799b      	ldrb	r3, [r3, #6]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	211f      	movs	r1, #31
 8001b7c:	20c9      	movs	r0, #201	; 0xc9
 8001b7e:	f000 fbcf 	bl	8002320 <w5500_writeReg>
  w5500_writeReg((BSB_S7<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[7]);
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <w5500_ini+0x26c>)
 8001b84:	79db      	ldrb	r3, [r3, #7]
 8001b86:	461a      	mov	r2, r3
 8001b88:	211f      	movs	r1, #31
 8001b8a:	20e9      	movs	r0, #233	; 0xe9
 8001b8c:	f000 fbc8 	bl	8002320 <w5500_writeReg>


}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	2000001c 	.word	0x2000001c
 8001ba4:	2000004c 	.word	0x2000004c
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	20000028 	.word	0x20000028
 8001bb0:	20000030 	.word	0x20000030

08001bb4 <w5500_startUDP>:
//-----------------------------------------------

void w5500_startUDP(uint8_t sock_num)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
	  uint8_t opcode=0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
	  opcode = BSB_S0+sock_num*4;
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
	  opcode = (opcode<<3)|OM_FDM1;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	73fb      	strb	r3, [r7, #15]

	  w5500_writeReg(opcode, Sn_MR, Mode_UDP);
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fb9d 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DIPR0,ipaddr_dest[0]);
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <w5500_startUDP+0xd4>)
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	210c      	movs	r1, #12
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fb96 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR1,ipaddr_dest[1]);
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <w5500_startUDP+0xd4>)
 8001bf6:	785a      	ldrb	r2, [r3, #1]
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	210d      	movs	r1, #13
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fb8f 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR2,ipaddr_dest[2]);
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <w5500_startUDP+0xd4>)
 8001c04:	789a      	ldrb	r2, [r3, #2]
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	210e      	movs	r1, #14
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fb88 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR3,ipaddr_dest[3]);
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <w5500_startUDP+0xd4>)
 8001c12:	78da      	ldrb	r2, [r3, #3]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	210f      	movs	r1, #15
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fb81 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_PORT0,local_port>>8);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <w5500_startUDP+0xd8>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fb77 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_PORT1,local_port);
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <w5500_startUDP+0xd8>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fb6f 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DPORT0,local_port>>8);
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <w5500_startUDP+0xd8>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2110      	movs	r1, #16
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fb65 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DPORT1,local_port);
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <w5500_startUDP+0xd8>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2111      	movs	r1, #17
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fb5d 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IMR,0x00);
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fb57 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2201      	movs	r2, #1
 8001c76:	2101      	movs	r1, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fb51 	bl	8002320 <w5500_writeReg>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000024 	.word	0x20000024
 8001c8c:	20000020 	.word	0x20000020

08001c90 <TCP_Recieve>:

void TCP_Recieve()
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0c2      	sub	sp, #264	; 0x108
 8001c94:	af00      	add	r7, sp, #0
	uint8_t buffer_TCP[256];
	uint8_t sock_num = tcp_Socket;
 8001c96:	4bce      	ldr	r3, [pc, #824]	; (8001fd0 <TCP_Recieve+0x340>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  uint8_t opcode=0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = BSB_S0+sock_num*4;
 8001ca4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = (opcode<<3)|OM_FDM1;
 8001cb2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	uint8_t R0 = w5500_readReg(opcode,Sn_RX_RSR0);
 8001cc4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001cc8:	2126      	movs	r1, #38	; 0x26
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fb5a 	bl	8002384 <w5500_readReg>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	uint8_t R1 = w5500_readReg(opcode,Sn_RX_RSR1);
 8001cd6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001cda:	2127      	movs	r1, #39	; 0x27
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fb51 	bl	8002384 <w5500_readReg>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint16_t len = (R0<<8)|(R1);
 8001ce8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102

	R0 = w5500_readReg(opcode,Sn_RX_RD0);
 8001cfe:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d02:	2128      	movs	r1, #40	; 0x28
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fb3d 	bl	8002384 <w5500_readReg>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	R1 = w5500_readReg(opcode,Sn_RX_RD1);
 8001d10:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d14:	2129      	movs	r1, #41	; 0x29
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fb34 	bl	8002384 <w5500_readReg>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint16_t addr = (R0<<8)|(R1);
 8001d22:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

	opcode = BSB_S0_RX+sock_num*4;
 8001d38:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3303      	adds	r3, #3
 8001d42:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	opcode = (opcode<<3)|OM_FDM0;
 8001d46:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	w5500_read_Buff(opcode,addr,buffer_TCP,len);
 8001d50:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001d54:	463a      	mov	r2, r7
 8001d56:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8001d5a:	f897 0106 	ldrb.w	r0, [r7, #262]	; 0x106
 8001d5e:	f000 faa5 	bl	80022ac <w5500_read_Buff>

	OR_Clock_period = buffer_TCP[5];
 8001d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d6a:	795b      	ldrb	r3, [r3, #5]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b99      	ldr	r3, [pc, #612]	; (8001fd4 <TCP_Recieve+0x344>)
 8001d70:	601a      	str	r2, [r3, #0]

	mS_To_Wait = buffer_TCP[8] + 256 * buffer_TCP[7] + 256*256*buffer_TCP[6];
 8001d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d7a:	7a1b      	ldrb	r3, [r3, #8]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d86:	79db      	ldrb	r3, [r3, #7]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	441a      	add	r2, r3
 8001d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d94:	799b      	ldrb	r3, [r3, #6]
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	4413      	add	r3, r2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <TCP_Recieve+0x348>)
 8001d9e:	601a      	str	r2, [r3, #0]
    CCD_Mode = buffer_TCP[9];
 8001da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001da8:	7a5a      	ldrb	r2, [r3, #9]
 8001daa:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <TCP_Recieve+0x34c>)
 8001dac:	701a      	strb	r2, [r3, #0]
    CCD_Brust_N = buffer_TCP[11] + 256 * buffer_TCP[10];
 8001dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001db6:	7adb      	ldrb	r3, [r3, #11]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dc2:	7a9b      	ldrb	r3, [r3, #10]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <TCP_Recieve+0x350>)
 8001dcc:	601a      	str	r2, [r3, #0]
    CCD_Brust_Delay = buffer_TCP[14] + 256 * buffer_TCP[13] + 256 * 256 * buffer_TCP[12];
 8001dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dd6:	7b9b      	ldrb	r3, [r3, #14]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001de2:	7b5b      	ldrb	r3, [r3, #13]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	441a      	add	r2, r3
 8001de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	4413      	add	r3, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <TCP_Recieve+0x354>)
 8001dfa:	601a      	str	r2, [r3, #0]

    buffer_TCP[0] = 3;
 8001dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e04:	2203      	movs	r2, #3
 8001e06:	701a      	strb	r2, [r3, #0]
    buffer_TCP[1] = 14;
 8001e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e10:	220e      	movs	r2, #14
 8001e12:	705a      	strb	r2, [r3, #1]
    buffer_TCP[2] = 15;
 8001e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	709a      	strb	r2, [r3, #2]
    buffer_TCP[3] = 92;
 8001e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e28:	225c      	movs	r2, #92	; 0x5c
 8001e2a:	70da      	strb	r2, [r3, #3]
    buffer_TCP[4] = 65;
 8001e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e34:	2241      	movs	r2, #65	; 0x41
 8001e36:	711a      	strb	r2, [r3, #4]
    buffer_TCP[5] = (uint8_t)(OR_Clock_period & 0xFF);
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <TCP_Recieve+0x344>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e46:	715a      	strb	r2, [r3, #5]
    buffer_TCP[6] = (uint8_t)((mS_To_Wait & 0xFF0000) >> 16);
 8001e48:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <TCP_Recieve+0x348>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e58:	719a      	strb	r2, [r3, #6]
    buffer_TCP[7] = (uint8_t)((mS_To_Wait & 0x00FF00) >> 8);
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <TCP_Recieve+0x348>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e6a:	71da      	strb	r2, [r3, #7]
    buffer_TCP[8] = (uint8_t)(mS_To_Wait & 0x0000FF);
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <TCP_Recieve+0x348>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e7a:	721a      	strb	r2, [r3, #8]
    buffer_TCP[9] = (uint8_t)(CCD_Mode & 0xFF);
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <TCP_Recieve+0x34c>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e88:	725a      	strb	r2, [r3, #9]
    buffer_TCP[10] = (uint8_t)((CCD_Brust_N & 0x00FF00) >> 8);
 8001e8a:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <TCP_Recieve+0x350>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e9a:	729a      	strb	r2, [r3, #10]
    buffer_TCP[11] = (uint8_t)(CCD_Brust_N & 0x0000FF);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <TCP_Recieve+0x350>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001eaa:	72da      	strb	r2, [r3, #11]
    buffer_TCP[12] = (uint8_t)((CCD_Brust_Delay & 0xFF0000) >> 16);
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <TCP_Recieve+0x354>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ebc:	731a      	strb	r2, [r3, #12]
    buffer_TCP[13] = (uint8_t)((CCD_Brust_Delay & 0x00FF00) >> 8);
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <TCP_Recieve+0x354>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ece:	735a      	strb	r2, [r3, #13]
    buffer_TCP[14] = (uint8_t)(CCD_Brust_Delay & 0x0000FF);
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <TCP_Recieve+0x354>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ede:	739a      	strb	r2, [r3, #14]

    buffer_TCP[15] = (uint8_t)((number_Of_Lines & 0x00FF00) >> 8);
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <TCP_Recieve+0x358>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ef0:	73da      	strb	r2, [r3, #15]
    buffer_TCP[16] = (uint8_t)(number_Of_Lines & 0x0000FF);
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <TCP_Recieve+0x358>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f00:	741a      	strb	r2, [r3, #16]
    buffer_TCP[17] = (uint8_t)((number_Of_Rows & 0x00FF00) >> 8);
 8001f02:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <TCP_Recieve+0x35c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f12:	745a      	strb	r2, [r3, #17]
    buffer_TCP[18] = (uint8_t)(number_Of_Rows & 0x0000FF);
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <TCP_Recieve+0x35c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f22:	749a      	strb	r2, [r3, #18]
    buffer_TCP[19] = (uint8_t)(3 & 0x0000FF);
 8001f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	74da      	strb	r2, [r3, #19]

    buffer_TCP[20] = (uint8_t)CCD_Name[0];
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f3c:	751a      	strb	r2, [r3, #20]
    buffer_TCP[21] = (uint8_t)CCD_Name[1];
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f40:	785a      	ldrb	r2, [r3, #1]
 8001f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f4a:	755a      	strb	r2, [r3, #21]
    buffer_TCP[22] = (uint8_t)CCD_Name[2];
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f4e:	789a      	ldrb	r2, [r3, #2]
 8001f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f58:	759a      	strb	r2, [r3, #22]
    buffer_TCP[23] = (uint8_t)CCD_Name[3];
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f5c:	78da      	ldrb	r2, [r3, #3]
 8001f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f66:	75da      	strb	r2, [r3, #23]
    buffer_TCP[24] = (uint8_t)CCD_Name[4];
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f6a:	791a      	ldrb	r2, [r3, #4]
 8001f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f74:	761a      	strb	r2, [r3, #24]
    buffer_TCP[25] = (uint8_t)CCD_Name[5];
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f78:	795a      	ldrb	r2, [r3, #5]
 8001f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f82:	765a      	strb	r2, [r3, #25]
    buffer_TCP[26] = (uint8_t)CCD_Name[6];
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f86:	799a      	ldrb	r2, [r3, #6]
 8001f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f90:	769a      	strb	r2, [r3, #26]
    buffer_TCP[27] = (uint8_t)CCD_Name[7];
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <TCP_Recieve+0x360>)
 8001f94:	79da      	ldrb	r2, [r3, #7]
 8001f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f9e:	76da      	strb	r2, [r3, #27]
    buffer_TCP[28] = (uint8_t)CCD_Name[8];
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <TCP_Recieve+0x360>)
 8001fa2:	7a1a      	ldrb	r2, [r3, #8]
 8001fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fac:	771a      	strb	r2, [r3, #28]
    buffer_TCP[29] = (uint8_t)CCD_Name[9];
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <TCP_Recieve+0x360>)
 8001fb0:	7a5a      	ldrb	r2, [r3, #9]
 8001fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fba:	775a      	strb	r2, [r3, #29]
    buffer_TCP[30] = (uint8_t)CCD_Name[10];
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <TCP_Recieve+0x360>)
 8001fbe:	7a9a      	ldrb	r2, [r3, #10]
 8001fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc8:	779a      	strb	r2, [r3, #30]
    buffer_TCP[31] = (uint8_t)CCD_Name[11];
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <TCP_Recieve+0x360>)
 8001fcc:	7ada      	ldrb	r2, [r3, #11]
 8001fce:	e011      	b.n	8001ff4 <TCP_Recieve+0x364>
 8001fd0:	20000045 	.word	0x20000045
 8001fd4:	20000088 	.word	0x20000088
 8001fd8:	2000008c 	.word	0x2000008c
 8001fdc:	20000090 	.word	0x20000090
 8001fe0:	20000094 	.word	0x20000094
 8001fe4:	20000098 	.word	0x20000098
 8001fe8:	20000080 	.word	0x20000080
 8001fec:	20000084 	.word	0x20000084
 8001ff0:	20000038 	.word	0x20000038
 8001ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ffc:	77da      	strb	r2, [r3, #31]

    w5500_write_Tx_Buff(sock_num, buffer_TCP, 32);
 8001ffe:	4639      	mov	r1, r7
 8002000:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002004:	2220      	movs	r2, #32
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f8b6 	bl	8002178 <w5500_write_Tx_Buff>

	  opcode = BSB_S0+sock_num*4;
 800200c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = (opcode<<3)|OM_FDM1;
 800201a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	b25b      	sxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b25b      	sxtb	r3, r3
 8002028:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  w5500_writeReg(opcode, Sn_CR, CR_SEND);
 800202c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002030:	2220      	movs	r2, #32
 8002032:	2101      	movs	r1, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f000 f973 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IR, 0x04);
 800203a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800203e:	2204      	movs	r2, #4
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f96c 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_DISCON);
 8002048:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800204c:	2208      	movs	r2, #8
 800204e:	2101      	movs	r1, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f965 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_CLOSE);
 8002056:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800205a:	2210      	movs	r2, #16
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f95e 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8002064:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002068:	2201      	movs	r2, #1
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f957 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_LISTEN);
 8002072:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002076:	2202      	movs	r2, #2
 8002078:	2101      	movs	r1, #1
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f950 	bl	8002320 <w5500_writeReg>

}
 8002080:	bf00      	nop
 8002082:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop

0800208c <w5500_startTCP>:
void w5500_startTCP()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	  uint8_t sock_num = tcp_Socket;
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <w5500_startTCP+0xe0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
	  uint8_t opcode=0;
 8002098:	2300      	movs	r3, #0
 800209a:	71bb      	strb	r3, [r7, #6]
	  opcode = BSB_S0+sock_num*4;
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	71bb      	strb	r3, [r7, #6]
	  opcode = (opcode<<3)|OM_FDM1;
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	71bb      	strb	r3, [r7, #6]

	  w5500_writeReg(opcode, Sn_MR, Mode_TCP);
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	2201      	movs	r2, #1
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f930 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DIPR0,ipaddr_dest[0]);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <w5500_startTCP+0xe4>)
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	210c      	movs	r1, #12
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f929 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR1,ipaddr_dest[1]);
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <w5500_startTCP+0xe4>)
 80020d0:	785a      	ldrb	r2, [r3, #1]
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	210d      	movs	r1, #13
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f922 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR2,ipaddr_dest[2]);
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <w5500_startTCP+0xe4>)
 80020de:	789a      	ldrb	r2, [r3, #2]
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	210e      	movs	r1, #14
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f91b 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR3,ipaddr_dest[3]);
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <w5500_startTCP+0xe4>)
 80020ec:	78da      	ldrb	r2, [r3, #3]
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	210f      	movs	r1, #15
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f914 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_PORT0,tcp_port>>8);
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <w5500_startTCP+0xe8>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b2da      	uxtb	r2, r3
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	2104      	movs	r1, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f90a 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_PORT1,tcp_port);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <w5500_startTCP+0xe8>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	79bb      	ldrb	r3, [r7, #6]
 8002114:	2105      	movs	r1, #5
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f902 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DPORT0,tcp_port>>8);
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <w5500_startTCP+0xe8>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	b29b      	uxth	r3, r3
 8002124:	b2da      	uxtb	r2, r3
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	2110      	movs	r1, #16
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f8f8 	bl	8002320 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DPORT1,tcp_port);
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <w5500_startTCP+0xe8>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	2111      	movs	r1, #17
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f8f0 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IMR,0x04);
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	2204      	movs	r2, #4
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f8ea 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2201      	movs	r2, #1
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8e4 	bl	8002320 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_LISTEN);
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	2202      	movs	r2, #2
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f8de 	bl	8002320 <w5500_writeReg>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000045 	.word	0x20000045
 8002170:	20000024 	.word	0x20000024
 8002174:	20000022 	.word	0x20000022

08002178 <w5500_write_Tx_Buff>:
	w5500_writeReg(opcode,Sn_CR, CR_SEND);
}

//-----------------------------------------------
void w5500_write_Tx_Buff (uint8_t sock_num, uint8_t *buff, uint16_t len)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	4613      	mov	r3, r2
 8002186:	80bb      	strh	r3, [r7, #4]
	uint8_t opcode=0;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
	opcode = BSB_S0+sock_num*4;
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3301      	adds	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM1;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	b25b      	sxtb	r3, r3
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	73fb      	strb	r3, [r7, #15]

	uint8_t txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2124      	movs	r1, #36	; 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f8eb 	bl	8002384 <w5500_readReg>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73bb      	strb	r3, [r7, #14]
	uint8_t txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2125      	movs	r1, #37	; 0x25
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f8e4 	bl	8002384 <w5500_readReg>
 80021bc:	4603      	mov	r3, r0
 80021be:	737b      	strb	r3, [r7, #13]
	uint16_t addr = (txWr0<<8)|(txWr1);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	817b      	strh	r3, [r7, #10]

	opcode = BSB_S0_TX+sock_num*4;
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3302      	adds	r3, #2
 80021d8:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM0;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	73fb      	strb	r3, [r7, #15]

	w5500_write_Buff(opcode,addr,buff,len);
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	8979      	ldrh	r1, [r7, #10]
 80021e4:	7bf8      	ldrb	r0, [r7, #15]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	f000 f826 	bl	8002238 <w5500_write_Buff>

	addr += len;
 80021ec:	897a      	ldrh	r2, [r7, #10]
 80021ee:	88bb      	ldrh	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	817b      	strh	r3, [r7, #10]

	opcode = BSB_S0+sock_num*4;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM1;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	b25b      	sxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b25b      	sxtb	r3, r3
 800220a:	73fb      	strb	r3, [r7, #15]

	txWr0 = (addr&0xFF00)>>8;
 800220c:	897b      	ldrh	r3, [r7, #10]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	73bb      	strb	r3, [r7, #14]
	txWr1 = (addr&0x00FF);
 8002214:	897b      	ldrh	r3, [r7, #10]
 8002216:	737b      	strb	r3, [r7, #13]
	w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8002218:	7bba      	ldrb	r2, [r7, #14]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2124      	movs	r1, #36	; 0x24
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f87e 	bl	8002320 <w5500_writeReg>
	w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8002224:	7b7a      	ldrb	r2, [r7, #13]
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2125      	movs	r1, #37	; 0x25
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f878 	bl	8002320 <w5500_writeReg>
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <w5500_write_Buff>:
//-----------------------------------------------
void w5500_write_Buff (uint8_t op, uint16_t addres, uint8_t* data, uint16_t len)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60ba      	str	r2, [r7, #8]
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	460b      	mov	r3, r1
 8002248:	81bb      	strh	r3, [r7, #12]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
	  uint8_t buf[3] = {addres >> 8, addres, op|(RWB_WRITE<<2)};
 800224e:	89bb      	ldrh	r3, [r7, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	b29b      	uxth	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	753b      	strb	r3, [r7, #20]
 8002258:	89bb      	ldrh	r3, [r7, #12]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	757b      	strb	r3, [r7, #21]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	b2db      	uxtb	r3, r3
 8002266:	75bb      	strb	r3, [r7, #22]

	  W5500_SS_SELECT();
 8002268:	2200      	movs	r2, #0
 800226a:	2110      	movs	r1, #16
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <w5500_write_Buff+0x6c>)
 800226e:	f001 f805 	bl	800327c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);
 8002272:	f107 0114 	add.w	r1, r7, #20
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	2203      	movs	r2, #3
 800227c:	480a      	ldr	r0, [pc, #40]	; (80022a8 <w5500_write_Buff+0x70>)
 800227e:	f001 fd28 	bl	8003cd2 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, data, len, 0xFFFFFFFF);
 8002282:	88fa      	ldrh	r2, [r7, #6]
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <w5500_write_Buff+0x70>)
 800228c:	f001 fd21 	bl	8003cd2 <HAL_SPI_Transmit>
	  W5500_SS_DESELECT();
 8002290:	2201      	movs	r2, #1
 8002292:	2110      	movs	r1, #16
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <w5500_write_Buff+0x6c>)
 8002296:	f000 fff1 	bl	800327c <HAL_GPIO_WritePin>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40020000 	.word	0x40020000
 80022a8:	200001e8 	.word	0x200001e8

080022ac <w5500_read_Buff>:
//-----------------------------------------------
void w5500_read_Buff (uint8_t op, uint16_t addres, uint8_t* data, uint16_t len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60ba      	str	r2, [r7, #8]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	460b      	mov	r3, r1
 80022bc:	81bb      	strh	r3, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
	  uint8_t buf[] = {addres >> 8, addres, op|(RWB_READ<<2)};
 80022c2:	89bb      	ldrh	r3, [r7, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	753b      	strb	r3, [r7, #20]
 80022cc:	89bb      	ldrh	r3, [r7, #12]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	757b      	strb	r3, [r7, #21]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	75bb      	strb	r3, [r7, #22]
	  uint8_t wbuf[4];

	  W5500_SS_SELECT();
 80022d6:	2200      	movs	r2, #0
 80022d8:	2110      	movs	r1, #16
 80022da:	480f      	ldr	r0, [pc, #60]	; (8002318 <w5500_read_Buff+0x6c>)
 80022dc:	f000 ffce 	bl	800327c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);
 80022e0:	f107 0114 	add.w	r1, r7, #20
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	2203      	movs	r2, #3
 80022ea:	480c      	ldr	r0, [pc, #48]	; (800231c <w5500_read_Buff+0x70>)
 80022ec:	f001 fcf1 	bl	8003cd2 <HAL_SPI_Transmit>
	  HAL_SPI_TransmitReceive(&hspi1, wbuf, data, len, 0xFFFFFFFF);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	f107 0110 	add.w	r1, r7, #16
 80022f6:	f04f 32ff 	mov.w	r2, #4294967295
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <w5500_read_Buff+0x70>)
 8002300:	f001 fe23 	bl	8003f4a <HAL_SPI_TransmitReceive>
	  W5500_SS_DESELECT();
 8002304:	2201      	movs	r2, #1
 8002306:	2110      	movs	r1, #16
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <w5500_read_Buff+0x6c>)
 800230a:	f000 ffb7 	bl	800327c <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40020000 	.word	0x40020000
 800231c:	200001e8 	.word	0x200001e8

08002320 <w5500_writeReg>:
//-----------------------------------------------

void w5500_writeReg(uint8_t op, uint16_t addres, uint8_t data)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	460b      	mov	r3, r1
 800232c:	80bb      	strh	r3, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[] = {addres >> 8, addres, op|(RWB_WRITE<<2), data};
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	733b      	strb	r3, [r7, #12]
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	737b      	strb	r3, [r7, #13]
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	b2db      	uxtb	r3, r3
 800234a:	73bb      	strb	r3, [r7, #14]
 800234c:	79bb      	ldrb	r3, [r7, #6]
 800234e:	73fb      	strb	r3, [r7, #15]
  W5500_SS_SELECT();
 8002350:	2200      	movs	r2, #0
 8002352:	2110      	movs	r1, #16
 8002354:	4809      	ldr	r0, [pc, #36]	; (800237c <w5500_writeReg+0x5c>)
 8002356:	f000 ff91 	bl	800327c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buf, 4, 0xFFFFFFFF);
 800235a:	f107 010c 	add.w	r1, r7, #12
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	2204      	movs	r2, #4
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <w5500_writeReg+0x60>)
 8002366:	f001 fcb4 	bl	8003cd2 <HAL_SPI_Transmit>
  W5500_SS_DESELECT();
 800236a:	2201      	movs	r2, #1
 800236c:	2110      	movs	r1, #16
 800236e:	4803      	ldr	r0, [pc, #12]	; (800237c <w5500_writeReg+0x5c>)
 8002370:	f000 ff84 	bl	800327c <HAL_GPIO_WritePin>
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40020000 	.word	0x40020000
 8002380:	200001e8 	.word	0x200001e8

08002384 <w5500_readReg>:

//-----------------------------------------------
uint8_t w5500_readReg(uint8_t op, uint16_t addres)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	4603      	mov	r3, r0
 800238c:	460a      	mov	r2, r1
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	4613      	mov	r3, r2
 8002392:	80bb      	strh	r3, [r7, #4]
  uint8_t data;
  uint8_t wbuf[] = {addres >> 8, addres, op, 0x0};
 8002394:	88bb      	ldrh	r3, [r7, #4]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	743b      	strb	r3, [r7, #16]
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	747b      	strb	r3, [r7, #17]
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	74bb      	strb	r3, [r7, #18]
 80023a8:	2300      	movs	r3, #0
 80023aa:	74fb      	strb	r3, [r7, #19]
  uint8_t rbuf[4];
  W5500_SS_SELECT();
 80023ac:	2200      	movs	r2, #0
 80023ae:	2110      	movs	r1, #16
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <w5500_readReg+0x60>)
 80023b2:	f000 ff63 	bl	800327c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, wbuf, rbuf, 4, 0xFFFFFFFF);
 80023b6:	f107 020c 	add.w	r2, r7, #12
 80023ba:	f107 0110 	add.w	r1, r7, #16
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2304      	movs	r3, #4
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <w5500_readReg+0x64>)
 80023c8:	f001 fdbf 	bl	8003f4a <HAL_SPI_TransmitReceive>
  W5500_SS_DESELECT();
 80023cc:	2201      	movs	r2, #1
 80023ce:	2110      	movs	r1, #16
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <w5500_readReg+0x60>)
 80023d2:	f000 ff53 	bl	800327c <HAL_GPIO_WritePin>
  data = rbuf[3];
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	75fb      	strb	r3, [r7, #23]
  return data;
 80023da:	7dfb      	ldrb	r3, [r7, #23]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40020000 	.word	0x40020000
 80023e8:	200001e8 	.word	0x200001e8

080023ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f2:	490e      	ldr	r1, [pc, #56]	; (800242c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002408:	4c0b      	ldr	r4, [pc, #44]	; (8002438 <LoopFillZerobss+0x26>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002416:	f7ff fa83 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f002 f803 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241e:	f7fe ff03 	bl	8001228 <main>
  bx  lr    
 8002422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002430:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 8002434:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002438:	200002a8 	.word	0x200002a8

0800243c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_Init+0x40>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_Init+0x40>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x40>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 fbb1 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	2000      	movs	r0, #0
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff f938 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fbc9 	bl	8002c3a <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f000 fb91 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000048 	.word	0x20000048
 80024dc:	20000058 	.word	0x20000058
 80024e0:	20000054 	.word	0x20000054

080024e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x20>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x24>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_IncTick+0x24>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000058 	.word	0x20000058
 8002508:	200002a4 	.word	0x200002a4

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200002a4 	.word	0x200002a4

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff ffee 	bl	800250c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_Delay+0x44>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffde 	bl	800250c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000058 	.word	0x20000058

0800256c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e033      	b.n	80025ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff f8d4 	bl	8001738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025b2:	f023 0302 	bic.w	r3, r3, #2
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f93a 	bl	8002838 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
 80025da:	e001      	b.n	80025e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x1c>
 800260c:	2302      	movs	r3, #2
 800260e:	e105      	b.n	800281c <HAL_ADC_ConfigChannel+0x228>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b09      	cmp	r3, #9
 800261e:	d925      	bls.n	800266c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68d9      	ldr	r1, [r3, #12]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	3b1e      	subs	r3, #30
 8002636:	2207      	movs	r2, #7
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68d9      	ldr	r1, [r3, #12]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	4603      	mov	r3, r0
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4403      	add	r3, r0
 800265e:	3b1e      	subs	r3, #30
 8002660:	409a      	lsls	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	e022      	b.n	80026b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6919      	ldr	r1, [r3, #16]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	2207      	movs	r2, #7
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	400a      	ands	r2, r1
 800268e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4403      	add	r3, r0
 80026a8:	409a      	lsls	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d824      	bhi.n	8002704 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b05      	subs	r3, #5
 80026cc:	221f      	movs	r2, #31
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b05      	subs	r3, #5
 80026f6:	fa00 f203 	lsl.w	r2, r0, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
 8002702:	e04c      	b.n	800279e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d824      	bhi.n	8002756 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3b23      	subs	r3, #35	; 0x23
 800271e:	221f      	movs	r2, #31
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43da      	mvns	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	400a      	ands	r2, r1
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b23      	subs	r3, #35	; 0x23
 8002748:	fa00 f203 	lsl.w	r2, r0, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
 8002754:	e023      	b.n	800279e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3b41      	subs	r3, #65	; 0x41
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	400a      	ands	r2, r1
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b41      	subs	r3, #65	; 0x41
 8002792:	fa00 f203 	lsl.w	r2, r0, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_ADC_ConfigChannel+0x234>)
 80027a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_ADC_ConfigChannel+0x238>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d109      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x1cc>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b12      	cmp	r3, #18
 80027b2:	d105      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_ADC_ConfigChannel+0x238>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d123      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d003      	beq.n	80027da <HAL_ADC_ConfigChannel+0x1e6>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b11      	cmp	r3, #17
 80027d8:	d11b      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d111      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_ADC_ConfigChannel+0x23c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_ADC_ConfigChannel+0x240>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	0c9a      	lsrs	r2, r3, #18
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002804:	e002      	b.n	800280c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3b01      	subs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40012300 	.word	0x40012300
 800282c:	40012000 	.word	0x40012000
 8002830:	20000048 	.word	0x20000048
 8002834:	431bde83 	.word	0x431bde83

08002838 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002840:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <ADC_Init+0x1f0>)
 8002842:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800286c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	021a      	lsls	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <ADC_Init+0x1f4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002900:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e00f      	b.n	8002936 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002934:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0202 	bic.w	r2, r2, #2
 8002944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7e1b      	ldrb	r3, [r3, #24]
 8002950:	005a      	lsls	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002972:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002982:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	3b01      	subs	r3, #1
 8002990:	035a      	lsls	r2, r3, #13
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e007      	b.n	80029ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	051a      	lsls	r2, r3, #20
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ee:	025a      	lsls	r2, r3, #9
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	029a      	lsls	r2, r3, #10
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40012300 	.word	0x40012300
 8002a2c:	0f000001 	.word	0x0f000001

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff fc54 	bl	800250c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e099      	b.n	8002da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c90:	e00f      	b.n	8002cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c92:	f7ff fc3b 	bl	800250c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d908      	bls.n	8002cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e078      	b.n	8002da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e8      	bne.n	8002c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_DMA_Init+0x158>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d107      	bne.n	8002d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4313      	orrs	r3, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f023 0307 	bic.w	r3, r3, #7
 8002d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d117      	bne.n	8002d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f85f 	bl	8002e1c <DMA_CheckFifoParam>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d72:	2301      	movs	r3, #1
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f816 	bl	8002db0 <DMA_CalcBaseAndBitshift>
 8002d84:	4603      	mov	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	223f      	movs	r2, #63	; 0x3f
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	f010803f 	.word	0xf010803f

08002db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3b10      	subs	r3, #16
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <DMA_CalcBaseAndBitshift+0x64>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <DMA_CalcBaseAndBitshift+0x68>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d909      	bls.n	8002df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	1d1a      	adds	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	659a      	str	r2, [r3, #88]	; 0x58
 8002df0:	e007      	b.n	8002e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dfa:	f023 0303 	bic.w	r3, r3, #3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	aaaaaaab 	.word	0xaaaaaaab
 8002e18:	080044a8 	.word	0x080044a8

08002e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11f      	bne.n	8002e76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d856      	bhi.n	8002eea <DMA_CheckFifoParam+0xce>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <DMA_CheckFifoParam+0x28>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e67 	.word	0x08002e67
 8002e4c:	08002e55 	.word	0x08002e55
 8002e50:	08002eeb 	.word	0x08002eeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d046      	beq.n	8002eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e64:	e043      	b.n	8002eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e6e:	d140      	bne.n	8002ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e74:	e03d      	b.n	8002ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7e:	d121      	bne.n	8002ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d837      	bhi.n	8002ef6 <DMA_CheckFifoParam+0xda>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <DMA_CheckFifoParam+0x70>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002ea3 	.word	0x08002ea3
 8002e94:	08002e9d 	.word	0x08002e9d
 8002e98:	08002eb5 	.word	0x08002eb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e030      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d025      	beq.n	8002efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb2:	e022      	b.n	8002efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ebc:	d11f      	bne.n	8002efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ec2:	e01c      	b.n	8002efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d903      	bls.n	8002ed2 <DMA_CheckFifoParam+0xb6>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d003      	beq.n	8002ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ed0:	e018      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed6:	e015      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	e00b      	b.n	8002f02 <DMA_CheckFifoParam+0xe6>
      break;
 8002eea:	bf00      	nop
 8002eec:	e00a      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e008      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e006      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e004      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      break;
 8002efa:	bf00      	nop
 8002efc:	e002      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002efe:	bf00      	nop
 8002f00:	e000      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
    }
  } 
  
  return status; 
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e16b      	b.n	8003208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 815a 	bne.w	8003202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d005      	beq.n	8002f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d017      	beq.n	8003004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d123      	bne.n	8003058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80b4 	beq.w	8003202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b60      	ldr	r3, [pc, #384]	; (8003220 <HAL_GPIO_Init+0x30c>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a5f      	ldr	r2, [pc, #380]	; (8003220 <HAL_GPIO_Init+0x30c>)
 80030a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <HAL_GPIO_Init+0x30c>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b6:	4a5b      	ldr	r2, [pc, #364]	; (8003224 <HAL_GPIO_Init+0x310>)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	3302      	adds	r3, #2
 80030be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_GPIO_Init+0x314>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02b      	beq.n	800313a <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_GPIO_Init+0x318>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a50      	ldr	r2, [pc, #320]	; (8003230 <HAL_GPIO_Init+0x31c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4f      	ldr	r2, [pc, #316]	; (8003234 <HAL_GPIO_Init+0x320>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x21a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4e      	ldr	r2, [pc, #312]	; (8003238 <HAL_GPIO_Init+0x324>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x216>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4d      	ldr	r2, [pc, #308]	; (800323c <HAL_GPIO_Init+0x328>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x212>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4c      	ldr	r2, [pc, #304]	; (8003240 <HAL_GPIO_Init+0x32c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x20e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4b      	ldr	r2, [pc, #300]	; (8003244 <HAL_GPIO_Init+0x330>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x20a>
 800311a:	2307      	movs	r3, #7
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x228>
 800311e:	2308      	movs	r3, #8
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x228>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x228>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x228>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x228>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	; (8003224 <HAL_GPIO_Init+0x310>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_GPIO_Init+0x334>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_GPIO_Init+0x334>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_GPIO_Init+0x334>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <HAL_GPIO_Init+0x334>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_GPIO_Init+0x334>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <HAL_GPIO_Init+0x334>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_GPIO_Init+0x334>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <HAL_GPIO_Init+0x334>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae90 	bls.w	8002f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e001      	b.n	800326e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032c6:	4a05      	ldr	r2, [pc, #20]	; (80032dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f806 	bl	80032e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e267      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d075      	beq.n	8003402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d00c      	beq.n	800333c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b85      	ldr	r3, [pc, #532]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332a:	2b08      	cmp	r3, #8
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b82      	ldr	r3, [pc, #520]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333a:	d10b      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	4b7e      	ldr	r3, [pc, #504]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <HAL_RCC_OscConfig+0x108>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d157      	bne.n	8003400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e242      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x74>
 800335e:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a75      	ldr	r2, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x98>
 8003376:	4b70      	ldr	r3, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6f      	ldr	r2, [pc, #444]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b6d      	ldr	r3, [pc, #436]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6c      	ldr	r2, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 8003390:	4b69      	ldr	r3, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a68      	ldr	r2, [pc, #416]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b66      	ldr	r3, [pc, #408]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7ff f8ac 	bl	800250c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7ff f8a8 	bl	800250c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e207      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xc0>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7ff f898 	bl	800250c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e0:	f7ff f894 	bl	800250c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1f3      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0xe8>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b44      	ldr	r3, [pc, #272]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1c7      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4937      	ldr	r1, [pc, #220]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e03a      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCC_OscConfig+0x244>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7ff f84d 	bl	800250c <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003476:	f7ff f849 	bl	800250c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1a8      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4925      	ldr	r1, [pc, #148]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x244>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7ff f82c 	bl	800250c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b8:	f7ff f828 	bl	800250c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e187      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d036      	beq.n	8003550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_RCC_OscConfig+0x248>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7ff f80c 	bl	800250c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f8:	f7ff f808 	bl	800250c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e167      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_OscConfig+0x240>)
 800350c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x200>
 8003516:	e01b      	b.n	8003550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x248>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fff5 	bl	800250c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	e00e      	b.n	8003544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe fff1 	bl	800250c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d907      	bls.n	8003544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e150      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003538:	40023800 	.word	0x40023800
 800353c:	42470000 	.word	0x42470000
 8003540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ea      	bne.n	8003526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8097 	beq.w	800368c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b81      	ldr	r3, [pc, #516]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b7d      	ldr	r3, [pc, #500]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b77      	ldr	r3, [pc, #476]	; (800376c <HAL_RCC_OscConfig+0x474>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b74      	ldr	r3, [pc, #464]	; (800376c <HAL_RCC_OscConfig+0x474>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a73      	ldr	r2, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x474>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe ffb1 	bl	800250c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe ffad 	bl	800250c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e10c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_OscConfig+0x474>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2ea>
 80035d4:	4b64      	ldr	r3, [pc, #400]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a63      	ldr	r2, [pc, #396]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x30c>
 80035ea:	4b5f      	ldr	r3, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a5b      	ldr	r2, [pc, #364]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 8003604:	4b58      	ldr	r3, [pc, #352]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a57      	ldr	r2, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe ff72 	bl	800250c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe ff6e 	bl	800250c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0cb      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b49      	ldr	r3, [pc, #292]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCC_OscConfig+0x334>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fe ff5c 	bl	800250c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe ff58 	bl	800250c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0b5      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ee      	bne.n	8003658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a38      	ldr	r2, [pc, #224]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a1 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d05c      	beq.n	800375c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d141      	bne.n	800372e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe ff2c 	bl	800250c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe ff28 	bl	800250c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e087      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	491b      	ldr	r1, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe ff01 	bl	800250c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe fefd 	bl	800250c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e05c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x416>
 800372c:	e054      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_OscConfig+0x478>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe feea 	bl	800250c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fee6 	bl	800250c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e045      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_OscConfig+0x470>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x444>
 800375a:	e03d      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e038      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003768:	40023800 	.word	0x40023800
 800376c:	40007000 	.word	0x40007000
 8003770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_OscConfig+0x4ec>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d028      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d121      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d11a      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d111      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0cc      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d90c      	bls.n	8003824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003854:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800385e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003860:	4b50      	ldr	r3, [pc, #320]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	494d      	ldr	r1, [pc, #308]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d044      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d119      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e067      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4934      	ldr	r1, [pc, #208]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fe fe18 	bl	800250c <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fe14 	bl	800250c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e04f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d20c      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b22      	ldr	r3, [pc, #136]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4916      	ldr	r1, [pc, #88]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490e      	ldr	r1, [pc, #56]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f821 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fd78 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08004498 	.word	0x08004498
 80039ac:	20000048 	.word	0x20000048
 80039b0:	20000054 	.word	0x20000054

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b094      	sub	sp, #80	; 0x50
 80039ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	647b      	str	r3, [r7, #68]	; 0x44
 80039c0:	2300      	movs	r3, #0
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c4:	2300      	movs	r3, #0
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d00d      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039d8:	2b08      	cmp	r3, #8
 80039da:	f200 80e1 	bhi.w	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x3a>
 80039e6:	e0db      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b73      	ldr	r3, [pc, #460]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039ec:	e0db      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b73      	ldr	r3, [pc, #460]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2200      	movs	r2, #0
 8003a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
 8003a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a38:	0150      	lsls	r0, r2, #5
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4621      	mov	r1, r4
 8003a40:	1a51      	subs	r1, r2, r1
 8003a42:	6139      	str	r1, [r7, #16]
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	018b      	lsls	r3, r1, #6
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a62:	4651      	mov	r1, sl
 8003a64:	018a      	lsls	r2, r1, #6
 8003a66:	4651      	mov	r1, sl
 8003a68:	ebb2 0801 	subs.w	r8, r2, r1
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a86:	4690      	mov	r8, r2
 8003a88:	4699      	mov	r9, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	eb18 0303 	adds.w	r3, r8, r3
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	462b      	mov	r3, r5
 8003a94:	eb49 0303 	adc.w	r3, r9, r3
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	024b      	lsls	r3, r1, #9
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	024a      	lsls	r2, r1, #9
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ac4:	f7fc fb80 	bl	80001c8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	e058      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	4611      	mov	r1, r2
 8003ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	f04f 0000 	mov.w	r0, #0
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	0159      	lsls	r1, r3, #5
 8003afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afe:	0150      	lsls	r0, r2, #5
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4641      	mov	r1, r8
 8003b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b24:	ebb2 040a 	subs.w	r4, r2, sl
 8003b28:	eb63 050b 	sbc.w	r5, r3, fp
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	00eb      	lsls	r3, r5, #3
 8003b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3a:	00e2      	lsls	r2, r4, #3
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	461d      	mov	r5, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	18e3      	adds	r3, r4, r3
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	464b      	mov	r3, r9
 8003b48:	eb45 0303 	adc.w	r3, r5, r3
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	61fa      	str	r2, [r7, #28]
 8003b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b78:	f7fc fb26 	bl	80001c8 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3750      	adds	r7, #80	; 0x50
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	007a1200 	.word	0x007a1200

08003bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07b      	b.n	8003cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be2:	d009      	beq.n	8003bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
 8003bea:	e005      	b.n	8003bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fdd4 	bl	80017c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	ea42 0103 	orr.w	r1, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0104 	and.w	r1, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	f003 0210 	and.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_SPI_Transmit+0x22>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e126      	b.n	8003f42 <HAL_SPI_Transmit+0x270>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfc:	f7fe fc06 	bl	800250c <HAL_GetTick>
 8003d00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d002      	beq.n	8003d18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d16:	e10b      	b.n	8003f30 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Transmit+0x52>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d28:	e102      	b.n	8003f30 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d70:	d10f      	bne.n	8003d92 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d007      	beq.n	8003db0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db8:	d14b      	bne.n	8003e52 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_Transmit+0xf6>
 8003dc2:	8afb      	ldrh	r3, [r7, #22]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d13e      	bne.n	8003e46 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dec:	e02b      	b.n	8003e46 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d112      	bne.n	8003e22 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	881a      	ldrh	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	1c9a      	adds	r2, r3, #2
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e20:	e011      	b.n	8003e46 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e22:	f7fe fb73 	bl	800250c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d803      	bhi.n	8003e3a <HAL_SPI_Transmit+0x168>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d102      	bne.n	8003e40 <HAL_SPI_Transmit+0x16e>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e44:	e074      	b.n	8003f30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ce      	bne.n	8003dee <HAL_SPI_Transmit+0x11c>
 8003e50:	e04c      	b.n	8003eec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x18e>
 8003e5a:	8afb      	ldrh	r3, [r7, #22]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d140      	bne.n	8003ee2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e86:	e02c      	b.n	8003ee2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d113      	bne.n	8003ebe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	7812      	ldrb	r2, [r2, #0]
 8003ea2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ebc:	e011      	b.n	8003ee2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ebe:	f7fe fb25 	bl	800250c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d803      	bhi.n	8003ed6 <HAL_SPI_Transmit+0x204>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d102      	bne.n	8003edc <HAL_SPI_Transmit+0x20a>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee0:	e026      	b.n	8003f30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1cd      	bne.n	8003e88 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa55 	bl	80043a0 <SPI_EndRxTxTransaction>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e000      	b.n	8003f30 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08c      	sub	sp, #48	; 0x30
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x26>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e18a      	b.n	8004286 <HAL_SPI_TransmitReceive+0x33c>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f78:	f7fe fac8 	bl	800250c <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d00f      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x70>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa0:	d107      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x68>
 8003faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fb8:	e15b      	b.n	8004272 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x82>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x82>
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fd2:	e14e      	b.n	8004272 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d003      	beq.n	8003fe8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	887a      	ldrh	r2, [r7, #2]
 800400a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d007      	beq.n	800403c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004044:	d178      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x10a>
 800404e:	8b7b      	ldrh	r3, [r7, #26]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d166      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	881a      	ldrh	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004078:	e053      	b.n	8004122 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d11b      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x176>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x176>
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d113      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d119      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x1b8>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d014      	beq.n	8004102 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	b292      	uxth	r2, r2
 80040e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040fe:	2301      	movs	r3, #1
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004102:	f7fe fa03 	bl	800250c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800410e:	429a      	cmp	r2, r3
 8004110:	d807      	bhi.n	8004122 <HAL_SPI_TransmitReceive+0x1d8>
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d003      	beq.n	8004122 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004120:	e0a7      	b.n	8004272 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1a6      	bne.n	800407a <HAL_SPI_TransmitReceive+0x130>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1a1      	bne.n	800407a <HAL_SPI_TransmitReceive+0x130>
 8004136:	e07c      	b.n	8004232 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x1fc>
 8004140:	8b7b      	ldrh	r3, [r7, #26]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d16b      	bne.n	800421e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416c:	e057      	b.n	800421e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d11c      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x26c>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d017      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x26c>
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d114      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d119      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x2ae>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d014      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041f8:	f7fe f988 	bl	800250c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004204:	429a      	cmp	r2, r3
 8004206:	d803      	bhi.n	8004210 <HAL_SPI_TransmitReceive+0x2c6>
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d102      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x2cc>
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800421c:	e029      	b.n	8004272 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1a2      	bne.n	800416e <HAL_SPI_TransmitReceive+0x224>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d19d      	bne.n	800416e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f8b2 	bl	80043a0 <SPI_EndRxTxTransaction>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800424e:	e010      	b.n	8004272 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	e000      	b.n	8004272 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004270:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004286:	4618      	mov	r0, r3
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a0:	f7fe f934 	bl	800250c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b0:	f7fe f92c 	bl	800250c <HAL_GetTick>
 80042b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	015b      	lsls	r3, r3, #5
 80042bc:	0d1b      	lsrs	r3, r3, #20
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	e054      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ce:	d050      	beq.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d0:	f7fe f91c 	bl	800250c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d902      	bls.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d13d      	bne.n	8004362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fe:	d111      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004308:	d004      	beq.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d107      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d10f      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800434c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e017      	b.n	8004392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3b01      	subs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4013      	ands	r3, r2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	429a      	cmp	r2, r3
 800438e:	d19b      	bne.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000048 	.word	0x20000048

080043a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <SPI_EndRxTxTransaction+0x7c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <SPI_EndRxTxTransaction+0x80>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0d5b      	lsrs	r3, r3, #21
 80043b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ca:	d112      	bne.n	80043f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2200      	movs	r2, #0
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff5a 	bl	8004290 <SPI_WaitFlagStateUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00f      	b.n	8004412 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d0f2      	beq.n	80043f2 <SPI_EndRxTxTransaction+0x52>
 800440c:	e000      	b.n	8004410 <SPI_EndRxTxTransaction+0x70>
        break;
 800440e:	bf00      	nop
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000048 	.word	0x20000048
 8004420:	165e9f81 	.word	0x165e9f81

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	4d0d      	ldr	r5, [pc, #52]	; (800445c <__libc_init_array+0x38>)
 8004428:	4c0d      	ldr	r4, [pc, #52]	; (8004460 <__libc_init_array+0x3c>)
 800442a:	1b64      	subs	r4, r4, r5
 800442c:	10a4      	asrs	r4, r4, #2
 800442e:	2600      	movs	r6, #0
 8004430:	42a6      	cmp	r6, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	4d0b      	ldr	r5, [pc, #44]	; (8004464 <__libc_init_array+0x40>)
 8004436:	4c0c      	ldr	r4, [pc, #48]	; (8004468 <__libc_init_array+0x44>)
 8004438:	f000 f820 	bl	800447c <_init>
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	2600      	movs	r6, #0
 8004442:	42a6      	cmp	r6, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f855 3b04 	ldr.w	r3, [r5], #4
 800444c:	4798      	blx	r3
 800444e:	3601      	adds	r6, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f855 3b04 	ldr.w	r3, [r5], #4
 8004456:	4798      	blx	r3
 8004458:	3601      	adds	r6, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	080044b8 	.word	0x080044b8
 8004460:	080044b8 	.word	0x080044b8
 8004464:	080044b8 	.word	0x080044b8
 8004468:	080044bc 	.word	0x080044bc

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <_init>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr

08004488 <_fini>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr
