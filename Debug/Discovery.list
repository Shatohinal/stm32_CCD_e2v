
Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000024c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a8  200002a8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009982  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6b  00000000  00000000  00029a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213a4  00000000  00000000  0002c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a56a  00000000  00000000  0004d98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb863  00000000  00000000  00057ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123759  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fd4  00000000  00000000  001237ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042e4 	.word	0x080042e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080042e4 	.word	0x080042e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <E2V_CLICKS_Ini>:
uint32_t* dma2_lifcr = DMA2_BASE+0x8UL;
uint32_t* dma2_stream3_ndtr = DMA2_BASE+0x5CUL;
uint32_t* dma2_stream3_cr = DMA2_BASE+0x58UL;

void E2V_CLICKS_Ini()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	r1u_to_r3d = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.1);
	r3d_to_r2u = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.23);
	r2u_to_r1d = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.1);
	r1d_to_r0u = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.07);
*/
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 80004d0:	4b22      	ldr	r3, [pc, #136]	; (800055c <E2V_CLICKS_Ini+0x90>)
 80004d2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80004d6:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R  + 16U))|
							(0x1UL << (E2V_CLICKS_R1 + 16U))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1 + 16U))|
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <E2V_CLICKS_Ini+0x90>)
 80004da:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80004de:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_S2 + 16U))|
							(0x1UL << (E2V_CLICKS_S3 + 16U));


	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U))|
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <E2V_CLICKS_Ini+0x90>)
 80004e2:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <E2V_CLICKS_Ini+0x94>)
 80004e4:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_SW + 16U))|
							(0x1UL << (E2V_CLICKS_DD + 16U))|		//??
							(0x1UL << (E2V_CLICKS_SG + 16U))|		//??
							(0x1UL << (E2V_CLICKS_SS + 16U));

	number_Of_Lines = 1033+1028;
 80004e6:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <E2V_CLICKS_Ini+0x98>)
 80004e8:	f640 020d 	movw	r2, #2061	; 0x80d
 80004ec:	601a      	str	r2, [r3, #0]
	number_Of_Rows = 1070;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <E2V_CLICKS_Ini+0x9c>)
 80004f0:	f240 422e 	movw	r2, #1070	; 0x42e
 80004f4:	601a      	str	r2, [r3, #0]

	OR_Clock_period = 4;/*in mks (1, 2, 4)*/
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <E2V_CLICKS_Ini+0xa0>)
 80004f8:	2204      	movs	r2, #4
 80004fa:	601a      	str	r2, [r3, #0]
	mS_To_Wait = 1;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <E2V_CLICKS_Ini+0xa4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]

	CCD_Mode = 0;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <E2V_CLICKS_Ini+0xa8>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
	CCD_Brust_N = 1;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <E2V_CLICKS_Ini+0xac>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
	CCD_Brust_Delay = 1000;
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <E2V_CLICKS_Ini+0xb0>)
 8000510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000514:	601a      	str	r2, [r3, #0]

	switch (OR_Clock_period)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <E2V_CLICKS_Ini+0xa0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d010      	beq.n	8000540 <E2V_CLICKS_Ini+0x74>
 800051e:	2b04      	cmp	r3, #4
 8000520:	d812      	bhi.n	8000548 <E2V_CLICKS_Ini+0x7c>
 8000522:	2b01      	cmp	r3, #1
 8000524:	d002      	beq.n	800052c <E2V_CLICKS_Ini+0x60>
 8000526:	2b02      	cmp	r3, #2
 8000528:	d005      	beq.n	8000536 <E2V_CLICKS_Ini+0x6a>
 800052a:	e00d      	b.n	8000548 <E2V_CLICKS_Ini+0x7c>
		{
		case 1:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 800052e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000532:	601a      	str	r2, [r3, #0]
			break;
 8000534:	e00d      	b.n	8000552 <E2V_CLICKS_Ini+0x86>
		case 2:
			E2V_CLICKS_OR_Clock_Freq = 500;
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 8000538:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800053c:	601a      	str	r2, [r3, #0]
			break;
 800053e:	e008      	b.n	8000552 <E2V_CLICKS_Ini+0x86>
		case 4:
			E2V_CLICKS_OR_Clock_Freq = 250;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 8000542:	22fa      	movs	r2, #250	; 0xfa
 8000544:	601a      	str	r2, [r3, #0]
			break;
 8000546:	e004      	b.n	8000552 <E2V_CLICKS_Ini+0x86>
		default:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 800054a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054e:	601a      	str	r2, [r3, #0]
			break;
 8000550:	bf00      	nop
		}
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40020c00 	.word	0x40020c00
 8000560:	ff800000 	.word	0xff800000
 8000564:	20000080 	.word	0x20000080
 8000568:	20000084 	.word	0x20000084
 800056c:	20000088 	.word	0x20000088
 8000570:	2000008c 	.word	0x2000008c
 8000574:	20000090 	.word	0x20000090
 8000578:	20000094 	.word	0x20000094
 800057c:	20000098 	.word	0x20000098
 8000580:	20000078 	.word	0x20000078

08000584 <E2V_CLICKS_Base_Aqu_Output>:

*/


void E2V_CLICKS_Base_Aqu_Output ()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
	switch (OR_Clock_period)
 800058a:	4b5b      	ldr	r3, [pc, #364]	; (80006f8 <E2V_CLICKS_Base_Aqu_Output+0x174>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d010      	beq.n	80005b4 <E2V_CLICKS_Base_Aqu_Output+0x30>
 8000592:	2b04      	cmp	r3, #4
 8000594:	d812      	bhi.n	80005bc <E2V_CLICKS_Base_Aqu_Output+0x38>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d002      	beq.n	80005a0 <E2V_CLICKS_Base_Aqu_Output+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d005      	beq.n	80005aa <E2V_CLICKS_Base_Aqu_Output+0x26>
 800059e:	e00d      	b.n	80005bc <E2V_CLICKS_Base_Aqu_Output+0x38>
		{
		case 1:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 80005a0:	4b56      	ldr	r3, [pc, #344]	; (80006fc <E2V_CLICKS_Base_Aqu_Output+0x178>)
 80005a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a6:	601a      	str	r2, [r3, #0]
			break;
 80005a8:	e00d      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		case 2:
			E2V_CLICKS_OR_Clock_Freq = 500;
 80005aa:	4b54      	ldr	r3, [pc, #336]	; (80006fc <E2V_CLICKS_Base_Aqu_Output+0x178>)
 80005ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005b0:	601a      	str	r2, [r3, #0]
			break;
 80005b2:	e008      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		case 4:
			E2V_CLICKS_OR_Clock_Freq = 250;
 80005b4:	4b51      	ldr	r3, [pc, #324]	; (80006fc <E2V_CLICKS_Base_Aqu_Output+0x178>)
 80005b6:	22fa      	movs	r2, #250	; 0xfa
 80005b8:	601a      	str	r2, [r3, #0]
			break;
 80005ba:	e004      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		default:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 80005bc:	4b4f      	ldr	r3, [pc, #316]	; (80006fc <E2V_CLICKS_Base_Aqu_Output+0x178>)
 80005be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c2:	601a      	str	r2, [r3, #0]
			break;
 80005c4:	bf00      	nop
		}
	if (mS_To_Wait == 0) mS_To_Wait = 1;
 80005c6:	4b4e      	ldr	r3, [pc, #312]	; (8000700 <E2V_CLICKS_Base_Aqu_Output+0x17c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <E2V_CLICKS_Base_Aqu_Output+0x50>
 80005ce:	4b4c      	ldr	r3, [pc, #304]	; (8000700 <E2V_CLICKS_Base_Aqu_Output+0x17c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]

//	HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП

	uint16_t lines_counter = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t opcode;
	uint8_t txWr0 = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t txWr1 = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint32_t addr = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
	int8_t buf[3] = {0,0,0};
 80005ea:	4a46      	ldr	r2, [pc, #280]	; (8000704 <E2V_CLICKS_Base_Aqu_Output+0x180>)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	3302      	adds	r3, #2
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	701a      	strb	r2, [r3, #0]
	int8_t sn = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	  uint32_t* GPIO_BSRR_Adress = &(E2V_CLICKS_PORT->BSRR);
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <E2V_CLICKS_Base_Aqu_Output+0x184>)
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c

	  uint32_t High_R = (0x1UL << (E2V_CLICKS_R));
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
	  uint32_t Low_R = (0x1UL << (E2V_CLICKS_R+16U));
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t High_R1 = (0x1UL << (E2V_CLICKS_R1));
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
	  uint32_t Low_R1 = (0x1UL << (E2V_CLICKS_R1+16U));
 8000612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000616:	61fb      	str	r3, [r7, #28]
	  uint32_t High_R2 = (0x1UL << (E2V_CLICKS_R2));
 8000618:	2304      	movs	r3, #4
 800061a:	61bb      	str	r3, [r7, #24]
	  uint32_t Low_R2 = (0x1UL << (E2V_CLICKS_R2+16U));
 800061c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000620:	617b      	str	r3, [r7, #20]
	  uint32_t High_R3 = (0x1UL << (E2V_CLICKS_R3));
 8000622:	2308      	movs	r3, #8
 8000624:	613b      	str	r3, [r7, #16]
	  uint32_t Low_R3 = (0x1UL << (E2V_CLICKS_R3+16U));
 8000626:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800062a:	60fb      	str	r3, [r7, #12]

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U))|
 800062c:	4b37      	ldr	r3, [pc, #220]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 800062e:	4a38      	ldr	r2, [pc, #224]	; (8000710 <E2V_CLICKS_Base_Aqu_Output+0x18c>)
 8000630:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_RD))|
							//(0x1UL << (E2V_CLICKS_SW))|
							(0x1UL << (E2V_CLICKS_DD))|		//??
							(0x1UL << (E2V_CLICKS_SG))|		//??
							(0x1UL << (E2V_CLICKS_SS + 16U));
	delay = 0U;
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	while (delay<100)
 8000638:	e004      	b.n	8000644 <E2V_CLICKS_Base_Aqu_Output+0xc0>
		{
		delay++;
 800063a:	4b36      	ldr	r3, [pc, #216]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a34      	ldr	r2, [pc, #208]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000642:	6013      	str	r3, [r2, #0]
	while (delay<100)
 8000644:	4b33      	ldr	r3, [pc, #204]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b63      	cmp	r3, #99	; 0x63
 800064a:	d9f6      	bls.n	800063a <E2V_CLICKS_Base_Aqu_Output+0xb6>
		}
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_SS));
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 800064e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000652:	619a      	str	r2, [r3, #24]
	delay = 0U;
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
	while (delay<100)
 800065a:	e004      	b.n	8000666 <E2V_CLICKS_Base_Aqu_Output+0xe2>
		{
		delay++;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000664:	6013      	str	r3, [r2, #0]
	while (delay<100)
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b63      	cmp	r3, #99	; 0x63
 800066c:	d9f6      	bls.n	800065c <E2V_CLICKS_Base_Aqu_Output+0xd8>
		}



	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <E2V_CLICKS_Base_Aqu_Output+0x194>)
 8000672:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R))|
							(0x1UL << (E2V_CLICKS_R1))|
							(0x1UL << (E2V_CLICKS_R2))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));

	uint32_t Ticks_To_Wait = mS_To_Wait*6718-848;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <E2V_CLICKS_Base_Aqu_Output+0x17c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f641 223e 	movw	r2, #6718	; 0x1a3e
 800067c:	fb02 f303 	mul.w	r3, r2, r3
 8000680:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8000684:	60bb      	str	r3, [r7, #8]
//	Ticks_To_Wait = 5870+6718;

	delay = 0U;
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	while (delay<Ticks_To_Wait)
 800068c:	e008      	b.n	80006a0 <E2V_CLICKS_Base_Aqu_Output+0x11c>
		{
		delay++;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	4a1f      	ldr	r2, [pc, #124]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 8000696:	6013      	str	r3, [r2, #0]
		if (tcp_recieve) break;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <E2V_CLICKS_Base_Aqu_Output+0x198>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d105      	bne.n	80006ac <E2V_CLICKS_Base_Aqu_Output+0x128>
	while (delay<Ticks_To_Wait)
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d8f1      	bhi.n	800068e <E2V_CLICKS_Base_Aqu_Output+0x10a>
 80006aa:	e000      	b.n	80006ae <E2V_CLICKS_Base_Aqu_Output+0x12a>
		if (tcp_recieve) break;
 80006ac:	bf00      	nop
		}

  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_R));
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	619a      	str	r2, [r3, #24]
  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_R1));
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	619a      	str	r2, [r3, #24]


  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3 + 16U));
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 80006bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006c0:	619a      	str	r2, [r3, #24]
  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3 + 16U));
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 80006c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006c8:	619a      	str	r2, [r3, #24]
  	delay = 0U;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
  	while (delay<20U)
 80006d0:	e004      	b.n	80006dc <E2V_CLICKS_Base_Aqu_Output+0x158>
  		{
  		delay++;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 80006da:	6013      	str	r3, [r2, #0]
  	while (delay<20U)
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b13      	cmp	r3, #19
 80006e2:	d9f6      	bls.n	80006d2 <E2V_CLICKS_Base_Aqu_Output+0x14e>
  		}

 	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1));
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 80006e6:	2210      	movs	r2, #16
 80006e8:	619a      	str	r2, [r3, #24]
 	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1));
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <E2V_CLICKS_Base_Aqu_Output+0x188>)
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	619a      	str	r2, [r3, #24]

	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80006f6:	e3dd      	b.n	8000eb4 <E2V_CLICKS_Base_Aqu_Output+0x930>
 80006f8:	20000088 	.word	0x20000088
 80006fc:	20000078 	.word	0x20000078
 8000700:	2000008c 	.word	0x2000008c
 8000704:	080042fc 	.word	0x080042fc
 8000708:	40020c18 	.word	0x40020c18
 800070c:	40020c00 	.word	0x40020c00
 8000710:	80806f00 	.word	0x80806f00
 8000714:	2000007c 	.word	0x2000007c
 8000718:	03f80007 	.word	0x03f80007
 800071c:	200002a0 	.word	0x200002a0
	{

		sn = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (lines_counter&0x0001)sn = 1;
 8000726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <E2V_CLICKS_Base_Aqu_Output+0x1b4>
 8000732:	2301      	movs	r3, #1
 8000734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		opcode = BSB_S0+sn*4;
 8000738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	3301      	adds	r3, #1
 8000742:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM1;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	b25b      	sxtb	r3, r3
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	b25b      	sxtb	r3, r3
 8000750:	71fb      	strb	r3, [r7, #7]

		txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2124      	movs	r1, #36	; 0x24
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fd16 	bl	8002188 <w5500_readReg>
 800075c:	4603      	mov	r3, r0
 800075e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2125      	movs	r1, #37	; 0x25
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fd0e 	bl	8002188 <w5500_readReg>
 800076c:	4603      	mov	r3, r0
 800076e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		addr = (txWr0<<8)|(txWr1);
 8000772:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000776:	021a      	lsls	r2, r3, #8
 8000778:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800077c:	4313      	orrs	r3, r2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48

		opcode = BSB_S0_TX+sn*4;
 8000780:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	3302      	adds	r3, #2
 800078a:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM0;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	71fb      	strb	r3, [r7, #7]
//		w5500_write_Buff(opcode,addr,buff,len);
//		buf[0] = (addr & 0xFF00)>> 8;
//		buf[1] = (addr & 0x00FF);
//		buf[2] = opcode|(RWB_WRITE<<2);

		W5500_SS_SELECT();
 8000792:	2200      	movs	r2, #0
 8000794:	2110      	movs	r1, #16
 8000796:	4878      	ldr	r0, [pc, #480]	; (8000978 <E2V_CLICKS_Base_Aqu_Output+0x3f4>)
 8000798:	f002 fca4 	bl	80030e4 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);


		DMA2_Stream3->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800079c:	4b77      	ldr	r3, [pc, #476]	; (800097c <E2V_CLICKS_Base_Aqu_Output+0x3f8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a76      	ldr	r2, [pc, #472]	; (800097c <E2V_CLICKS_Base_Aqu_Output+0x3f8>)
 80007a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a6:	6013      	str	r3, [r2, #0]
		DMA2_Stream3->NDTR = buff_size;
 80007a8:	4b75      	ldr	r3, [pc, #468]	; (8000980 <E2V_CLICKS_Base_Aqu_Output+0x3fc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	4b73      	ldr	r3, [pc, #460]	; (800097c <E2V_CLICKS_Base_Aqu_Output+0x3f8>)
 80007ae:	605a      	str	r2, [r3, #4]
		DMA2_Stream3->PAR = &SPI1->DR;
 80007b0:	4b72      	ldr	r3, [pc, #456]	; (800097c <E2V_CLICKS_Base_Aqu_Output+0x3f8>)
 80007b2:	4a74      	ldr	r2, [pc, #464]	; (8000984 <E2V_CLICKS_Base_Aqu_Output+0x400>)
 80007b4:	609a      	str	r2, [r3, #8]
		DMA2_Stream3->M0AR = buff_to_send;
 80007b6:	4b71      	ldr	r3, [pc, #452]	; (800097c <E2V_CLICKS_Base_Aqu_Output+0x3f8>)
 80007b8:	4a73      	ldr	r2, [pc, #460]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007ba:	60da      	str	r2, [r3, #12]
		SET_BIT(hspi1.Instance->CR1, SPI_CR1_SPE);
 80007bc:	4b73      	ldr	r3, [pc, #460]	; (800098c <E2V_CLICKS_Base_Aqu_Output+0x408>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b72      	ldr	r3, [pc, #456]	; (800098c <E2V_CLICKS_Base_Aqu_Output+0x408>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007ca:	601a      	str	r2, [r3, #0]

	    buff_to_send[0]=(addr & 0xFF00)>> 8;
 80007cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b6d      	ldr	r3, [pc, #436]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007d4:	701a      	strb	r2, [r3, #0]
	    buff_to_send[1]=(addr & 0x00FF);
 80007d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b6b      	ldr	r3, [pc, #428]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007dc:	705a      	strb	r2, [r3, #1]
        buff_to_send[2]=opcode|(RWB_WRITE<<2);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b68      	ldr	r3, [pc, #416]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007e8:	709a      	strb	r2, [r3, #2]

        buff_to_send[3]=3;
 80007ea:	4b67      	ldr	r3, [pc, #412]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007ec:	2203      	movs	r2, #3
 80007ee:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=14;
 80007f0:	4b65      	ldr	r3, [pc, #404]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007f2:	220e      	movs	r2, #14
 80007f4:	711a      	strb	r2, [r3, #4]
	    buff_to_send[5]=15;
 80007f6:	4b64      	ldr	r3, [pc, #400]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007f8:	220f      	movs	r2, #15
 80007fa:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=92;
 80007fc:	4b62      	ldr	r3, [pc, #392]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 80007fe:	225c      	movs	r2, #92	; 0x5c
 8000800:	719a      	strb	r2, [r3, #6]
        buff_to_send[7]=65;
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 8000804:	2241      	movs	r2, #65	; 0x41
 8000806:	71da      	strb	r2, [r3, #7]
        buff_to_send[8]=35;
 8000808:	4b5f      	ldr	r3, [pc, #380]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 800080a:	2223      	movs	r2, #35	; 0x23
 800080c:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=0;
 800080e:	4b5e      	ldr	r3, [pc, #376]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 8000810:	2200      	movs	r2, #0
 8000812:	725a      	strb	r2, [r3, #9]
	    buff_to_send[10]=0;
 8000814:	4b5c      	ldr	r3, [pc, #368]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 8000816:	2200      	movs	r2, #0
 8000818:	729a      	strb	r2, [r3, #10]

	    buff_to_send[11]=(uint8_t)((lines_counter&0xFF00)>>8);
 800081a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b58      	ldr	r3, [pc, #352]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 8000826:	72da      	strb	r2, [r3, #11]
	    buff_to_send[12]=(uint8_t)((lines_counter&0x00FF));
 8000828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b56      	ldr	r3, [pc, #344]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 8000830:	731a      	strb	r2, [r3, #12]
        buff_to_send[13]=0x00;
 8000832:	4b55      	ldr	r3, [pc, #340]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 8000834:	2200      	movs	r2, #0
 8000836:	735a      	strb	r2, [r3, #13]
        buff_to_send[14]=0x00;
 8000838:	4b53      	ldr	r3, [pc, #332]	; (8000988 <E2V_CLICKS_Base_Aqu_Output+0x404>)
 800083a:	2200      	movs	r2, #0
 800083c:	739a      	strb	r2, [r3, #14]

			  	  *spi1_cr2=0x0UL;
 800083e:	4b54      	ldr	r3, [pc, #336]	; (8000990 <E2V_CLICKS_Base_Aqu_Output+0x40c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 8000846:	4b53      	ldr	r3, [pc, #332]	; (8000994 <E2V_CLICKS_Base_Aqu_Output+0x410>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 800084e:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 14; //DMA2_Stream3->NDTR
 8000850:	4b51      	ldr	r3, [pc, #324]	; (8000998 <E2V_CLICKS_Base_Aqu_Output+0x414>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	220e      	movs	r2, #14
 8000856:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 8000858:	4b50      	ldr	r3, [pc, #320]	; (800099c <E2V_CLICKS_Base_Aqu_Output+0x418>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a50      	ldr	r2, [pc, #320]	; (80009a0 <E2V_CLICKS_Base_Aqu_Output+0x41c>)
 800085e:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 8000860:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <E2V_CLICKS_Base_Aqu_Output+0x40c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2202      	movs	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
			  	 * I2  __________/------\______
			  	 * I3  _______________/-----\__
			  	 */


			  	delay = 0U;
 8000868:	4b4e      	ldr	r3, [pc, #312]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
			  	while (delay<20U/*94U*5U*/)
 800086e:	e004      	b.n	800087a <E2V_CLICKS_Base_Aqu_Output+0x2f6>
			  		{
			  		delay++;
 8000870:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a4b      	ldr	r2, [pc, #300]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000878:	6013      	str	r3, [r2, #0]
			  	while (delay<20U/*94U*5U*/)
 800087a:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b13      	cmp	r3, #19
 8000880:	d9f6      	bls.n	8000870 <E2V_CLICKS_Base_Aqu_Output+0x2ec>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I2));
 8000882:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 8000884:	2220      	movs	r2, #32
 8000886:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S2));
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 800088a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800088e:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 8000890:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
			  	while (delay<52U)
 8000896:	e004      	b.n	80008a2 <E2V_CLICKS_Base_Aqu_Output+0x31e>
			  		{
			  		delay++;
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a41      	ldr	r2, [pc, #260]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008a0:	6013      	str	r3, [r2, #0]
			  	while (delay<52U)
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b33      	cmp	r3, #51	; 0x33
 80008a8:	d9f6      	bls.n	8000898 <E2V_CLICKS_Base_Aqu_Output+0x314>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U));
 80008aa:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 80008ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008b0:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1 + 16U));
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 80008b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008b8:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 80008ba:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
			  	while (delay<84U*5U)
 80008c0:	e004      	b.n	80008cc <E2V_CLICKS_Base_Aqu_Output+0x348>
			  		{
			  		delay++;
 80008c2:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008ca:	6013      	str	r3, [r2, #0]
			  	while (delay<84U*5U)
 80008cc:	4b35      	ldr	r3, [pc, #212]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80008d4:	d3f5      	bcc.n	80008c2 <E2V_CLICKS_Base_Aqu_Output+0x33e>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3));
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 80008d8:	2240      	movs	r2, #64	; 0x40
 80008da:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3));
 80008dc:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 80008de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e2:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
			  	while (delay<52U)
 80008ea:	e004      	b.n	80008f6 <E2V_CLICKS_Base_Aqu_Output+0x372>
			  		{
			  		delay++;
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008f4:	6013      	str	r3, [r2, #0]
			  	while (delay<52U)
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b33      	cmp	r3, #51	; 0x33
 80008fc:	d9f6      	bls.n	80008ec <E2V_CLICKS_Base_Aqu_Output+0x368>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I2 + 16U));
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 8000900:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000904:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S2 + 16U));
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 8000908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800090c:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 800090e:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
			  	while (delay<94U*5U)
 8000914:	e004      	b.n	8000920 <E2V_CLICKS_Base_Aqu_Output+0x39c>
			  		{
			  		delay++;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800091e:	6013      	str	r3, [r2, #0]
			  	while (delay<94U*5U)
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8000928:	d3f5      	bcc.n	8000916 <E2V_CLICKS_Base_Aqu_Output+0x392>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3 + 16U));
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 800092c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000930:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3 + 16U));
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 8000934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000938:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			  	while (delay<18U)
 8000940:	e004      	b.n	800094c <E2V_CLICKS_Base_Aqu_Output+0x3c8>
			  		{
			  		delay++;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800094a:	6013      	str	r3, [r2, #0]
			  	while (delay<18U)
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <E2V_CLICKS_Base_Aqu_Output+0x420>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b11      	cmp	r3, #17
 8000952:	d9f6      	bls.n	8000942 <E2V_CLICKS_Base_Aqu_Output+0x3be>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
			  		}

			  	  __disable_irq();


			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_R1 + 16U));
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <E2V_CLICKS_Base_Aqu_Output+0x424>)
 800095a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800095e:	619a      	str	r2, [r3, #24]

			  	switch (E2V_CLICKS_OR_Clock_Freq)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <E2V_CLICKS_Base_Aqu_Output+0x428>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2bfa      	cmp	r3, #250	; 0xfa
 8000966:	f000 80af 	beq.w	8000ac8 <E2V_CLICKS_Base_Aqu_Output+0x544>
 800096a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800096e:	f040 8183 	bne.w	8000c78 <E2V_CLICKS_Base_Aqu_Output+0x6f4>
			  		{
			  		case 500:
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000972:	2300      	movs	r3, #0
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
 8000976:	e0a0      	b.n	8000aba <E2V_CLICKS_Base_Aqu_Output+0x536>
 8000978:	40020000 	.word	0x40020000
 800097c:	40026458 	.word	0x40026458
 8000980:	20000000 	.word	0x20000000
 8000984:	4001300c 	.word	0x4001300c
 8000988:	2000009c 	.word	0x2000009c
 800098c:	200001e8 	.word	0x200001e8
 8000990:	20000004 	.word	0x20000004
 8000994:	20000008 	.word	0x20000008
 8000998:	2000000c 	.word	0x2000000c
 800099c:	20000010 	.word	0x20000010
 80009a0:	0600045f 	.word	0x0600045f
 80009a4:	2000007c 	.word	0x2000007c
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	20000078 	.word	0x20000078
			  				 * R2  ----\__________/--|-
			  				 * R3  ___/------\_______|_
			  				 * OS  /----------\______|/
			  				 */

			  				*GPIO_BSRR_Adress = High_R;
 80009b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009b4:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009b6:	4b87      	ldr	r3, [pc, #540]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009bc:	4b85      	ldr	r3, [pc, #532]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009c2:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009c8:	4b82      	ldr	r3, [pc, #520]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009ce:	4b81      	ldr	r3, [pc, #516]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = Low_R;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d8:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009da:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = High_R3;
 80009e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 80009e6:	4b7b      	ldr	r3, [pc, #492]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]


			  				*GPIO_BSRR_Adress = Low_R2;
 80009ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	601a      	str	r2, [r3, #0]

			  				  buff_to_send[0]=(uint8_t)((adc&0xFF00)>>8);		///////////////////////////////
 80009f2:	4b79      	ldr	r3, [pc, #484]	; (8000bd8 <E2V_CLICKS_Base_Aqu_Output+0x654>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	121b      	asrs	r3, r3, #8
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <E2V_CLICKS_Base_Aqu_Output+0x658>)
 80009fe:	701a      	strb	r2, [r3, #0]
			  				  buff_to_send[1]=(uint8_t)((adc&0x00FF));			///////////////////////////////
 8000a00:	4b75      	ldr	r3, [pc, #468]	; (8000bd8 <E2V_CLICKS_Base_Aqu_Output+0x654>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b74      	ldr	r3, [pc, #464]	; (8000bdc <E2V_CLICKS_Base_Aqu_Output+0x658>)
 8000a0a:	705a      	strb	r2, [r3, #1]

			  				*spi1_cr2=0x0UL;									///////////////////////////////
 8000a0c:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <E2V_CLICKS_Base_Aqu_Output+0x65c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
			  				*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000a14:	4b73      	ldr	r3, [pc, #460]	; (8000be4 <E2V_CLICKS_Base_Aqu_Output+0x660>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000a1c:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_ndtr = buff_size; //DMA2_Stream2->NDTR///////////////////////////////
 8000a1e:	4b72      	ldr	r3, [pc, #456]	; (8000be8 <E2V_CLICKS_Base_Aqu_Output+0x664>)
 8000a20:	881a      	ldrh	r2, [r3, #0]
 8000a22:	4b72      	ldr	r3, [pc, #456]	; (8000bec <E2V_CLICKS_Base_Aqu_Output+0x668>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000a28:	4b71      	ldr	r3, [pc, #452]	; (8000bf0 <E2V_CLICKS_Base_Aqu_Output+0x66c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a71      	ldr	r2, [pc, #452]	; (8000bf4 <E2V_CLICKS_Base_Aqu_Output+0x670>)
 8000a2e:	601a      	str	r2, [r3, #0]
			  				*spi1_cr2=0x2UL;									///////////////////////////////
 8000a30:	4b6b      	ldr	r3, [pc, #428]	; (8000be0 <E2V_CLICKS_Base_Aqu_Output+0x65c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2202      	movs	r2, #2
 8000a36:	601a      	str	r2, [r3, #0]

			  				delay = 0U;
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
			  				while (delay<1U)
 8000a3e:	e004      	b.n	8000a4a <E2V_CLICKS_Base_Aqu_Output+0x4c6>
			  					{
			  					delay++;
 8000a40:	4b64      	ldr	r3, [pc, #400]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	4a63      	ldr	r2, [pc, #396]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a48:	6013      	str	r3, [r2, #0]
			  				while (delay<1U)
 8000a4a:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f6      	beq.n	8000a40 <E2V_CLICKS_Base_Aqu_Output+0x4bc>
			  					}

			  				*GPIO_BSRR_Adress = High_R1;
 8000a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a54:	6a3a      	ldr	r2, [r7, #32]
 8000a56:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000a58:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]


			  				*GPIO_BSRR_Adress = Low_R3;
 8000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	601a      	str	r2, [r3, #0]

			  				ADC1->CR2 = 0x40000001;							///////////////////////////////
 8000a64:	4b64      	ldr	r3, [pc, #400]	; (8000bf8 <E2V_CLICKS_Base_Aqu_Output+0x674>)
 8000a66:	4a65      	ldr	r2, [pc, #404]	; (8000bfc <E2V_CLICKS_Base_Aqu_Output+0x678>)
 8000a68:	609a      	str	r2, [r3, #8]

			  				delay = 0U;
 8000a6a:	4b5a      	ldr	r3, [pc, #360]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			  				while (delay<5U)
 8000a70:	e004      	b.n	8000a7c <E2V_CLICKS_Base_Aqu_Output+0x4f8>
			  					{
			  					delay++;
 8000a72:	4b58      	ldr	r3, [pc, #352]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a56      	ldr	r2, [pc, #344]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a7a:	6013      	str	r3, [r2, #0]
			  				while (delay<5U)
 8000a7c:	4b55      	ldr	r3, [pc, #340]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d9f6      	bls.n	8000a72 <E2V_CLICKS_Base_Aqu_Output+0x4ee>
			  					}

			  				*GPIO_BSRR_Adress = High_R2;
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	601a      	str	r2, [r3, #0]

			  				delay = 0U;
 8000a8a:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = Low_R1;
 8000a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	601a      	str	r2, [r3, #0]
			  			    adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////
 8000a96:	4b58      	ldr	r3, [pc, #352]	; (8000bf8 <E2V_CLICKS_Base_Aqu_Output+0x674>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b4e      	ldr	r3, [pc, #312]	; (8000bd8 <E2V_CLICKS_Base_Aqu_Output+0x654>)
 8000a9e:	801a      	strh	r2, [r3, #0]

			  				delay = 0U;
 8000aa0:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000aa6:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000aac:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
			  				while (delay<0U)
 8000ab2:	bf00      	nop
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8000aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000abc:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <E2V_CLICKS_Base_Aqu_Output+0x67c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	f4ff af75 	bcc.w	80009b0 <E2V_CLICKS_Base_Aqu_Output+0x42c>
			  					{
			  					delay++;
			  					}
			  				}
			  			break;
 8000ac6:	e135      	b.n	8000d34 <E2V_CLICKS_Base_Aqu_Output+0x7b0>
			  		case 250:
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000acc:	e0cd      	b.n	8000c6a <E2V_CLICKS_Base_Aqu_Output+0x6e6>
			  				 * R2  ----\__________/--|-
			  				 * R3  ___/------\_______|_
			  				 * OS  /----------\______|/
			  				 */

			  				*GPIO_BSRR_Adress = High_R;
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000ad4:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
			  				while (delay<3U)
 8000ada:	e004      	b.n	8000ae6 <E2V_CLICKS_Base_Aqu_Output+0x562>
			  					{
			  					delay++;
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a3c      	ldr	r2, [pc, #240]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000ae4:	6013      	str	r3, [r2, #0]
			  				while (delay<3U)
 8000ae6:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d9f6      	bls.n	8000adc <E2V_CLICKS_Base_Aqu_Output+0x558>
			  					}

			  				*GPIO_BSRR_Adress = Low_R;
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af2:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b00:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b06:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b12:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = High_R3;
 8000b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]


			  				*GPIO_BSRR_Adress = Low_R2;
 8000b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	601a      	str	r2, [r3, #0]

			  				  buff_to_send[0]=(uint8_t)((adc&0xFF00)>>8);		///////////////////////////////
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <E2V_CLICKS_Base_Aqu_Output+0x654>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	121b      	asrs	r3, r3, #8
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <E2V_CLICKS_Base_Aqu_Output+0x658>)
 8000b42:	701a      	strb	r2, [r3, #0]
			  				  buff_to_send[1]=(uint8_t)((adc&0x00FF));			///////////////////////////////
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <E2V_CLICKS_Base_Aqu_Output+0x654>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <E2V_CLICKS_Base_Aqu_Output+0x658>)
 8000b4e:	705a      	strb	r2, [r3, #1]

			  				*spi1_cr2=0x0UL;									///////////////////////////////
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <E2V_CLICKS_Base_Aqu_Output+0x65c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
			  				*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <E2V_CLICKS_Base_Aqu_Output+0x660>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000b60:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_ndtr = buff_size; //DMA2_Stream2->NDTR///////////////////////////////
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <E2V_CLICKS_Base_Aqu_Output+0x664>)
 8000b64:	881a      	ldrh	r2, [r3, #0]
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <E2V_CLICKS_Base_Aqu_Output+0x668>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <E2V_CLICKS_Base_Aqu_Output+0x66c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <E2V_CLICKS_Base_Aqu_Output+0x670>)
 8000b72:	601a      	str	r2, [r3, #0]
			  				*spi1_cr2=0x2UL;									///////////////////////////////
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <E2V_CLICKS_Base_Aqu_Output+0x65c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2202      	movs	r2, #2
 8000b7a:	601a      	str	r2, [r3, #0]

			  				delay = 0U;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
//			  				delay = 0U;
			  				while (delay<7U)
 8000b82:	e004      	b.n	8000b8e <E2V_CLICKS_Base_Aqu_Output+0x60a>
			  					{
			  					delay++;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b8c:	6013      	str	r3, [r2, #0]
			  				while (delay<7U)
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d9f6      	bls.n	8000b84 <E2V_CLICKS_Base_Aqu_Output+0x600>
			  					}

			  				*GPIO_BSRR_Adress = High_R1;
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	6a3a      	ldr	r2, [r7, #32]
 8000b9a:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]


			  				*GPIO_BSRR_Adress = Low_R3;
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	601a      	str	r2, [r3, #0]

			  				ADC1->CR2 = 0x40000001;							///////////////////////////////
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <E2V_CLICKS_Base_Aqu_Output+0x674>)
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <E2V_CLICKS_Base_Aqu_Output+0x678>)
 8000bb8:	609a      	str	r2, [r3, #8]

			  				delay = 0U;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000bc6:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000bcc:	4b01      	ldr	r3, [pc, #4]	; (8000bd4 <E2V_CLICKS_Base_Aqu_Output+0x650>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
			  				while (delay<10U)
 8000bd2:	e01c      	b.n	8000c0e <E2V_CLICKS_Base_Aqu_Output+0x68a>
 8000bd4:	2000007c 	.word	0x2000007c
 8000bd8:	2000019c 	.word	0x2000019c
 8000bdc:	2000009c 	.word	0x2000009c
 8000be0:	20000004 	.word	0x20000004
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000000 	.word	0x20000000
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	20000010 	.word	0x20000010
 8000bf4:	0600045f 	.word	0x0600045f
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	40000001 	.word	0x40000001
 8000c00:	20000084 	.word	0x20000084
			  					{
			  					delay++;
 8000c04:	4b70      	ldr	r3, [pc, #448]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a6f      	ldr	r2, [pc, #444]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c0c:	6013      	str	r3, [r2, #0]
			  				while (delay<10U)
 8000c0e:	4b6e      	ldr	r3, [pc, #440]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b09      	cmp	r3, #9
 8000c14:	d9f6      	bls.n	8000c04 <E2V_CLICKS_Base_Aqu_Output+0x680>
			  					}

			  				*GPIO_BSRR_Adress = High_R2;
 8000c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c1c:	4b6a      	ldr	r3, [pc, #424]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c22:	4b69      	ldr	r3, [pc, #420]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c28:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]

			  			    *GPIO_BSRR_Adress = Low_R1;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	601a      	str	r2, [r3, #0]
			  			    adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////
 8000c34:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <E2V_CLICKS_Base_Aqu_Output+0x848>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <E2V_CLICKS_Base_Aqu_Output+0x84c>)
 8000c3c:	801a      	strh	r2, [r3, #0]


			  				delay = 0U;
 8000c3e:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c44:	4b60      	ldr	r3, [pc, #384]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
			  				while (delay<3U)
 8000c50:	e004      	b.n	8000c5c <E2V_CLICKS_Base_Aqu_Output+0x6d8>
			  					{
			  					delay++;
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a5b      	ldr	r2, [pc, #364]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c5a:	6013      	str	r3, [r2, #0]
			  				while (delay<3U)
 8000c5c:	4b5a      	ldr	r3, [pc, #360]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d9f6      	bls.n	8000c52 <E2V_CLICKS_Base_Aqu_Output+0x6ce>
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c66:	3301      	adds	r3, #1
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c6c:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <E2V_CLICKS_Base_Aqu_Output+0x850>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f4ff af2c 	bcc.w	8000ace <E2V_CLICKS_Base_Aqu_Output+0x54a>
			  					}
			  				}
			  			break;
 8000c76:	e05d      	b.n	8000d34 <E2V_CLICKS_Base_Aqu_Output+0x7b0>
			  		default:
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c7c:	e054      	b.n	8000d28 <E2V_CLICKS_Base_Aqu_Output+0x7a4>
			  				 * R2  ----\__________/--|-
			  				 * R3  ___/------\_______|_
			  				 * OS  /----------\______|/
			  				 */

			  				*GPIO_BSRR_Adress = High_R;
 8000c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c82:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
			  			//	delay = 0U;


			  				*GPIO_BSRR_Adress = Low_R;
 8000c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8e:	601a      	str	r2, [r3, #0]
			  			//	delay = 0U;

			  				*GPIO_BSRR_Adress = High_R3;
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c96:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]


			  				*GPIO_BSRR_Adress = Low_R2;
 8000c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	601a      	str	r2, [r3, #0]
			  				  buff_to_send[0]=(uint8_t)((adc&0xFF00)>>8);		///////////////////////////////
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <E2V_CLICKS_Base_Aqu_Output+0x84c>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	121b      	asrs	r3, r3, #8
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <E2V_CLICKS_Base_Aqu_Output+0x854>)
 8000cae:	701a      	strb	r2, [r3, #0]
			  				  buff_to_send[1]=(uint8_t)((adc&0x00FF));			///////////////////////////////
 8000cb0:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <E2V_CLICKS_Base_Aqu_Output+0x84c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <E2V_CLICKS_Base_Aqu_Output+0x854>)
 8000cba:	705a      	strb	r2, [r3, #1]

			  				*spi1_cr2=0x0UL;									///////////////////////////////
 8000cbc:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <E2V_CLICKS_Base_Aqu_Output+0x858>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
			  				*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000cc4:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <E2V_CLICKS_Base_Aqu_Output+0x85c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000ccc:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
			  				delay = 0U;
			  				delay = 0U;
//			  				delay = 0U;
*/
			  				*GPIO_BSRR_Adress = High_R1;
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	6a3a      	ldr	r2, [r7, #32]
 8000cd2:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]


			  				*GPIO_BSRR_Adress = Low_R3;
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	601a      	str	r2, [r3, #0]
			  				ADC1->CR2 = 0x40000001;							///////////////////////////////
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <E2V_CLICKS_Base_Aqu_Output+0x848>)
 8000ce2:	4a40      	ldr	r2, [pc, #256]	; (8000de4 <E2V_CLICKS_Base_Aqu_Output+0x860>)
 8000ce4:	609a      	str	r2, [r3, #8]

//			  				delay = 0U;
//			  				delay = 0U;
			  				delay = 0U;
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
//			  				delay = 0U;
//			  				delay = 0U;
//			  				delay = 0U;
//			  				delay = 0U;
//			  				delay = 0U;
			  				*dma2_stream3_ndtr = buff_size; //DMA2_Stream2->NDTR///////////////////////////////
 8000cec:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <E2V_CLICKS_Base_Aqu_Output+0x864>)
 8000cee:	881a      	ldrh	r2, [r3, #0]
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <E2V_CLICKS_Base_Aqu_Output+0x868>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <E2V_CLICKS_Base_Aqu_Output+0x86c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a3e      	ldr	r2, [pc, #248]	; (8000df4 <E2V_CLICKS_Base_Aqu_Output+0x870>)
 8000cfc:	601a      	str	r2, [r3, #0]
			  				*spi1_cr2=0x2UL;									///////////////////////////////
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <E2V_CLICKS_Base_Aqu_Output+0x858>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2202      	movs	r2, #2
 8000d04:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = High_R2;
 8000d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = Low_R1;
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	601a      	str	r2, [r3, #0]
			  			    adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <E2V_CLICKS_Base_Aqu_Output+0x848>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <E2V_CLICKS_Base_Aqu_Output+0x84c>)
 8000d20:	801a      	strh	r2, [r3, #0]
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d24:	3301      	adds	r3, #1
 8000d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <E2V_CLICKS_Base_Aqu_Output+0x850>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3a5      	bcc.n	8000c7e <E2V_CLICKS_Base_Aqu_Output+0x6fa>

//			  				delay = 0U;
//			  				delay = 0U;
			  				}
			  			break;
 8000d32:	bf00      	nop
			  		}

				  buff_to_send[0]=(uint8_t)((adc&0xFF00)>>8);		///////////////////////////////
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <E2V_CLICKS_Base_Aqu_Output+0x84c>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	121b      	asrs	r3, r3, #8
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <E2V_CLICKS_Base_Aqu_Output+0x854>)
 8000d40:	701a      	strb	r2, [r3, #0]
				  buff_to_send[1]=(uint8_t)((adc&0x00FF));			///////////////////////////////
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <E2V_CLICKS_Base_Aqu_Output+0x84c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <E2V_CLICKS_Base_Aqu_Output+0x854>)
 8000d4c:	705a      	strb	r2, [r3, #1]

				*spi1_cr2=0x0UL;									///////////////////////////////
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <E2V_CLICKS_Base_Aqu_Output+0x858>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
				*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <E2V_CLICKS_Base_Aqu_Output+0x85c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000d5e:	601a      	str	r2, [r3, #0]
				*dma2_stream3_ndtr = buff_size; //DMA2_Stream2->NDTR///////////////////////////////
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <E2V_CLICKS_Base_Aqu_Output+0x864>)
 8000d62:	881a      	ldrh	r2, [r3, #0]
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <E2V_CLICKS_Base_Aqu_Output+0x868>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	601a      	str	r2, [r3, #0]
				*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <E2V_CLICKS_Base_Aqu_Output+0x86c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <E2V_CLICKS_Base_Aqu_Output+0x870>)
 8000d70:	601a      	str	r2, [r3, #0]
				*spi1_cr2=0x2UL;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <E2V_CLICKS_Base_Aqu_Output+0x858>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2202      	movs	r2, #2
 8000d78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d7a:	b662      	cpsie	i
}
 8000d7c:	bf00      	nop

				__enable_irq();

			  	//////////////////////////////////////////////////////////////////////////////////////////////////////////

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_R));
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <E2V_CLICKS_Base_Aqu_Output+0x874>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_R1));
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <E2V_CLICKS_Base_Aqu_Output+0x874>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	619a      	str	r2, [r3, #24]


			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3 + 16U));
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <E2V_CLICKS_Base_Aqu_Output+0x874>)
 8000d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d90:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3 + 16U));
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <E2V_CLICKS_Base_Aqu_Output+0x874>)
 8000d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d98:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
			  	while (delay<20U)
 8000da0:	e004      	b.n	8000dac <E2V_CLICKS_Base_Aqu_Output+0x828>
			  		{
			  		delay++;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000daa:	6013      	str	r3, [r2, #0]
			  	while (delay<20U)
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b13      	cmp	r3, #19
 8000db2:	d9f6      	bls.n	8000da2 <E2V_CLICKS_Base_Aqu_Output+0x81e>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1));
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <E2V_CLICKS_Base_Aqu_Output+0x874>)
 8000db6:	2210      	movs	r2, #16
 8000db8:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1));
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <E2V_CLICKS_Base_Aqu_Output+0x874>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	619a      	str	r2, [r3, #24]



    	delay = 0U;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <E2V_CLICKS_Base_Aqu_Output+0x844>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    	while (delay<20)
 8000dc6:	e01e      	b.n	8000e06 <E2V_CLICKS_Base_Aqu_Output+0x882>
 8000dc8:	2000007c 	.word	0x2000007c
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	2000019c 	.word	0x2000019c
 8000dd4:	20000084 	.word	0x20000084
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000008 	.word	0x20000008
 8000de4:	40000001 	.word	0x40000001
 8000de8:	20000000 	.word	0x20000000
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	20000010 	.word	0x20000010
 8000df4:	0600045f 	.word	0x0600045f
 8000df8:	40020c00 	.word	0x40020c00
    		{
    		delay++;
 8000dfc:	4b8c      	ldr	r3, [pc, #560]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a8b      	ldr	r2, [pc, #556]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000e04:	6013      	str	r3, [r2, #0]
    	while (delay<20)
 8000e06:	4b8a      	ldr	r3, [pc, #552]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b13      	cmp	r3, #19
 8000e0c:	d9f6      	bls.n	8000dfc <E2V_CLICKS_Base_Aqu_Output+0x878>
    		}

		W5500_SS_DESELECT();
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	4888      	ldr	r0, [pc, #544]	; (8001034 <E2V_CLICKS_Base_Aqu_Output+0xab0>)
 8000e14:	f002 f966 	bl	80030e4 <HAL_GPIO_WritePin>
		addr = addr+number_Of_Rows*2+14;
 8000e18:	4b87      	ldr	r3, [pc, #540]	; (8001038 <E2V_CLICKS_Base_Aqu_Output+0xab4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	005a      	lsls	r2, r3, #1
 8000e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e20:	4413      	add	r3, r2
 8000e22:	330e      	adds	r3, #14
 8000e24:	64bb      	str	r3, [r7, #72]	; 0x48
//		if (addr > 0xffff)addr=addr-0xffff;

		if (lines_counter == 70)
 8000e26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e2a:	2b46      	cmp	r3, #70	; 0x46
 8000e2c:	d102      	bne.n	8000e34 <E2V_CLICKS_Base_Aqu_Output+0x8b0>
		{
			delay = 0;
 8000e2e:	4b80      	ldr	r3, [pc, #512]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
		}

		opcode = BSB_S0+sn*4;
 8000e34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM1;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	71fb      	strb	r3, [r7, #7]

		txWr0 = (addr&0xFF00)>>8;
 8000e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		txWr1 = (addr&0x00FF);
 8000e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8000e5c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2124      	movs	r1, #36	; 0x24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 f95d 	bl	8002124 <w5500_writeReg>
		w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8000e6a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2125      	movs	r1, #37	; 0x25
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 f956 	bl	8002124 <w5500_writeReg>

		opcode=0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	71fb      	strb	r3, [r7, #7]
		opcode = BSB_S0+sn*4;
 8000e7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM1;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	71fb      	strb	r3, [r7, #7]
		w5500_writeReg(opcode,Sn_CR, CR_SEND);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 f941 	bl	8002124 <w5500_writeReg>


		if (tcp_recieve) break;
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <E2V_CLICKS_Base_Aqu_Output+0xab8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <E2V_CLICKS_Base_Aqu_Output+0x940>
	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 8000eaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000eb4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000eb8:	4b61      	ldr	r3, [pc, #388]	; (8001040 <E2V_CLICKS_Base_Aqu_Output+0xabc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f4ff ac2f 	bcc.w	8000720 <E2V_CLICKS_Base_Aqu_Output+0x19c>
 8000ec2:	e000      	b.n	8000ec6 <E2V_CLICKS_Base_Aqu_Output+0x942>
		if (tcp_recieve) break;
 8000ec4:	bf00      	nop

	}

	HAL_ADC_Stop(&hadc1);
 8000ec6:	485f      	ldr	r0, [pc, #380]	; (8001044 <E2V_CLICKS_Base_Aqu_Output+0xac0>)
 8000ec8:	f001 fa95 	bl	80023f6 <HAL_ADC_Stop>

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 8000ecc:	4b5e      	ldr	r3, [pc, #376]	; (8001048 <E2V_CLICKS_Base_Aqu_Output+0xac4>)
 8000ece:	4a5f      	ldr	r2, [pc, #380]	; (800104c <E2V_CLICKS_Base_Aqu_Output+0xac8>)
 8000ed0:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R1 + 16U))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));


	delay = 0U;
 8000ed2:	4b57      	ldr	r3, [pc, #348]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	while (delay<100)
 8000ed8:	e004      	b.n	8000ee4 <E2V_CLICKS_Base_Aqu_Output+0x960>
		{
		delay++;
 8000eda:	4b55      	ldr	r3, [pc, #340]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a53      	ldr	r2, [pc, #332]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000ee2:	6013      	str	r3, [r2, #0]
	while (delay<100)
 8000ee4:	4b52      	ldr	r3, [pc, #328]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b63      	cmp	r3, #99	; 0x63
 8000eea:	d9f6      	bls.n	8000eda <E2V_CLICKS_Base_Aqu_Output+0x956>
		}
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_SS + 16U));
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <E2V_CLICKS_Base_Aqu_Output+0xac4>)
 8000eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ef2:	619a      	str	r2, [r3, #24]
	delay = 0U;
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
	while (delay<100)
 8000efa:	e004      	b.n	8000f06 <E2V_CLICKS_Base_Aqu_Output+0x982>
		{
		delay++;
 8000efc:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000f04:	6013      	str	r3, [r2, #0]
	while (delay<100)
 8000f06:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b63      	cmp	r3, #99	; 0x63
 8000f0c:	d9f6      	bls.n	8000efc <E2V_CLICKS_Base_Aqu_Output+0x978>
		}
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U))|
 8000f0e:	4b4e      	ldr	r3, [pc, #312]	; (8001048 <E2V_CLICKS_Base_Aqu_Output+0xac4>)
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <E2V_CLICKS_Base_Aqu_Output+0xacc>)
 8000f12:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_SG + 16U))|		//??
							(0x1UL << (E2V_CLICKS_SS + 16U));



for (int i = 0; i < 10; i++ )
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
 8000f18:	e079      	b.n	800100e <E2V_CLICKS_Base_Aqu_Output+0xa8a>
{
	while (delay<2000)
		{
		delay++;
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a43      	ldr	r2, [pc, #268]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000f22:	6013      	str	r3, [r2, #0]
	while (delay<2000)
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f2c:	d3f5      	bcc.n	8000f1a <E2V_CLICKS_Base_Aqu_Output+0x996>
		}
	sn = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	opcode = BSB_S0+sn*4;
 8000f34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	71fb      	strb	r3, [r7, #7]
	opcode = (opcode<<3)|OM_FDM1;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	71fb      	strb	r3, [r7, #7]

	txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2124      	movs	r1, #36	; 0x24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 f918 	bl	8002188 <w5500_readReg>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2125      	movs	r1, #37	; 0x25
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 f910 	bl	8002188 <w5500_readReg>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	addr = (txWr0<<8)|(txWr1);
 8000f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f72:	021a      	lsls	r2, r3, #8
 8000f74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48


	addr = addr+14;
 8000f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7e:	330e      	adds	r3, #14
 8000f80:	64bb      	str	r3, [r7, #72]	; 0x48
	if (addr > 0xffff)addr=addr-0xffffU;
 8000f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d304      	bcc.n	8000f94 <E2V_CLICKS_Base_Aqu_Output+0xa10>
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f8c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000f90:	3bff      	subs	r3, #255	; 0xff
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48

	opcode = BSB_S0+sn*4;
 8000f94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
	opcode = (opcode<<3)|OM_FDM1;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	71fb      	strb	r3, [r7, #7]

	txWr0 = (addr&0xFF00)>>8;
 8000fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	txWr1 = (addr&0x00FF);
 8000fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8000fbc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2124      	movs	r1, #36	; 0x24
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 f8ad 	bl	8002124 <w5500_writeReg>
	w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8000fca:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2125      	movs	r1, #37	; 0x25
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 f8a6 	bl	8002124 <w5500_writeReg>

	opcode=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71fb      	strb	r3, [r7, #7]
	opcode = BSB_S0+sn*4;
 8000fdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	71fb      	strb	r3, [r7, #7]
	opcode = (opcode<<3)|OM_FDM1;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	71fb      	strb	r3, [r7, #7]
	w5500_writeReg(opcode,Sn_CR, CR_SEND);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 f891 	bl	8002124 <w5500_writeReg>
	delay = 0U;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <E2V_CLICKS_Base_Aqu_Output+0xaac>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
for (int i = 0; i < 10; i++ )
 8001008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100a:	3301      	adds	r3, #1
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	2b09      	cmp	r3, #9
 8001012:	dd87      	ble.n	8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>

}

if (tcp_recieve) TCP_Recieve();
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <E2V_CLICKS_Base_Aqu_Output+0xab8>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <E2V_CLICKS_Base_Aqu_Output+0xa9c>
 800101c:	f000 fd3a 	bl	8001a94 <TCP_Recieve>
tcp_recieve = 0;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <E2V_CLICKS_Base_Aqu_Output+0xab8>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	; 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000007c 	.word	0x2000007c
 8001034:	40020000 	.word	0x40020000
 8001038:	20000084 	.word	0x20000084
 800103c:	200002a0 	.word	0x200002a0
 8001040:	20000080 	.word	0x20000080
 8001044:	200001a0 	.word	0x200001a0
 8001048:	40020c00 	.word	0x40020c00
 800104c:	03ff0000 	.word	0x03ff0000
 8001050:	ef800000 	.word	0xef800000

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f001 f8f3 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f863 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001062:	f000 f96d 	bl	8001340 <MX_GPIO_Init>
  MX_DMA_Init();
 8001066:	f000 f951 	bl	800130c <MX_DMA_Init>
  MX_SPI1_Init();
 800106a:	f000 f919 	bl	80012a0 <MX_SPI1_Init>
  MX_ADC1_Init();
 800106e:	f000 f8c5 	bl	80011fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  w5500_ini();
 8001072:	f000 fb69 	bl	8001748 <w5500_ini>
  w5500_startUDP(0);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 fc9e 	bl	80019b8 <w5500_startUDP>
  w5500_startUDP(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fc9b 	bl	80019b8 <w5500_startUDP>
  w5500_startTCP();
 8001082:	f000 ff05 	bl	8001e90 <w5500_startTCP>

  OR_Clock_period = 1;
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <main+0xc4>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
  E2V_CLICKS_Ini();
 800108c:	f7ff fa1e 	bl	80004cc <E2V_CLICKS_Ini>
  uint8_t trigger = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t counter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  volatile uint32_t i= 0;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  uint32_t Ticks_To_Wait;

  E2V_CLICKS_Base_Aqu_Output();
 800109c:	f7ff fa72 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if ((CCD_Mode & 0x01) == 1)								//Start aqu
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <main+0xc8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d02a      	beq.n	8001102 <main+0xae>
	  {
//		  if ((CCD_Mode & 0x02) == 0)							//Single
//		  {
			  if ((CCD_Mode & 0x04) == 0)						//no trigger
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <main+0xc8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d109      	bne.n	80010cc <main+0x78>
			  {
	  		  	  E2V_CLICKS_Base_Aqu_Output();
 80010b8:	f7ff fa64 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <main+0xc8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <main+0xc8>)
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e01a      	b.n	8001102 <main+0xae>
			  }
			  else											//trigger
			  {
				  while(1)
				  {
				  trigger=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80010cc:	2101      	movs	r1, #1
 80010ce:	4814      	ldr	r0, [pc, #80]	; (8001120 <main+0xcc>)
 80010d0:	f001 fff0 	bl	80030b4 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
			  	  if (trigger == 1)							//triggered
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <main+0x90>
			  	  	  {
			  		  	  E2V_CLICKS_Base_Aqu_Output();
 80010de:	f7ff fa51 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
			  		  	  break;
 80010e2:	e005      	b.n	80010f0 <main+0x9c>
			  	  	  }
				  if (tcp_recieve) break;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <main+0xd0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d100      	bne.n	80010ee <main+0x9a>
				  trigger=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80010ec:	e7ee      	b.n	80010cc <main+0x78>
				  if (tcp_recieve) break;
 80010ee:	bf00      	nop
				  }
			  	  trigger = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <main+0xc8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <main+0xc8>)
 8001100:	701a      	strb	r2, [r3, #0]
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
			  }
		  }*/
	  }

	  if (tcp_recieve)
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <main+0xd0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0ca      	beq.n	80010a0 <main+0x4c>
		  {
		  TCP_Recieve();
 800110a:	f000 fcc3 	bl	8001a94 <TCP_Recieve>
		  tcp_recieve = 0;
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <main+0xd0>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	  if ((CCD_Mode & 0x01) == 1)								//Start aqu
 8001114:	e7c4      	b.n	80010a0 <main+0x4c>
 8001116:	bf00      	nop
 8001118:	20000088 	.word	0x20000088
 800111c:	20000090 	.word	0x20000090
 8001120:	40020000 	.word	0x40020000
 8001124:	200002a0 	.word	0x200002a0

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 f8cc 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <SystemClock_Config+0xcc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <SystemClock_Config+0xcc>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <SystemClock_Config+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <SystemClock_Config+0xd0>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800119c:	23a8      	movs	r3, #168	; 0xa8
 800119e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a4:	2307      	movs	r3, #7
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 ffd7 	bl	8003160 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b8:	f000 f992 	bl	80014e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2105      	movs	r1, #5
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fa38 	bl	8003650 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e6:	f000 f97b 	bl	80014e0 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	; 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_ADC1_Init+0x98>)
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <MX_ADC1_Init+0x9c>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_ADC1_Init+0x98>)
 8001216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800121a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_ADC1_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_ADC1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_ADC1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_ADC1_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_ADC1_Init+0x98>)
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <MX_ADC1_Init+0xa0>)
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_ADC1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_ADC1_Init+0x98>)
 800124a:	2201      	movs	r2, #1
 800124c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_ADC1_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_ADC1_Init+0x98>)
 8001258:	2201      	movs	r2, #1
 800125a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_ADC1_Init+0x98>)
 800125e:	f001 f887 	bl	8002370 <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 f93a 	bl	80014e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800126c:	230d      	movs	r3, #13
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_ADC1_Init+0x98>)
 800127e:	f001 f8ed 	bl	800245c <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001288:	f000 f92a 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001a0 	.word	0x200001a0
 8001298:	40012000 	.word	0x40012000
 800129c:	0f000001 	.word	0x0f000001

080012a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_SPI1_Init+0x64>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <MX_SPI1_Init+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_SPI1_Init+0x64>)
 80012ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_SPI1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_SPI1_Init+0x64>)
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_SPI1_Init+0x64>)
 80012d4:	2208      	movs	r2, #8
 80012d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_SPI1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_SPI1_Init+0x64>)
 80012ec:	220a      	movs	r2, #10
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_SPI1_Init+0x64>)
 80012f2:	f002 fb99 	bl	8003a28 <HAL_SPI_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012fc:	f000 f8f0 	bl	80014e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001e8 	.word	0x200001e8
 8001308:	40013000 	.word	0x40013000

0800130c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_DMA_Init+0x30>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <MX_DMA_Init+0x30>)
 800131c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_DMA_Init+0x30>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	; 0x30
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <MX_GPIO_Init+0x18c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <MX_GPIO_Init+0x18c>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <MX_GPIO_Init+0x18c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b55      	ldr	r3, [pc, #340]	; (80014cc <MX_GPIO_Init+0x18c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a54      	ldr	r2, [pc, #336]	; (80014cc <MX_GPIO_Init+0x18c>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <MX_GPIO_Init+0x18c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <MX_GPIO_Init+0x18c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <MX_GPIO_Init+0x18c>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a46      	ldr	r2, [pc, #280]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b40      	ldr	r3, [pc, #256]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a3f      	ldr	r2, [pc, #252]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a38      	ldr	r2, [pc, #224]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_GPIO_Init+0x18c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_SCS_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2114      	movs	r1, #20
 8001402:	4833      	ldr	r0, [pc, #204]	; (80014d0 <MX_GPIO_Init+0x190>)
 8001404:	f001 fe6e 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001408:	2200      	movs	r2, #0
 800140a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800140e:	4831      	ldr	r0, [pc, #196]	; (80014d4 <MX_GPIO_Init+0x194>)
 8001410:	f001 fe68 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	482b      	ldr	r0, [pc, #172]	; (80014d8 <MX_GPIO_Init+0x198>)
 800142a:	f001 fca7 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001436:	2302      	movs	r3, #2
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4823      	ldr	r0, [pc, #140]	; (80014d0 <MX_GPIO_Init+0x190>)
 8001442:	f001 fc9b 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin SPI1_SCS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_SCS_Pin;
 8001446:	2314      	movs	r3, #20
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	481c      	ldr	r0, [pc, #112]	; (80014d0 <MX_GPIO_Init+0x190>)
 800145e:	f001 fc8d 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001462:	2308      	movs	r3, #8
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001466:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	2301      	movs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <MX_GPIO_Init+0x190>)
 8001478:	f001 fc80 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <MX_GPIO_Init+0x19c>)
 8001492:	f001 fc73 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <MX_GPIO_Init+0x194>)
 80014b0:	f001 fc64 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2009      	movs	r0, #9
 80014ba:	f001 fac8 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014be:	2009      	movs	r0, #9
 80014c0:	f001 fae1 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	; 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40020400 	.word	0x40020400

080014e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <Error_Handler+0x8>
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_MspInit+0x4c>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800152a:	2007      	movs	r0, #7
 800152c:	f001 fa84 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_ADC_MspInit+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d127      	bne.n	80015ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_ADC_MspInit+0x80>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_ADC_MspInit+0x80>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_ADC_MspInit+0x80>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_ADC_MspInit+0x80>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_ADC_MspInit+0x80>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_ADC_MspInit+0x80>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001596:	2308      	movs	r3, #8
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159a:	2303      	movs	r3, #3
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_ADC_MspInit+0x84>)
 80015aa:	f001 fbe7 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40012000 	.word	0x40012000
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020800 	.word	0x40020800

080015c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a30      	ldr	r2, [pc, #192]	; (80016a4 <HAL_SPI_MspInit+0xe0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d159      	bne.n	800169a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <HAL_SPI_MspInit+0xe4>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a2e      	ldr	r2, [pc, #184]	; (80016a8 <HAL_SPI_MspInit+0xe4>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <HAL_SPI_MspInit+0xe4>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_SPI_MspInit+0xe4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_SPI_MspInit+0xe4>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_SPI_MspInit+0xe4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800161e:	23e0      	movs	r3, #224	; 0xe0
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162e:	2305      	movs	r3, #5
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	481c      	ldr	r0, [pc, #112]	; (80016ac <HAL_SPI_MspInit+0xe8>)
 800163a:	f001 fb9f 	bl	8002d7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001640:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_SPI_MspInit+0xf0>)
 8001642:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001646:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800164a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 800165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001680:	f001 fa1c 	bl	8002abc <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800168a:	f7ff ff29 	bl	80014e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001692:	649a      	str	r2, [r3, #72]	; 0x48
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_SPI_MspInit+0xec>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40013000 	.word	0x40013000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	20000240 	.word	0x20000240
 80016b4:	40026458 	.word	0x40026458

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001704:	f000 fdf0 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001710:	2008      	movs	r0, #8
 8001712:	f001 fd01 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  tcp_recieve = 1;
 8001716:	4b02      	ldr	r3, [pc, #8]	; (8001720 <EXTI3_IRQHandler+0x14>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002a0 	.word	0x200002a0

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <w5500_ini>:

//-----------------------------------------------
//-----------------------------------------------

void w5500_ini(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  uint8_t opcode=0;
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
  //Hard Reset
  HAL_GPIO_WritePin(W5500_RST_GPIO_PORT, W5500_RST_PIN, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2104      	movs	r1, #4
 8001756:	4891      	ldr	r0, [pc, #580]	; (800199c <w5500_ini+0x254>)
 8001758:	f001 fcc4 	bl	80030e4 <HAL_GPIO_WritePin>
  HAL_Delay(70);
 800175c:	2046      	movs	r0, #70	; 0x46
 800175e:	f000 fde3 	bl	8002328 <HAL_Delay>
  HAL_GPIO_WritePin(W5500_RST_GPIO_PORT, W5500_RST_PIN, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	2104      	movs	r1, #4
 8001766:	488d      	ldr	r0, [pc, #564]	; (800199c <w5500_ini+0x254>)
 8001768:	f001 fcbc 	bl	80030e4 <HAL_GPIO_WritePin>
  HAL_Delay(70);
 800176c:	2046      	movs	r0, #70	; 0x46
 800176e:	f000 fddb 	bl	8002328 <HAL_Delay>
  //Soft Reset
  opcode = (BSB_COMMON<<3)|OM_FDM1;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
  w5500_writeReg(opcode, MR, 0x80);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fcd1 	bl	8002124 <w5500_writeReg>
  HAL_Delay(100);
 8001782:	2064      	movs	r0, #100	; 0x64
 8001784:	f000 fdd0 	bl	8002328 <HAL_Delay>
  //Configute Net
  w5500_writeReg(opcode, GAR0,ipgate[0]);
 8001788:	4b85      	ldr	r3, [pc, #532]	; (80019a0 <w5500_ini+0x258>)
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fcc7 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, GAR1,ipgate[1]);
 8001796:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <w5500_ini+0x258>)
 8001798:	785a      	ldrb	r2, [r3, #1]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2102      	movs	r1, #2
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fcc0 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, GAR2,ipgate[2]);
 80017a4:	4b7e      	ldr	r3, [pc, #504]	; (80019a0 <w5500_ini+0x258>)
 80017a6:	789a      	ldrb	r2, [r3, #2]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2103      	movs	r1, #3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fcb9 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, GAR3,ipgate[3]);
 80017b2:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <w5500_ini+0x258>)
 80017b4:	78da      	ldrb	r2, [r3, #3]
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2104      	movs	r1, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fcb2 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR0,ipmask[0]);
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <w5500_ini+0x25c>)
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2105      	movs	r1, #5
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fcab 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR1,ipmask[1]);
 80017ce:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <w5500_ini+0x25c>)
 80017d0:	785a      	ldrb	r2, [r3, #1]
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2106      	movs	r1, #6
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fca4 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR2,ipmask[2]);
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <w5500_ini+0x25c>)
 80017de:	789a      	ldrb	r2, [r3, #2]
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	2107      	movs	r1, #7
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc9d 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR3,ipmask[3]);
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <w5500_ini+0x25c>)
 80017ec:	78da      	ldrb	r2, [r3, #3]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2108      	movs	r1, #8
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fc96 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR0,macaddr[0]);
 80017f8:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <w5500_ini+0x260>)
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2109      	movs	r1, #9
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fc8f 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR1,macaddr[1]);
 8001806:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <w5500_ini+0x260>)
 8001808:	785a      	ldrb	r2, [r3, #1]
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	210a      	movs	r1, #10
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fc88 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR2,macaddr[2]);
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <w5500_ini+0x260>)
 8001816:	789a      	ldrb	r2, [r3, #2]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	210b      	movs	r1, #11
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fc81 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR3,macaddr[3]);
 8001822:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <w5500_ini+0x260>)
 8001824:	78da      	ldrb	r2, [r3, #3]
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	210c      	movs	r1, #12
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fc7a 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR4,macaddr[4]);
 8001830:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <w5500_ini+0x260>)
 8001832:	791a      	ldrb	r2, [r3, #4]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	210d      	movs	r1, #13
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fc73 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR5,macaddr[5]);
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <w5500_ini+0x260>)
 8001840:	795a      	ldrb	r2, [r3, #5]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	210e      	movs	r1, #14
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fc6c 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR0,ipaddr[0]);
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <w5500_ini+0x264>)
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	210f      	movs	r1, #15
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fc65 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR1,ipaddr[1]);
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <w5500_ini+0x264>)
 800185c:	785a      	ldrb	r2, [r3, #1]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2110      	movs	r1, #16
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fc5e 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR2,ipaddr[2]);
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <w5500_ini+0x264>)
 800186a:	789a      	ldrb	r2, [r3, #2]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2111      	movs	r1, #17
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fc57 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR3,ipaddr[3]);
 8001876:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <w5500_ini+0x264>)
 8001878:	78da      	ldrb	r2, [r3, #3]
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2112      	movs	r1, #18
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fc50 	bl	8002124 <w5500_writeReg>
  //Configure Interups
  w5500_writeReg(opcode, INTLEVEL0 ,0x00);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2200      	movs	r2, #0
 8001888:	2113      	movs	r1, #19
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fc4a 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, INTLEVEL1 ,0x00);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2200      	movs	r2, #0
 8001894:	2114      	movs	r1, #20
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fc44 	bl	8002124 <w5500_writeReg>
  w5500_writeReg(opcode, IMR ,0x00);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2200      	movs	r2, #0
 80018a0:	2116      	movs	r1, #22
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc3e 	bl	8002124 <w5500_writeReg>

  w5500_writeReg(opcode, SIMR ,0xff);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	22ff      	movs	r2, #255	; 0xff
 80018ac:	2118      	movs	r1, #24
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fc38 	bl	8002124 <w5500_writeReg>

  w5500_writeReg((BSB_S0<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[0]);
 80018b4:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <w5500_ini+0x268>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	211e      	movs	r1, #30
 80018bc:	2009      	movs	r0, #9
 80018be:	f000 fc31 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S1<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[1]);
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <w5500_ini+0x268>)
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	461a      	mov	r2, r3
 80018c8:	211e      	movs	r1, #30
 80018ca:	2029      	movs	r0, #41	; 0x29
 80018cc:	f000 fc2a 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S2<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[2]);
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <w5500_ini+0x268>)
 80018d2:	789b      	ldrb	r3, [r3, #2]
 80018d4:	461a      	mov	r2, r3
 80018d6:	211e      	movs	r1, #30
 80018d8:	2049      	movs	r0, #73	; 0x49
 80018da:	f000 fc23 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S3<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[3]);
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <w5500_ini+0x268>)
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	461a      	mov	r2, r3
 80018e4:	211e      	movs	r1, #30
 80018e6:	2069      	movs	r0, #105	; 0x69
 80018e8:	f000 fc1c 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S4<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[4]);
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <w5500_ini+0x268>)
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	211e      	movs	r1, #30
 80018f4:	2089      	movs	r0, #137	; 0x89
 80018f6:	f000 fc15 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S5<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[5]);
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <w5500_ini+0x268>)
 80018fc:	795b      	ldrb	r3, [r3, #5]
 80018fe:	461a      	mov	r2, r3
 8001900:	211e      	movs	r1, #30
 8001902:	20a9      	movs	r0, #169	; 0xa9
 8001904:	f000 fc0e 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S6<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[6]);
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <w5500_ini+0x268>)
 800190a:	799b      	ldrb	r3, [r3, #6]
 800190c:	461a      	mov	r2, r3
 800190e:	211e      	movs	r1, #30
 8001910:	20c9      	movs	r0, #201	; 0xc9
 8001912:	f000 fc07 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S7<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[7]);
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <w5500_ini+0x268>)
 8001918:	79db      	ldrb	r3, [r3, #7]
 800191a:	461a      	mov	r2, r3
 800191c:	211e      	movs	r1, #30
 800191e:	20e9      	movs	r0, #233	; 0xe9
 8001920:	f000 fc00 	bl	8002124 <w5500_writeReg>

  w5500_writeReg((BSB_S0<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[0]);
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <w5500_ini+0x26c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	211f      	movs	r1, #31
 800192c:	2009      	movs	r0, #9
 800192e:	f000 fbf9 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S1<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[1]);
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <w5500_ini+0x26c>)
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	461a      	mov	r2, r3
 8001938:	211f      	movs	r1, #31
 800193a:	2029      	movs	r0, #41	; 0x29
 800193c:	f000 fbf2 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S2<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[2]);
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <w5500_ini+0x26c>)
 8001942:	789b      	ldrb	r3, [r3, #2]
 8001944:	461a      	mov	r2, r3
 8001946:	211f      	movs	r1, #31
 8001948:	2049      	movs	r0, #73	; 0x49
 800194a:	f000 fbeb 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S3<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[3]);
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <w5500_ini+0x26c>)
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	461a      	mov	r2, r3
 8001954:	211f      	movs	r1, #31
 8001956:	2069      	movs	r0, #105	; 0x69
 8001958:	f000 fbe4 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S4<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[4]);
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <w5500_ini+0x26c>)
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	461a      	mov	r2, r3
 8001962:	211f      	movs	r1, #31
 8001964:	2089      	movs	r0, #137	; 0x89
 8001966:	f000 fbdd 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S5<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[5]);
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <w5500_ini+0x26c>)
 800196c:	795b      	ldrb	r3, [r3, #5]
 800196e:	461a      	mov	r2, r3
 8001970:	211f      	movs	r1, #31
 8001972:	20a9      	movs	r0, #169	; 0xa9
 8001974:	f000 fbd6 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S6<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[6]);
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <w5500_ini+0x26c>)
 800197a:	799b      	ldrb	r3, [r3, #6]
 800197c:	461a      	mov	r2, r3
 800197e:	211f      	movs	r1, #31
 8001980:	20c9      	movs	r0, #201	; 0xc9
 8001982:	f000 fbcf 	bl	8002124 <w5500_writeReg>
  w5500_writeReg((BSB_S7<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[7]);
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <w5500_ini+0x26c>)
 8001988:	79db      	ldrb	r3, [r3, #7]
 800198a:	461a      	mov	r2, r3
 800198c:	211f      	movs	r1, #31
 800198e:	20e9      	movs	r0, #233	; 0xe9
 8001990:	f000 fbc8 	bl	8002124 <w5500_writeReg>


}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020000 	.word	0x40020000
 80019a0:	20000018 	.word	0x20000018
 80019a4:	2000001c 	.word	0x2000001c
 80019a8:	2000004c 	.word	0x2000004c
 80019ac:	20000014 	.word	0x20000014
 80019b0:	20000028 	.word	0x20000028
 80019b4:	20000030 	.word	0x20000030

080019b8 <w5500_startUDP>:
//-----------------------------------------------

void w5500_startUDP(uint8_t sock_num)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	  uint8_t opcode=0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
	  opcode = BSB_S0+sock_num*4;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
	  opcode = (opcode<<3)|OM_FDM1;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	73fb      	strb	r3, [r7, #15]

	  w5500_writeReg(opcode, Sn_MR, Mode_UDP);
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	2202      	movs	r2, #2
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb9d 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DIPR0,ipaddr_dest[0]);
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <w5500_startUDP+0xd4>)
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	210c      	movs	r1, #12
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fb96 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR1,ipaddr_dest[1]);
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <w5500_startUDP+0xd4>)
 80019fa:	785a      	ldrb	r2, [r3, #1]
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	210d      	movs	r1, #13
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fb8f 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR2,ipaddr_dest[2]);
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <w5500_startUDP+0xd4>)
 8001a08:	789a      	ldrb	r2, [r3, #2]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	210e      	movs	r1, #14
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fb88 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR3,ipaddr_dest[3]);
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <w5500_startUDP+0xd4>)
 8001a16:	78da      	ldrb	r2, [r3, #3]
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fb81 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_PORT0,local_port>>8);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <w5500_startUDP+0xd8>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fb77 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_PORT1,local_port);
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <w5500_startUDP+0xd8>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2105      	movs	r1, #5
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fb6f 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DPORT0,local_port>>8);
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <w5500_startUDP+0xd8>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2110      	movs	r1, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fb65 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DPORT1,local_port);
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <w5500_startUDP+0xd8>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2111      	movs	r1, #17
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fb5d 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IMR,0x00);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fb57 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fb51 	bl	8002124 <w5500_writeReg>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000024 	.word	0x20000024
 8001a90:	20000020 	.word	0x20000020

08001a94 <TCP_Recieve>:

void TCP_Recieve()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0c2      	sub	sp, #264	; 0x108
 8001a98:	af00      	add	r7, sp, #0
	uint8_t buffer_TCP[256];
	uint8_t sock_num = tcp_Socket;
 8001a9a:	4bce      	ldr	r3, [pc, #824]	; (8001dd4 <TCP_Recieve+0x340>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  uint8_t opcode=0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = BSB_S0+sock_num*4;
 8001aa8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = (opcode<<3)|OM_FDM1;
 8001ab6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	uint8_t R0 = w5500_readReg(opcode,Sn_RX_RSR0);
 8001ac8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001acc:	2126      	movs	r1, #38	; 0x26
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fb5a 	bl	8002188 <w5500_readReg>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	uint8_t R1 = w5500_readReg(opcode,Sn_RX_RSR1);
 8001ada:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001ade:	2127      	movs	r1, #39	; 0x27
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fb51 	bl	8002188 <w5500_readReg>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint16_t len = (R0<<8)|(R1);
 8001aec:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102

	R0 = w5500_readReg(opcode,Sn_RX_RD0);
 8001b02:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001b06:	2128      	movs	r1, #40	; 0x28
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fb3d 	bl	8002188 <w5500_readReg>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	R1 = w5500_readReg(opcode,Sn_RX_RD1);
 8001b14:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001b18:	2129      	movs	r1, #41	; 0x29
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fb34 	bl	8002188 <w5500_readReg>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint16_t addr = (R0<<8)|(R1);
 8001b26:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

	opcode = BSB_S0_RX+sock_num*4;
 8001b3c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3303      	adds	r3, #3
 8001b46:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	opcode = (opcode<<3)|OM_FDM0;
 8001b4a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	w5500_read_Buff(opcode,addr,buffer_TCP,len);
 8001b54:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001b58:	463a      	mov	r2, r7
 8001b5a:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8001b5e:	f897 0106 	ldrb.w	r0, [r7, #262]	; 0x106
 8001b62:	f000 faa5 	bl	80020b0 <w5500_read_Buff>

	OR_Clock_period = buffer_TCP[5];
 8001b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b6e:	795b      	ldrb	r3, [r3, #5]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b99      	ldr	r3, [pc, #612]	; (8001dd8 <TCP_Recieve+0x344>)
 8001b74:	601a      	str	r2, [r3, #0]

	mS_To_Wait = buffer_TCP[8] + 256 * buffer_TCP[7] + 256*256*buffer_TCP[6];
 8001b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b7e:	7a1b      	ldrb	r3, [r3, #8]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b8a:	79db      	ldrb	r3, [r3, #7]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	441a      	add	r2, r3
 8001b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b98:	799b      	ldrb	r3, [r3, #6]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	4413      	add	r3, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <TCP_Recieve+0x348>)
 8001ba2:	601a      	str	r2, [r3, #0]
    CCD_Mode = buffer_TCP[9];
 8001ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bac:	7a5a      	ldrb	r2, [r3, #9]
 8001bae:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <TCP_Recieve+0x34c>)
 8001bb0:	701a      	strb	r2, [r3, #0]
    CCD_Brust_N = buffer_TCP[11] + 256 * buffer_TCP[10];
 8001bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bba:	7adb      	ldrb	r3, [r3, #11]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bc6:	7a9b      	ldrb	r3, [r3, #10]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	4413      	add	r3, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b85      	ldr	r3, [pc, #532]	; (8001de4 <TCP_Recieve+0x350>)
 8001bd0:	601a      	str	r2, [r3, #0]
    CCD_Brust_Delay = buffer_TCP[14] + 256 * buffer_TCP[13] + 256 * 256 * buffer_TCP[12];
 8001bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bda:	7b9b      	ldrb	r3, [r3, #14]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001be6:	7b5b      	ldrb	r3, [r3, #13]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	441a      	add	r2, r3
 8001bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bf4:	7b1b      	ldrb	r3, [r3, #12]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	4413      	add	r3, r2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b7a      	ldr	r3, [pc, #488]	; (8001de8 <TCP_Recieve+0x354>)
 8001bfe:	601a      	str	r2, [r3, #0]

    buffer_TCP[0] = 3;
 8001c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c08:	2203      	movs	r2, #3
 8001c0a:	701a      	strb	r2, [r3, #0]
    buffer_TCP[1] = 14;
 8001c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c14:	220e      	movs	r2, #14
 8001c16:	705a      	strb	r2, [r3, #1]
    buffer_TCP[2] = 15;
 8001c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c20:	220f      	movs	r2, #15
 8001c22:	709a      	strb	r2, [r3, #2]
    buffer_TCP[3] = 92;
 8001c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c2c:	225c      	movs	r2, #92	; 0x5c
 8001c2e:	70da      	strb	r2, [r3, #3]
    buffer_TCP[4] = 65;
 8001c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c38:	2241      	movs	r2, #65	; 0x41
 8001c3a:	711a      	strb	r2, [r3, #4]
    buffer_TCP[5] = (uint8_t)(OR_Clock_period & 0xFF);
 8001c3c:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <TCP_Recieve+0x344>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c4a:	715a      	strb	r2, [r3, #5]
    buffer_TCP[6] = (uint8_t)((mS_To_Wait & 0xFF0000) >> 16);
 8001c4c:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <TCP_Recieve+0x348>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c5c:	719a      	strb	r2, [r3, #6]
    buffer_TCP[7] = (uint8_t)((mS_To_Wait & 0x00FF00) >> 8);
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <TCP_Recieve+0x348>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c6e:	71da      	strb	r2, [r3, #7]
    buffer_TCP[8] = (uint8_t)(mS_To_Wait & 0x0000FF);
 8001c70:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <TCP_Recieve+0x348>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c7e:	721a      	strb	r2, [r3, #8]
    buffer_TCP[9] = (uint8_t)(CCD_Mode & 0xFF);
 8001c80:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <TCP_Recieve+0x34c>)
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c8c:	725a      	strb	r2, [r3, #9]
    buffer_TCP[10] = (uint8_t)((CCD_Brust_N & 0x00FF00) >> 8);
 8001c8e:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <TCP_Recieve+0x350>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c9e:	729a      	strb	r2, [r3, #10]
    buffer_TCP[11] = (uint8_t)(CCD_Brust_N & 0x0000FF);
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <TCP_Recieve+0x350>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cae:	72da      	strb	r2, [r3, #11]
    buffer_TCP[12] = (uint8_t)((CCD_Brust_Delay & 0xFF0000) >> 16);
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <TCP_Recieve+0x354>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cc0:	731a      	strb	r2, [r3, #12]
    buffer_TCP[13] = (uint8_t)((CCD_Brust_Delay & 0x00FF00) >> 8);
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <TCP_Recieve+0x354>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cd2:	735a      	strb	r2, [r3, #13]
    buffer_TCP[14] = (uint8_t)(CCD_Brust_Delay & 0x0000FF);
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <TCP_Recieve+0x354>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ce2:	739a      	strb	r2, [r3, #14]

    buffer_TCP[15] = (uint8_t)((number_Of_Lines & 0x00FF00) >> 8);
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <TCP_Recieve+0x358>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cf4:	73da      	strb	r2, [r3, #15]
    buffer_TCP[16] = (uint8_t)(number_Of_Lines & 0x0000FF);
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <TCP_Recieve+0x358>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d04:	741a      	strb	r2, [r3, #16]
    buffer_TCP[17] = (uint8_t)((number_Of_Rows & 0x00FF00) >> 8);
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <TCP_Recieve+0x35c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d16:	745a      	strb	r2, [r3, #17]
    buffer_TCP[18] = (uint8_t)(number_Of_Rows & 0x0000FF);
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <TCP_Recieve+0x35c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d26:	749a      	strb	r2, [r3, #18]
    buffer_TCP[19] = (uint8_t)(2 & 0x0000FF);
 8001d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d30:	2202      	movs	r2, #2
 8001d32:	74da      	strb	r2, [r3, #19]

    buffer_TCP[20] = (uint8_t)CCD_Name[0];
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <TCP_Recieve+0x360>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d40:	751a      	strb	r2, [r3, #20]
    buffer_TCP[21] = (uint8_t)CCD_Name[1];
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <TCP_Recieve+0x360>)
 8001d44:	785a      	ldrb	r2, [r3, #1]
 8001d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d4e:	755a      	strb	r2, [r3, #21]
    buffer_TCP[22] = (uint8_t)CCD_Name[2];
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <TCP_Recieve+0x360>)
 8001d52:	789a      	ldrb	r2, [r3, #2]
 8001d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d5c:	759a      	strb	r2, [r3, #22]
    buffer_TCP[23] = (uint8_t)CCD_Name[3];
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <TCP_Recieve+0x360>)
 8001d60:	78da      	ldrb	r2, [r3, #3]
 8001d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d6a:	75da      	strb	r2, [r3, #23]
    buffer_TCP[24] = (uint8_t)CCD_Name[4];
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <TCP_Recieve+0x360>)
 8001d6e:	791a      	ldrb	r2, [r3, #4]
 8001d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d78:	761a      	strb	r2, [r3, #24]
    buffer_TCP[25] = (uint8_t)CCD_Name[5];
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <TCP_Recieve+0x360>)
 8001d7c:	795a      	ldrb	r2, [r3, #5]
 8001d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d86:	765a      	strb	r2, [r3, #25]
    buffer_TCP[26] = (uint8_t)CCD_Name[6];
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <TCP_Recieve+0x360>)
 8001d8a:	799a      	ldrb	r2, [r3, #6]
 8001d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d94:	769a      	strb	r2, [r3, #26]
    buffer_TCP[27] = (uint8_t)CCD_Name[7];
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <TCP_Recieve+0x360>)
 8001d98:	79da      	ldrb	r2, [r3, #7]
 8001d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001da2:	76da      	strb	r2, [r3, #27]
    buffer_TCP[28] = (uint8_t)CCD_Name[8];
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <TCP_Recieve+0x360>)
 8001da6:	7a1a      	ldrb	r2, [r3, #8]
 8001da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001db0:	771a      	strb	r2, [r3, #28]
    buffer_TCP[29] = (uint8_t)CCD_Name[9];
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <TCP_Recieve+0x360>)
 8001db4:	7a5a      	ldrb	r2, [r3, #9]
 8001db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dbe:	775a      	strb	r2, [r3, #29]
    buffer_TCP[30] = (uint8_t)CCD_Name[10];
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <TCP_Recieve+0x360>)
 8001dc2:	7a9a      	ldrb	r2, [r3, #10]
 8001dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dcc:	779a      	strb	r2, [r3, #30]
    buffer_TCP[31] = (uint8_t)CCD_Name[11];
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <TCP_Recieve+0x360>)
 8001dd0:	7ada      	ldrb	r2, [r3, #11]
 8001dd2:	e011      	b.n	8001df8 <TCP_Recieve+0x364>
 8001dd4:	20000045 	.word	0x20000045
 8001dd8:	20000088 	.word	0x20000088
 8001ddc:	2000008c 	.word	0x2000008c
 8001de0:	20000090 	.word	0x20000090
 8001de4:	20000094 	.word	0x20000094
 8001de8:	20000098 	.word	0x20000098
 8001dec:	20000080 	.word	0x20000080
 8001df0:	20000084 	.word	0x20000084
 8001df4:	20000038 	.word	0x20000038
 8001df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e00:	77da      	strb	r2, [r3, #31]

    w5500_write_Tx_Buff(sock_num, buffer_TCP, 32);
 8001e02:	4639      	mov	r1, r7
 8001e04:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001e08:	2220      	movs	r2, #32
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f8b6 	bl	8001f7c <w5500_write_Tx_Buff>

	  opcode = BSB_S0+sock_num*4;
 8001e10:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = (opcode<<3)|OM_FDM1;
 8001e1e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  w5500_writeReg(opcode, Sn_CR, CR_SEND);
 8001e30:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e34:	2220      	movs	r2, #32
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f973 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IR, 0x04);
 8001e3e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e42:	2204      	movs	r2, #4
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f96c 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_DISCON);
 8001e4c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e50:	2208      	movs	r2, #8
 8001e52:	2101      	movs	r1, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f965 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_CLOSE);
 8001e5a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e5e:	2210      	movs	r2, #16
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f95e 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001e68:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f957 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_LISTEN);
 8001e76:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f950 	bl	8002124 <w5500_writeReg>

}
 8001e84:	bf00      	nop
 8001e86:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop

08001e90 <w5500_startTCP>:
void w5500_startTCP()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
	  uint8_t sock_num = tcp_Socket;
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <w5500_startTCP+0xe0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
	  uint8_t opcode=0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	71bb      	strb	r3, [r7, #6]
	  opcode = BSB_S0+sock_num*4;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	71bb      	strb	r3, [r7, #6]
	  opcode = (opcode<<3)|OM_FDM1;
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	71bb      	strb	r3, [r7, #6]

	  w5500_writeReg(opcode, Sn_MR, Mode_TCP);
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f930 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DIPR0,ipaddr_dest[0]);
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <w5500_startTCP+0xe4>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	210c      	movs	r1, #12
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f929 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR1,ipaddr_dest[1]);
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <w5500_startTCP+0xe4>)
 8001ed4:	785a      	ldrb	r2, [r3, #1]
 8001ed6:	79bb      	ldrb	r3, [r7, #6]
 8001ed8:	210d      	movs	r1, #13
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f922 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR2,ipaddr_dest[2]);
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <w5500_startTCP+0xe4>)
 8001ee2:	789a      	ldrb	r2, [r3, #2]
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	210e      	movs	r1, #14
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f91b 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR3,ipaddr_dest[3]);
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <w5500_startTCP+0xe4>)
 8001ef0:	78da      	ldrb	r2, [r3, #3]
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f914 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_PORT0,tcp_port>>8);
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <w5500_startTCP+0xe8>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f90a 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_PORT1,tcp_port);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <w5500_startTCP+0xe8>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	2105      	movs	r1, #5
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f902 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DPORT0,tcp_port>>8);
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <w5500_startTCP+0xe8>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f8f8 	bl	8002124 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DPORT1,tcp_port);
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <w5500_startTCP+0xe8>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	2111      	movs	r1, #17
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f8f0 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IMR,0x04);
 8001f44:	79bb      	ldrb	r3, [r7, #6]
 8001f46:	2204      	movs	r2, #4
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f8ea 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	2201      	movs	r2, #1
 8001f54:	2101      	movs	r1, #1
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f8e4 	bl	8002124 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_LISTEN);
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	2101      	movs	r1, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f8de 	bl	8002124 <w5500_writeReg>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000045 	.word	0x20000045
 8001f74:	20000024 	.word	0x20000024
 8001f78:	20000022 	.word	0x20000022

08001f7c <w5500_write_Tx_Buff>:
	w5500_writeReg(opcode,Sn_CR, CR_SEND);
}

//-----------------------------------------------
void w5500_write_Tx_Buff (uint8_t sock_num, uint8_t *buff, uint16_t len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80bb      	strh	r3, [r7, #4]
	uint8_t opcode=0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
	opcode = BSB_S0+sock_num*4;
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM1;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	73fb      	strb	r3, [r7, #15]

	uint8_t txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2124      	movs	r1, #36	; 0x24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f8eb 	bl	8002188 <w5500_readReg>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73bb      	strb	r3, [r7, #14]
	uint8_t txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2125      	movs	r1, #37	; 0x25
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f8e4 	bl	8002188 <w5500_readReg>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	737b      	strb	r3, [r7, #13]
	uint16_t addr = (txWr0<<8)|(txWr1);
 8001fc4:	7bbb      	ldrb	r3, [r7, #14]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	7b7b      	ldrb	r3, [r7, #13]
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	817b      	strh	r3, [r7, #10]

	opcode = BSB_S0_TX+sock_num*4;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3302      	adds	r3, #2
 8001fdc:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM0;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	73fb      	strb	r3, [r7, #15]

	w5500_write_Buff(opcode,addr,buff,len);
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	8979      	ldrh	r1, [r7, #10]
 8001fe8:	7bf8      	ldrb	r0, [r7, #15]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	f000 f826 	bl	800203c <w5500_write_Buff>

	addr += len;
 8001ff0:	897a      	ldrh	r2, [r7, #10]
 8001ff2:	88bb      	ldrh	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	817b      	strh	r3, [r7, #10]

	opcode = BSB_S0+sock_num*4;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM1;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	b25b      	sxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b25b      	sxtb	r3, r3
 800200e:	73fb      	strb	r3, [r7, #15]

	txWr0 = (addr&0xFF00)>>8;
 8002010:	897b      	ldrh	r3, [r7, #10]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	b29b      	uxth	r3, r3
 8002016:	73bb      	strb	r3, [r7, #14]
	txWr1 = (addr&0x00FF);
 8002018:	897b      	ldrh	r3, [r7, #10]
 800201a:	737b      	strb	r3, [r7, #13]
	w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 800201c:	7bba      	ldrb	r2, [r7, #14]
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2124      	movs	r1, #36	; 0x24
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f87e 	bl	8002124 <w5500_writeReg>
	w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8002028:	7b7a      	ldrb	r2, [r7, #13]
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2125      	movs	r1, #37	; 0x25
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f878 	bl	8002124 <w5500_writeReg>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <w5500_write_Buff>:
//-----------------------------------------------
void w5500_write_Buff (uint8_t op, uint16_t addres, uint8_t* data, uint16_t len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	460b      	mov	r3, r1
 800204c:	81bb      	strh	r3, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
	  uint8_t buf[3] = {addres >> 8, addres, op|(RWB_WRITE<<2)};
 8002052:	89bb      	ldrh	r3, [r7, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	b29b      	uxth	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	753b      	strb	r3, [r7, #20]
 800205c:	89bb      	ldrh	r3, [r7, #12]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	757b      	strb	r3, [r7, #21]
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	b2db      	uxtb	r3, r3
 800206a:	75bb      	strb	r3, [r7, #22]

	  W5500_SS_SELECT();
 800206c:	2200      	movs	r2, #0
 800206e:	2110      	movs	r1, #16
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <w5500_write_Buff+0x6c>)
 8002072:	f001 f837 	bl	80030e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);
 8002076:	f107 0114 	add.w	r1, r7, #20
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	2203      	movs	r2, #3
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <w5500_write_Buff+0x70>)
 8002082:	f001 fd5a 	bl	8003b3a <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, data, len, 0xFFFFFFFF);
 8002086:	88fa      	ldrh	r2, [r7, #6]
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <w5500_write_Buff+0x70>)
 8002090:	f001 fd53 	bl	8003b3a <HAL_SPI_Transmit>
	  W5500_SS_DESELECT();
 8002094:	2201      	movs	r2, #1
 8002096:	2110      	movs	r1, #16
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <w5500_write_Buff+0x6c>)
 800209a:	f001 f823 	bl	80030e4 <HAL_GPIO_WritePin>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40020000 	.word	0x40020000
 80020ac:	200001e8 	.word	0x200001e8

080020b0 <w5500_read_Buff>:
//-----------------------------------------------
void w5500_read_Buff (uint8_t op, uint16_t addres, uint8_t* data, uint16_t len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60ba      	str	r2, [r7, #8]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	460b      	mov	r3, r1
 80020c0:	81bb      	strh	r3, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80fb      	strh	r3, [r7, #6]
	  uint8_t buf[] = {addres >> 8, addres, op|(RWB_READ<<2)};
 80020c6:	89bb      	ldrh	r3, [r7, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	753b      	strb	r3, [r7, #20]
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	757b      	strb	r3, [r7, #21]
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	75bb      	strb	r3, [r7, #22]
	  uint8_t wbuf[4];

	  W5500_SS_SELECT();
 80020da:	2200      	movs	r2, #0
 80020dc:	2110      	movs	r1, #16
 80020de:	480f      	ldr	r0, [pc, #60]	; (800211c <w5500_read_Buff+0x6c>)
 80020e0:	f001 f800 	bl	80030e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);
 80020e4:	f107 0114 	add.w	r1, r7, #20
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ec:	2203      	movs	r2, #3
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <w5500_read_Buff+0x70>)
 80020f0:	f001 fd23 	bl	8003b3a <HAL_SPI_Transmit>
	  HAL_SPI_TransmitReceive(&hspi1, wbuf, data, len, 0xFFFFFFFF);
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	f107 0110 	add.w	r1, r7, #16
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <w5500_read_Buff+0x70>)
 8002104:	f001 fe55 	bl	8003db2 <HAL_SPI_TransmitReceive>
	  W5500_SS_DESELECT();
 8002108:	2201      	movs	r2, #1
 800210a:	2110      	movs	r1, #16
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <w5500_read_Buff+0x6c>)
 800210e:	f000 ffe9 	bl	80030e4 <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020000 	.word	0x40020000
 8002120:	200001e8 	.word	0x200001e8

08002124 <w5500_writeReg>:
//-----------------------------------------------

void w5500_writeReg(uint8_t op, uint16_t addres, uint8_t data)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
 800212e:	460b      	mov	r3, r1
 8002130:	80bb      	strh	r3, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[] = {addres >> 8, addres, op|(RWB_WRITE<<2), data};
 8002136:	88bb      	ldrh	r3, [r7, #4]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	b29b      	uxth	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	733b      	strb	r3, [r7, #12]
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	737b      	strb	r3, [r7, #13]
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	b2db      	uxtb	r3, r3
 800214e:	73bb      	strb	r3, [r7, #14]
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	73fb      	strb	r3, [r7, #15]
  W5500_SS_SELECT();
 8002154:	2200      	movs	r2, #0
 8002156:	2110      	movs	r1, #16
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <w5500_writeReg+0x5c>)
 800215a:	f000 ffc3 	bl	80030e4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buf, 4, 0xFFFFFFFF);
 800215e:	f107 010c 	add.w	r1, r7, #12
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	2204      	movs	r2, #4
 8002168:	4806      	ldr	r0, [pc, #24]	; (8002184 <w5500_writeReg+0x60>)
 800216a:	f001 fce6 	bl	8003b3a <HAL_SPI_Transmit>
  W5500_SS_DESELECT();
 800216e:	2201      	movs	r2, #1
 8002170:	2110      	movs	r1, #16
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <w5500_writeReg+0x5c>)
 8002174:	f000 ffb6 	bl	80030e4 <HAL_GPIO_WritePin>
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40020000 	.word	0x40020000
 8002184:	200001e8 	.word	0x200001e8

08002188 <w5500_readReg>:

//-----------------------------------------------
uint8_t w5500_readReg(uint8_t op, uint16_t addres)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	80bb      	strh	r3, [r7, #4]
  uint8_t data;
  uint8_t wbuf[] = {addres >> 8, addres, op, 0x0};
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	743b      	strb	r3, [r7, #16]
 80021a2:	88bb      	ldrh	r3, [r7, #4]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	747b      	strb	r3, [r7, #17]
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	74bb      	strb	r3, [r7, #18]
 80021ac:	2300      	movs	r3, #0
 80021ae:	74fb      	strb	r3, [r7, #19]
  uint8_t rbuf[4];
  W5500_SS_SELECT();
 80021b0:	2200      	movs	r2, #0
 80021b2:	2110      	movs	r1, #16
 80021b4:	480c      	ldr	r0, [pc, #48]	; (80021e8 <w5500_readReg+0x60>)
 80021b6:	f000 ff95 	bl	80030e4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, wbuf, rbuf, 4, 0xFFFFFFFF);
 80021ba:	f107 020c 	add.w	r2, r7, #12
 80021be:	f107 0110 	add.w	r1, r7, #16
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2304      	movs	r3, #4
 80021ca:	4808      	ldr	r0, [pc, #32]	; (80021ec <w5500_readReg+0x64>)
 80021cc:	f001 fdf1 	bl	8003db2 <HAL_SPI_TransmitReceive>
  W5500_SS_DESELECT();
 80021d0:	2201      	movs	r2, #1
 80021d2:	2110      	movs	r1, #16
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <w5500_readReg+0x60>)
 80021d6:	f000 ff85 	bl	80030e4 <HAL_GPIO_WritePin>
  data = rbuf[3];
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	75fb      	strb	r3, [r7, #23]
  return data;
 80021de:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020000 	.word	0x40020000
 80021ec:	200001e8 	.word	0x200001e8

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021f6:	490e      	ldr	r1, [pc, #56]	; (8002230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021f8:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021fc:	e002      	b.n	8002204 <LoopCopyDataInit>

080021fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002202:	3304      	adds	r3, #4

08002204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002208:	d3f9      	bcc.n	80021fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800220c:	4c0b      	ldr	r4, [pc, #44]	; (800223c <LoopFillZerobss+0x26>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002210:	e001      	b.n	8002216 <LoopFillZerobss>

08002212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002214:	3204      	adds	r2, #4

08002216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002218:	d3fb      	bcc.n	8002212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800221a:	f7ff fa83 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221e:	f002 f835 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7fe ff17 	bl	8001054 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002234:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8002238:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800223c:	200002a8 	.word	0x200002a8

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 fbe3 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff f938 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fbfb 	bl	8002aa2 <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 fbc3 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000048 	.word	0x20000048
 80022e0:	20000058 	.word	0x20000058
 80022e4:	20000054 	.word	0x20000054

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000058 	.word	0x20000058
 800230c:	200002a4 	.word	0x200002a4

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200002a4 	.word	0x200002a4

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000058 	.word	0x20000058

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e033      	b.n	80023ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff f8d4 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b6:	f023 0302 	bic.w	r3, r3, #2
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f96c 	bl	80026a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	e001      	b.n	80023e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_Stop+0x16>
 8002408:	2302      	movs	r3, #2
 800240a:	e021      	b.n	8002450 <HAL_ADC_Stop+0x5a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c>
 8002474:	2302      	movs	r3, #2
 8002476:	e105      	b.n	8002684 <HAL_ADC_ConfigChannel+0x228>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b09      	cmp	r3, #9
 8002486:	d925      	bls.n	80024d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68d9      	ldr	r1, [r3, #12]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	2207      	movs	r2, #7
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43da      	mvns	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	400a      	ands	r2, r1
 80024ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68d9      	ldr	r1, [r3, #12]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4403      	add	r3, r0
 80024c6:	3b1e      	subs	r3, #30
 80024c8:	409a      	lsls	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e022      	b.n	800251a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	2207      	movs	r2, #7
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	4603      	mov	r3, r0
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4403      	add	r3, r0
 8002510:	409a      	lsls	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b06      	cmp	r3, #6
 8002520:	d824      	bhi.n	800256c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b05      	subs	r3, #5
 8002534:	221f      	movs	r2, #31
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	400a      	ands	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b05      	subs	r3, #5
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
 800256a:	e04c      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	d824      	bhi.n	80025be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	3b23      	subs	r3, #35	; 0x23
 8002586:	221f      	movs	r2, #31
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43da      	mvns	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	400a      	ands	r2, r1
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b23      	subs	r3, #35	; 0x23
 80025b0:	fa00 f203 	lsl.w	r2, r0, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
 80025bc:	e023      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b41      	subs	r3, #65	; 0x41
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b41      	subs	r3, #65	; 0x41
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_ADC_ConfigChannel+0x234>)
 8002608:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_ADC_ConfigChannel+0x238>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d109      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d105      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	; (8002694 <HAL_ADC_ConfigChannel+0x238>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d123      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d003      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x1e6>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b11      	cmp	r3, #17
 8002640:	d11b      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b10      	cmp	r3, #16
 8002654:	d111      	bne.n	800267a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_ADC_ConfigChannel+0x23c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_ADC_ConfigChannel+0x240>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9a      	lsrs	r2, r3, #18
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800266c:	e002      	b.n	8002674 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3b01      	subs	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40012300 	.word	0x40012300
 8002694:	40012000 	.word	0x40012000
 8002698:	20000048 	.word	0x20000048
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <ADC_Init+0x1f0>)
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	021a      	lsls	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	4a58      	ldr	r2, [pc, #352]	; (8002894 <ADC_Init+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d022      	beq.n	800277e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e00f      	b.n	800279e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800278c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800279c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0202 	bic.w	r2, r2, #2
 80027ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7e1b      	ldrb	r3, [r3, #24]
 80027b8:	005a      	lsls	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	3b01      	subs	r3, #1
 80027f8:	035a      	lsls	r2, r3, #13
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	e007      	b.n	8002814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002812:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	3b01      	subs	r3, #1
 8002830:	051a      	lsls	r2, r3, #20
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002856:	025a      	lsls	r2, r3, #9
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	029a      	lsls	r2, r3, #10
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40012300 	.word	0x40012300
 8002894:	0f000001 	.word	0x0f000001

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fc22 	bl	8002310 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e099      	b.n	8002c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afa:	f7ff fc09 	bl	8002310 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d908      	bls.n	8002b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e078      	b.n	8002c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e8      	bne.n	8002afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_DMA_Init+0x158>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d117      	bne.n	8002bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f85f 	bl	8002c84 <DMA_CheckFifoParam>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e016      	b.n	8002c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f816 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	223f      	movs	r2, #63	; 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	f010803f 	.word	0xf010803f

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b10      	subs	r3, #16
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d909      	bls.n	8002c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
 8002c58:	e007      	b.n	8002c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	aaaaaaab 	.word	0xaaaaaaab
 8002c80:	08004310 	.word	0x08004310

08002c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d856      	bhi.n	8002d52 <DMA_CheckFifoParam+0xce>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x28>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002d53 	.word	0x08002d53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d046      	beq.n	8002d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e043      	b.n	8002d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d140      	bne.n	8002d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cdc:	e03d      	b.n	8002d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d121      	bne.n	8002d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d837      	bhi.n	8002d5e <DMA_CheckFifoParam+0xda>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x70>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0b 	.word	0x08002d0b
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d1d 	.word	0x08002d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e030      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d025      	beq.n	8002d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e022      	b.n	8002d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d24:	d11f      	bne.n	8002d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2a:	e01c      	b.n	8002d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d903      	bls.n	8002d3a <DMA_CheckFifoParam+0xb6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d38:	e018      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3e:	e015      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e00b      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d52:	bf00      	nop
 8002d54:	e00a      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e008      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e006      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e16b      	b.n	8003070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 815a 	bne.w	800306a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d005      	beq.n	8002dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d130      	bne.n	8002e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d017      	beq.n	8002e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d123      	bne.n	8002ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80b4 	beq.w	800306a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b60      	ldr	r3, [pc, #384]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_GPIO_Init+0x30c>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	; (800308c <HAL_GPIO_Init+0x310>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_GPIO_Init+0x314>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a51      	ldr	r2, [pc, #324]	; (8003094 <HAL_GPIO_Init+0x318>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d025      	beq.n	8002f9e <HAL_GPIO_Init+0x222>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a50      	ldr	r2, [pc, #320]	; (8003098 <HAL_GPIO_Init+0x31c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <HAL_GPIO_Init+0x21e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4f      	ldr	r2, [pc, #316]	; (800309c <HAL_GPIO_Init+0x320>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x216>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x212>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <HAL_GPIO_Init+0x32c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4b      	ldr	r2, [pc, #300]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x20a>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f86:	2308      	movs	r3, #8
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x228>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x310>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003016:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_GPIO_Init+0x334>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003064:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f ae90 	bls.w	8002d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40021400 	.word	0x40021400
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40021c00 	.word	0x40021c00
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e001      	b.n	80030d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003100:	e003      	b.n	800310a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	041a      	lsls	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	619a      	str	r2, [r3, #24]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f806 	bl	8003148 <HAL_GPIO_EXTI_Callback>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e267      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d075      	beq.n	800326a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003192:	2b08      	cmp	r3, #8
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b7e      	ldr	r3, [pc, #504]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x108>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e242      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x74>
 80031c6:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a75      	ldr	r2, [pc, #468]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x98>
 80031de:	4b70      	ldr	r3, [pc, #448]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6f      	ldr	r2, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b6d      	ldr	r3, [pc, #436]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6c      	ldr	r2, [pc, #432]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031f8:	4b69      	ldr	r3, [pc, #420]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a68      	ldr	r2, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a65      	ldr	r2, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7ff f87a 	bl	8002310 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7ff f876 	bl	8002310 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e207      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xc0>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7ff f866 	bl	8002310 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7ff f862 	bl	8002310 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1f3      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0xe8>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1c7      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4937      	ldr	r1, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	e03a      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_OscConfig+0x244>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7ff f81b 	bl	8002310 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032de:	f7ff f817 	bl	8002310 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1a8      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4925      	ldr	r1, [pc, #148]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_RCC_OscConfig+0x244>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fffa 	bl	8002310 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe fff6 	bl	8002310 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e187      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d036      	beq.n	80033b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_RCC_OscConfig+0x248>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe ffda 	bl	8002310 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe ffd6 	bl	8002310 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e167      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x240>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x200>
 800337e:	e01b      	b.n	80033b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_OscConfig+0x248>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe ffc3 	bl	8002310 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	e00e      	b.n	80033ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338e:	f7fe ffbf 	bl	8002310 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d907      	bls.n	80033ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e150      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470000 	.word	0x42470000
 80033a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ea      	bne.n	800338e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8097 	beq.w	80034f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a7c      	ldr	r2, [pc, #496]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b7a      	ldr	r3, [pc, #488]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <HAL_RCC_OscConfig+0x474>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003402:	4b74      	ldr	r3, [pc, #464]	; (80035d4 <HAL_RCC_OscConfig+0x474>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a73      	ldr	r2, [pc, #460]	; (80035d4 <HAL_RCC_OscConfig+0x474>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7fe ff7f 	bl	8002310 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fe ff7b 	bl	8002310 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e10c      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x474>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x2ea>
 800343c:	4b64      	ldr	r3, [pc, #400]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a63      	ldr	r2, [pc, #396]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	e01c      	b.n	8003484 <HAL_RCC_OscConfig+0x324>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x30c>
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a5e      	ldr	r2, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
 800345e:	4b5c      	ldr	r3, [pc, #368]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a5b      	ldr	r2, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0x324>
 800346c:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	4b55      	ldr	r3, [pc, #340]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a54      	ldr	r2, [pc, #336]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fe ff40 	bl	8002310 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe ff3c 	bl	8002310 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0cb      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_RCC_OscConfig+0x334>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fe ff2a 	bl	8002310 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe ff26 	bl	8002310 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0b5      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	4b3e      	ldr	r3, [pc, #248]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ee      	bne.n	80034c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	4a38      	ldr	r2, [pc, #224]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80a1 	beq.w	8003640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d05c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d141      	bne.n	8003596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe fefa 	bl	8002310 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fef6 	bl	8002310 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e087      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	491b      	ldr	r1, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x478>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fecf 	bl	8002310 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fecb 	bl	8002310 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e05c      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x416>
 8003594:	e054      	b.n	8003640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_OscConfig+0x478>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe feb8 	bl	8002310 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe feb4 	bl	8002310 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e045      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_OscConfig+0x470>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x444>
 80035c2:	e03d      	b.n	8003640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e038      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x4ec>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d028      	beq.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d121      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d11a      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	4293      	cmp	r3, r2
 8003616:	d111      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	3b01      	subs	r3, #1
 8003626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800

08003650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0cc      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b68      	ldr	r3, [pc, #416]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d90c      	bls.n	800368c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b63      	ldr	r3, [pc, #396]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0b8      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a58      	ldr	r2, [pc, #352]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a52      	ldr	r2, [pc, #328]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	494d      	ldr	r1, [pc, #308]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d044      	beq.n	8003770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d119      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e07f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370a:	2b03      	cmp	r3, #3
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370e:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e067      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4934      	ldr	r1, [pc, #208]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003740:	f7fe fde6 	bl	8002310 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	e00a      	b.n	800375e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003748:	f7fe fde2 	bl	8002310 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e04f      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 020c 	and.w	r2, r3, #12
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	429a      	cmp	r2, r3
 800376e:	d1eb      	bne.n	8003748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d20c      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e032      	b.n	80037fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4916      	ldr	r1, [pc, #88]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490e      	ldr	r1, [pc, #56]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037d6:	f000 f821 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490a      	ldr	r1, [pc, #40]	; (8003810 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a09      	ldr	r2, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fd46 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00
 800380c:	40023800 	.word	0x40023800
 8003810:	08004300 	.word	0x08004300
 8003814:	20000048 	.word	0x20000048
 8003818:	20000054 	.word	0x20000054

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b094      	sub	sp, #80	; 0x50
 8003822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	647b      	str	r3, [r7, #68]	; 0x44
 8003828:	2300      	movs	r3, #0
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800382c:	2300      	movs	r3, #0
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003834:	4b79      	ldr	r3, [pc, #484]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d00d      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x40>
 8003840:	2b08      	cmp	r3, #8
 8003842:	f200 80e1 	bhi.w	8003a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
 800384a:	2b04      	cmp	r3, #4
 800384c:	d003      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0x3a>
 800384e:	e0db      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b73      	ldr	r3, [pc, #460]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003854:	e0db      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003856:	4b73      	ldr	r3, [pc, #460]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8003858:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800385a:	e0d8      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385c:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003866:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d063      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	2200      	movs	r2, #0
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
 800387c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
 8003886:	2300      	movs	r3, #0
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
 800388a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	0159      	lsls	r1, r3, #5
 800389c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a0:	0150      	lsls	r0, r2, #5
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4621      	mov	r1, r4
 80038a8:	1a51      	subs	r1, r2, r1
 80038aa:	6139      	str	r1, [r7, #16]
 80038ac:	4629      	mov	r1, r5
 80038ae:	eb63 0301 	sbc.w	r3, r3, r1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038c0:	4659      	mov	r1, fp
 80038c2:	018b      	lsls	r3, r1, #6
 80038c4:	4651      	mov	r1, sl
 80038c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ca:	4651      	mov	r1, sl
 80038cc:	018a      	lsls	r2, r1, #6
 80038ce:	4651      	mov	r1, sl
 80038d0:	ebb2 0801 	subs.w	r8, r2, r1
 80038d4:	4659      	mov	r1, fp
 80038d6:	eb63 0901 	sbc.w	r9, r3, r1
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ee:	4690      	mov	r8, r2
 80038f0:	4699      	mov	r9, r3
 80038f2:	4623      	mov	r3, r4
 80038f4:	eb18 0303 	adds.w	r3, r8, r3
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	462b      	mov	r3, r5
 80038fc:	eb49 0303 	adc.w	r3, r9, r3
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800390e:	4629      	mov	r1, r5
 8003910:	024b      	lsls	r3, r1, #9
 8003912:	4621      	mov	r1, r4
 8003914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003918:	4621      	mov	r1, r4
 800391a:	024a      	lsls	r2, r1, #9
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003922:	2200      	movs	r2, #0
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800392c:	f7fc fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4613      	mov	r3, r2
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003938:	e058      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b38      	ldr	r3, [pc, #224]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	4618      	mov	r0, r3
 8003944:	4611      	mov	r1, r2
 8003946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	2300      	movs	r3, #0
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	f04f 0000 	mov.w	r0, #0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	0159      	lsls	r1, r3, #5
 8003962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003966:	0150      	lsls	r0, r2, #5
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4641      	mov	r1, r8
 800396e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003972:	4649      	mov	r1, r9
 8003974:	eb63 0b01 	sbc.w	fp, r3, r1
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800398c:	ebb2 040a 	subs.w	r4, r2, sl
 8003990:	eb63 050b 	sbc.w	r5, r3, fp
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	00eb      	lsls	r3, r5, #3
 800399e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a2:	00e2      	lsls	r2, r4, #3
 80039a4:	4614      	mov	r4, r2
 80039a6:	461d      	mov	r5, r3
 80039a8:	4643      	mov	r3, r8
 80039aa:	18e3      	adds	r3, r4, r3
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	464b      	mov	r3, r9
 80039b0:	eb45 0303 	adc.w	r3, r5, r3
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039c2:	4629      	mov	r1, r5
 80039c4:	028b      	lsls	r3, r1, #10
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039cc:	4621      	mov	r1, r4
 80039ce:	028a      	lsls	r2, r1, #10
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039d6:	2200      	movs	r2, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	61fa      	str	r2, [r7, #28]
 80039dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e0:	f7fc fbf2 	bl	80001c8 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	3301      	adds	r3, #1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3750      	adds	r7, #80	; 0x50
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	00f42400 	.word	0x00f42400
 8003a24:	007a1200 	.word	0x007a1200

08003a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07b      	b.n	8003b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
 8003a52:	e005      	b.n	8003a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fda2 	bl	80015c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	f003 0104 	and.w	r1, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f003 0210 	and.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b088      	sub	sp, #32
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_SPI_Transmit+0x22>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e126      	b.n	8003daa <HAL_SPI_Transmit+0x270>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b64:	f7fe fbd4 	bl	8002310 <HAL_GetTick>
 8003b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b7e:	e10b      	b.n	8003d98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Transmit+0x52>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b90:	e102      	b.n	8003d98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd8:	d10f      	bne.n	8003bfa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d007      	beq.n	8003c18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c20:	d14b      	bne.n	8003cba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0xf6>
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d13e      	bne.n	8003cae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c54:	e02b      	b.n	8003cae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d112      	bne.n	8003c8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c88:	e011      	b.n	8003cae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8a:	f7fe fb41 	bl	8002310 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d803      	bhi.n	8003ca2 <HAL_SPI_Transmit+0x168>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d102      	bne.n	8003ca8 <HAL_SPI_Transmit+0x16e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cac:	e074      	b.n	8003d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ce      	bne.n	8003c56 <HAL_SPI_Transmit+0x11c>
 8003cb8:	e04c      	b.n	8003d54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_SPI_Transmit+0x18e>
 8003cc2:	8afb      	ldrh	r3, [r7, #22]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d140      	bne.n	8003d4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cee:	e02c      	b.n	8003d4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d113      	bne.n	8003d26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d24:	e011      	b.n	8003d4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d26:	f7fe faf3 	bl	8002310 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d803      	bhi.n	8003d3e <HAL_SPI_Transmit+0x204>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d102      	bne.n	8003d44 <HAL_SPI_Transmit+0x20a>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d48:	e026      	b.n	8003d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1cd      	bne.n	8003cf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fa55 	bl	8004208 <SPI_EndRxTxTransaction>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e000      	b.n	8003d98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003d96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b08c      	sub	sp, #48	; 0x30
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x26>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e18a      	b.n	80040ee <HAL_SPI_TransmitReceive+0x33c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de0:	f7fe fa96 	bl	8002310 <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d00f      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x70>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e08:	d107      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x68>
 8003e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e20:	e15b      	b.n	80040da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x82>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x82>
 8003e2e:	887b      	ldrh	r3, [r7, #2]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e3a:	e14e      	b.n	80040da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d003      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d007      	beq.n	8003ea4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eac:	d178      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x10a>
 8003eb6:	8b7b      	ldrh	r3, [r7, #26]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d166      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee0:	e053      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11b      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x176>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x176>
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d113      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d119      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x1b8>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d014      	beq.n	8003f6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	1c9a      	adds	r2, r3, #2
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f66:	2301      	movs	r3, #1
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f6a:	f7fe f9d1 	bl	8002310 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d807      	bhi.n	8003f8a <HAL_SPI_TransmitReceive+0x1d8>
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d003      	beq.n	8003f8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f88:	e0a7      	b.n	80040da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1a6      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x130>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1a1      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x130>
 8003f9e:	e07c      	b.n	800409a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x1fc>
 8003fa8:	8b7b      	ldrh	r3, [r7, #26]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d16b      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	7812      	ldrb	r2, [r2, #0]
 8003fba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fd4:	e057      	b.n	8004086 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d11c      	bne.n	800401e <HAL_SPI_TransmitReceive+0x26c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d017      	beq.n	800401e <HAL_SPI_TransmitReceive+0x26c>
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d114      	bne.n	800401e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d119      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x2ae>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d014      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004060:	f7fe f956 	bl	8002310 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800406c:	429a      	cmp	r2, r3
 800406e:	d803      	bhi.n	8004078 <HAL_SPI_TransmitReceive+0x2c6>
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d102      	bne.n	800407e <HAL_SPI_TransmitReceive+0x2cc>
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004084:	e029      	b.n	80040da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1a2      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x224>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d19d      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f8b2 	bl	8004208 <SPI_EndRxTxTransaction>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040b6:	e010      	b.n	80040da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	e000      	b.n	80040da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3730      	adds	r7, #48	; 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004108:	f7fe f902 	bl	8002310 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	4413      	add	r3, r2
 8004116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004118:	f7fe f8fa 	bl	8002310 <HAL_GetTick>
 800411c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800411e:	4b39      	ldr	r3, [pc, #228]	; (8004204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	015b      	lsls	r3, r3, #5
 8004124:	0d1b      	lsrs	r3, r3, #20
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412e:	e054      	b.n	80041da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d050      	beq.n	80041da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004138:	f7fe f8ea 	bl	8002310 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	429a      	cmp	r2, r3
 8004146:	d902      	bls.n	800414e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d13d      	bne.n	80041ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800415c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004166:	d111      	bne.n	800418c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004170:	d004      	beq.n	800417c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d107      	bne.n	800418c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004194:	d10f      	bne.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e017      	b.n	80041fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4013      	ands	r3, r2
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d19b      	bne.n	8004130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000048 	.word	0x20000048

08004208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <SPI_EndRxTxTransaction+0x7c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <SPI_EndRxTxTransaction+0x80>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0d5b      	lsrs	r3, r3, #21
 8004220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004232:	d112      	bne.n	800425a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff5a 	bl	80040f8 <SPI_WaitFlagStateUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e00f      	b.n	800427a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3b01      	subs	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d0f2      	beq.n	800425a <SPI_EndRxTxTransaction+0x52>
 8004274:	e000      	b.n	8004278 <SPI_EndRxTxTransaction+0x70>
        break;
 8004276:	bf00      	nop
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000048 	.word	0x20000048
 8004288:	165e9f81 	.word	0x165e9f81

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4d0d      	ldr	r5, [pc, #52]	; (80042c4 <__libc_init_array+0x38>)
 8004290:	4c0d      	ldr	r4, [pc, #52]	; (80042c8 <__libc_init_array+0x3c>)
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	2600      	movs	r6, #0
 8004298:	42a6      	cmp	r6, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	4d0b      	ldr	r5, [pc, #44]	; (80042cc <__libc_init_array+0x40>)
 800429e:	4c0c      	ldr	r4, [pc, #48]	; (80042d0 <__libc_init_array+0x44>)
 80042a0:	f000 f820 	bl	80042e4 <_init>
 80042a4:	1b64      	subs	r4, r4, r5
 80042a6:	10a4      	asrs	r4, r4, #2
 80042a8:	2600      	movs	r6, #0
 80042aa:	42a6      	cmp	r6, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b4:	4798      	blx	r3
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80042be:	4798      	blx	r3
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08004320 	.word	0x08004320
 80042c8:	08004320 	.word	0x08004320
 80042cc:	08004320 	.word	0x08004320
 80042d0:	08004324 	.word	0x08004324

080042d4 <memset>:
 80042d4:	4402      	add	r2, r0
 80042d6:	4603      	mov	r3, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>

080042e4 <_init>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr

080042f0 <_fini>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr
