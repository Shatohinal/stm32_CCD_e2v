
Discovery2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004224  08004224  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800422c  0800422c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000024c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a8  200002a8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009948  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6b  00000000  00000000  000299d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213a4  00000000  00000000  0002c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a46e  00000000  00000000  0004d94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8a5  00000000  00000000  00057dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012365f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fd4  00000000  00000000  001236b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041f0 	.word	0x080041f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080041f0 	.word	0x080041f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <E2V_CLICKS_Ini>:
uint32_t* dma2_lifcr = DMA2_BASE+0x8UL;
uint32_t* dma2_stream3_ndtr = DMA2_BASE+0x5CUL;
uint32_t* dma2_stream3_cr = DMA2_BASE+0x58UL;

void E2V_CLICKS_Ini()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	r1u_to_r3d = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.1);
	r3d_to_r2u = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.23);
	r2u_to_r1d = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.1);
	r1d_to_r0u = (uint32_t)(E2V_CLICKS_OR_Clock_period_Ticks * 0.07);
*/
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <E2V_CLICKS_Ini+0x94>)
 80004d2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80004d6:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R  + 16U))|
							(0x1UL << (E2V_CLICKS_R1 + 16U))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1 + 16U))|
 80004d8:	4b21      	ldr	r3, [pc, #132]	; (8000560 <E2V_CLICKS_Ini+0x94>)
 80004da:	f04f 7260 	mov.w	r2, #58720256	; 0x3800000
 80004de:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_S2 + 16U))|
							(0x1UL << (E2V_CLICKS_S3 + 16U));


	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U))|
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <E2V_CLICKS_Ini+0x94>)
 80004e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80004e6:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_SW + 16U))|
							(0x1UL << (E2V_CLICKS_DD + 16U))|		//??
							(0x1UL << (E2V_CLICKS_SG + 16U))|		//??
							(0x1UL << (E2V_CLICKS_SS + 16U));

	number_Of_Lines = 1033+1028;
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <E2V_CLICKS_Ini+0x98>)
 80004ea:	f640 020d 	movw	r2, #2061	; 0x80d
 80004ee:	601a      	str	r2, [r3, #0]
	number_Of_Rows = 1070;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <E2V_CLICKS_Ini+0x9c>)
 80004f2:	f240 422e 	movw	r2, #1070	; 0x42e
 80004f6:	601a      	str	r2, [r3, #0]

	OR_Clock_period = 4;/*in mks (1, 2, 4)*/
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <E2V_CLICKS_Ini+0xa0>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	601a      	str	r2, [r3, #0]
	mS_To_Wait = 1;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <E2V_CLICKS_Ini+0xa4>)
 8000500:	2201      	movs	r2, #1
 8000502:	601a      	str	r2, [r3, #0]

	CCD_Mode = 0;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <E2V_CLICKS_Ini+0xa8>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
	CCD_Brust_N = 1;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <E2V_CLICKS_Ini+0xac>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
	CCD_Brust_Delay = 1000;
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <E2V_CLICKS_Ini+0xb0>)
 8000512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000516:	601a      	str	r2, [r3, #0]

	switch (OR_Clock_period)
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <E2V_CLICKS_Ini+0xa0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d010      	beq.n	8000542 <E2V_CLICKS_Ini+0x76>
 8000520:	2b04      	cmp	r3, #4
 8000522:	d812      	bhi.n	800054a <E2V_CLICKS_Ini+0x7e>
 8000524:	2b01      	cmp	r3, #1
 8000526:	d002      	beq.n	800052e <E2V_CLICKS_Ini+0x62>
 8000528:	2b02      	cmp	r3, #2
 800052a:	d005      	beq.n	8000538 <E2V_CLICKS_Ini+0x6c>
 800052c:	e00d      	b.n	800054a <E2V_CLICKS_Ini+0x7e>
		{
		case 1:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 8000530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000534:	601a      	str	r2, [r3, #0]
			break;
 8000536:	e00d      	b.n	8000554 <E2V_CLICKS_Ini+0x88>
		case 2:
			E2V_CLICKS_OR_Clock_Freq = 500;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 800053a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800053e:	601a      	str	r2, [r3, #0]
			break;
 8000540:	e008      	b.n	8000554 <E2V_CLICKS_Ini+0x88>
		case 4:
			E2V_CLICKS_OR_Clock_Freq = 250;
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 8000544:	22fa      	movs	r2, #250	; 0xfa
 8000546:	601a      	str	r2, [r3, #0]
			break;
 8000548:	e004      	b.n	8000554 <E2V_CLICKS_Ini+0x88>
		default:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <E2V_CLICKS_Ini+0xb4>)
 800054c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000550:	601a      	str	r2, [r3, #0]
			break;
 8000552:	bf00      	nop
		}
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40020c00 	.word	0x40020c00
 8000564:	20000080 	.word	0x20000080
 8000568:	20000084 	.word	0x20000084
 800056c:	20000088 	.word	0x20000088
 8000570:	2000008c 	.word	0x2000008c
 8000574:	20000090 	.word	0x20000090
 8000578:	20000094 	.word	0x20000094
 800057c:	20000098 	.word	0x20000098
 8000580:	20000078 	.word	0x20000078

08000584 <E2V_CLICKS_Base_Aqu_Output>:

*/


void E2V_CLICKS_Base_Aqu_Output ()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b092      	sub	sp, #72	; 0x48
 8000588:	af00      	add	r7, sp, #0
	switch (OR_Clock_period)
 800058a:	4b95      	ldr	r3, [pc, #596]	; (80007e0 <E2V_CLICKS_Base_Aqu_Output+0x25c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d010      	beq.n	80005b4 <E2V_CLICKS_Base_Aqu_Output+0x30>
 8000592:	2b04      	cmp	r3, #4
 8000594:	d812      	bhi.n	80005bc <E2V_CLICKS_Base_Aqu_Output+0x38>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d002      	beq.n	80005a0 <E2V_CLICKS_Base_Aqu_Output+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d005      	beq.n	80005aa <E2V_CLICKS_Base_Aqu_Output+0x26>
 800059e:	e00d      	b.n	80005bc <E2V_CLICKS_Base_Aqu_Output+0x38>
		{
		case 1:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 80005a0:	4b90      	ldr	r3, [pc, #576]	; (80007e4 <E2V_CLICKS_Base_Aqu_Output+0x260>)
 80005a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a6:	601a      	str	r2, [r3, #0]
			break;
 80005a8:	e00d      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		case 2:
			E2V_CLICKS_OR_Clock_Freq = 500;
 80005aa:	4b8e      	ldr	r3, [pc, #568]	; (80007e4 <E2V_CLICKS_Base_Aqu_Output+0x260>)
 80005ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005b0:	601a      	str	r2, [r3, #0]
			break;
 80005b2:	e008      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		case 4:
			E2V_CLICKS_OR_Clock_Freq = 250;
 80005b4:	4b8b      	ldr	r3, [pc, #556]	; (80007e4 <E2V_CLICKS_Base_Aqu_Output+0x260>)
 80005b6:	22fa      	movs	r2, #250	; 0xfa
 80005b8:	601a      	str	r2, [r3, #0]
			break;
 80005ba:	e004      	b.n	80005c6 <E2V_CLICKS_Base_Aqu_Output+0x42>
		default:
			E2V_CLICKS_OR_Clock_Freq = 1000;
 80005bc:	4b89      	ldr	r3, [pc, #548]	; (80007e4 <E2V_CLICKS_Base_Aqu_Output+0x260>)
 80005be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c2:	601a      	str	r2, [r3, #0]
			break;
 80005c4:	bf00      	nop
		}
	if (mS_To_Wait == 0) mS_To_Wait = 1;
 80005c6:	4b88      	ldr	r3, [pc, #544]	; (80007e8 <E2V_CLICKS_Base_Aqu_Output+0x264>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <E2V_CLICKS_Base_Aqu_Output+0x50>
 80005ce:	4b86      	ldr	r3, [pc, #536]	; (80007e8 <E2V_CLICKS_Base_Aqu_Output+0x264>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]

//	HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП

	uint16_t lines_counter = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint8_t opcode;
	uint8_t txWr0 = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t txWr1 = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint32_t addr = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
	int8_t buf[3] = {0,0,0};
 80005ea:	4a80      	ldr	r2, [pc, #512]	; (80007ec <E2V_CLICKS_Base_Aqu_Output+0x268>)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	3302      	adds	r3, #2
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	701a      	strb	r2, [r3, #0]
	int8_t sn = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  uint32_t* GPIO_BSRR_Adress = &(E2V_CLICKS_PORT->BSRR);
 8000600:	4b7b      	ldr	r3, [pc, #492]	; (80007f0 <E2V_CLICKS_Base_Aqu_Output+0x26c>)
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c

	  uint32_t High_R = (0x1UL << (E2V_CLICKS_R));
 8000604:	2301      	movs	r3, #1
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
	  uint32_t Low_R = (0x1UL << (E2V_CLICKS_R+16U));
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t High_R1 = (0x1UL << (E2V_CLICKS_R1));
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
	  uint32_t Low_R1 = (0x1UL << (E2V_CLICKS_R1+16U));
 8000612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000616:	61fb      	str	r3, [r7, #28]
	  uint32_t High_R2 = (0x1UL << (E2V_CLICKS_R2));
 8000618:	2304      	movs	r3, #4
 800061a:	61bb      	str	r3, [r7, #24]
	  uint32_t Low_R2 = (0x1UL << (E2V_CLICKS_R2+16U));
 800061c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000620:	617b      	str	r3, [r7, #20]
	  uint32_t High_R3 = (0x1UL << (E2V_CLICKS_R3));
 8000622:	2308      	movs	r3, #8
 8000624:	613b      	str	r3, [r7, #16]
	  uint32_t Low_R3 = (0x1UL << (E2V_CLICKS_R3+16U));
 8000626:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800062a:	60fb      	str	r3, [r7, #12]

		E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U))|
 800062c:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 800062e:	f04f 426f 	mov.w	r2, #4009754624	; 0xef000000
 8000632:	619a      	str	r2, [r3, #24]
								//(0x1UL << (E2V_CLICKS_SW))|
								(0x1UL << (E2V_CLICKS_DD + 16U))|		//??
								(0x1UL << (E2V_CLICKS_SG + 16U))|		//??
								(0x1UL << (E2V_CLICKS_SS + 16U));

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_SS));
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 8000636:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800063a:	619a      	str	r2, [r3, #24]

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1))|
 800063c:	4b6d      	ldr	r3, [pc, #436]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 800063e:	4a6e      	ldr	r2, [pc, #440]	; (80007f8 <E2V_CLICKS_Base_Aqu_Output+0x274>)
 8000640:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R))|
							(0x1UL << (E2V_CLICKS_R1))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));

  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG));
 8000642:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 8000644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000648:	619a      	str	r2, [r3, #24]

	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 800064a:	2300      	movs	r3, #0
 800064c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000650:	e07e      	b.n	8000750 <E2V_CLICKS_Base_Aqu_Output+0x1cc>
	{
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I2));
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 8000654:	2220      	movs	r2, #32
 8000656:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S2));
 8000658:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 800065a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065e:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 8000660:	4b66      	ldr	r3, [pc, #408]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
			  	while (delay<35U)
 8000666:	e004      	b.n	8000672 <E2V_CLICKS_Base_Aqu_Output+0xee>
			  		{
			  		delay++;
 8000668:	4b64      	ldr	r3, [pc, #400]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a63      	ldr	r2, [pc, #396]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000670:	6013      	str	r3, [r2, #0]
			  	while (delay<35U)
 8000672:	4b62      	ldr	r3, [pc, #392]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b22      	cmp	r3, #34	; 0x22
 8000678:	d9f6      	bls.n	8000668 <E2V_CLICKS_Base_Aqu_Output+0xe4>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U));
 800067a:	4b5e      	ldr	r3, [pc, #376]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 800067c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000680:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1 + 16U));
 8000682:	4b5c      	ldr	r3, [pc, #368]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 8000684:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000688:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 800068a:	4b5c      	ldr	r3, [pc, #368]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
			  	while (delay<35U)
 8000690:	e004      	b.n	800069c <E2V_CLICKS_Base_Aqu_Output+0x118>
			  		{
			  		delay++;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	4a58      	ldr	r2, [pc, #352]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800069a:	6013      	str	r3, [r2, #0]
			  	while (delay<35U)
 800069c:	4b57      	ldr	r3, [pc, #348]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b22      	cmp	r3, #34	; 0x22
 80006a2:	d9f6      	bls.n	8000692 <E2V_CLICKS_Base_Aqu_Output+0x10e>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3));
 80006a4:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80006a6:	2240      	movs	r2, #64	; 0x40
 80006a8:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3));
 80006aa:	4b52      	ldr	r3, [pc, #328]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80006ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b0:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 80006b2:	4b52      	ldr	r3, [pc, #328]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
			  	while (delay<35U)
 80006b8:	e004      	b.n	80006c4 <E2V_CLICKS_Base_Aqu_Output+0x140>
			  		{
			  		delay++;
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	4a4e      	ldr	r2, [pc, #312]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006c2:	6013      	str	r3, [r2, #0]
			  	while (delay<35U)
 80006c4:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b22      	cmp	r3, #34	; 0x22
 80006ca:	d9f6      	bls.n	80006ba <E2V_CLICKS_Base_Aqu_Output+0x136>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I2 + 16U));
 80006cc:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80006ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006d2:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S2 + 16U));
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80006d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006da:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 80006dc:	4b47      	ldr	r3, [pc, #284]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
			  	while (delay<35U)
 80006e2:	e004      	b.n	80006ee <E2V_CLICKS_Base_Aqu_Output+0x16a>
			  		{
			  		delay++;
 80006e4:	4b45      	ldr	r3, [pc, #276]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	4a44      	ldr	r2, [pc, #272]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006ec:	6013      	str	r3, [r2, #0]
			  	while (delay<35U)
 80006ee:	4b43      	ldr	r3, [pc, #268]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b22      	cmp	r3, #34	; 0x22
 80006f4:	d9f6      	bls.n	80006e4 <E2V_CLICKS_Base_Aqu_Output+0x160>
			  		}

			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1));
 80006f6:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80006f8:	2210      	movs	r2, #16
 80006fa:	619a      	str	r2, [r3, #24]
			  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1));
 80006fc:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	619a      	str	r2, [r3, #24]
			  	delay = 0U;
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
				while (delay<35U)
 8000708:	e004      	b.n	8000714 <E2V_CLICKS_Base_Aqu_Output+0x190>
			  		{
			  		delay++;
 800070a:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000712:	6013      	str	r3, [r2, #0]
				while (delay<35U)
 8000714:	4b39      	ldr	r3, [pc, #228]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b22      	cmp	r3, #34	; 0x22
 800071a:	d9f6      	bls.n	800070a <E2V_CLICKS_Base_Aqu_Output+0x186>
			  		}

				E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3 + 16U));
 800071c:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 800071e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000722:	619a      	str	r2, [r3, #24]
				E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3 + 16U));
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 8000726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800072a:	619a      	str	r2, [r3, #24]
				  	delay = 0U;
 800072c:	4b33      	ldr	r3, [pc, #204]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
					while (delay<35U)
 8000732:	e004      	b.n	800073e <E2V_CLICKS_Base_Aqu_Output+0x1ba>
				  		{
				  		delay++;
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a30      	ldr	r2, [pc, #192]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800073c:	6013      	str	r3, [r2, #0]
					while (delay<35U)
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b22      	cmp	r3, #34	; 0x22
 8000744:	d9f6      	bls.n	8000734 <E2V_CLICKS_Base_Aqu_Output+0x1b0>
	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 8000746:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800074a:	3301      	adds	r3, #1
 800074c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000750:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <E2V_CLICKS_Base_Aqu_Output+0x27c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	f4ff af7a 	bcc.w	8000652 <E2V_CLICKS_Base_Aqu_Output+0xce>
				  		}
	}
	*GPIO_BSRR_Adress = Low_R1;
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	601a      	str	r2, [r3, #0]
	delay = 0U;
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
	while (delay<2U)
 800076a:	e004      	b.n	8000776 <E2V_CLICKS_Base_Aqu_Output+0x1f2>
		{
		delay++;
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3301      	adds	r3, #1
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000774:	6013      	str	r3, [r2, #0]
	while (delay<2U)
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d9f6      	bls.n	800076c <E2V_CLICKS_Base_Aqu_Output+0x1e8>
		}

	*GPIO_BSRR_Adress = Low_R2;
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	601a      	str	r2, [r3, #0]
		delay = 0U;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
		while (delay<2U)
 800078a:	e004      	b.n	8000796 <E2V_CLICKS_Base_Aqu_Output+0x212>
			{
			delay++;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000794:	6013      	str	r3, [r2, #0]
		while (delay<2U)
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d9f6      	bls.n	800078c <E2V_CLICKS_Base_Aqu_Output+0x208>
			}

 	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U));
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <E2V_CLICKS_Base_Aqu_Output+0x270>)
 80007a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007a4:	619a      	str	r2, [r3, #24]
	delay = 0U;
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
	while (delay<2U)
 80007ac:	e004      	b.n	80007b8 <E2V_CLICKS_Base_Aqu_Output+0x234>
		{
		delay++;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80007b6:	6013      	str	r3, [r2, #0]
	while (delay<2U)
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d9f6      	bls.n	80007ae <E2V_CLICKS_Base_Aqu_Output+0x22a>
		}

		*GPIO_BSRR_Adress = High_R1;
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	6a3a      	ldr	r2, [r7, #32]
 80007c4:	601a      	str	r2, [r3, #0]
		*GPIO_BSRR_Adress = Low_R2;
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	601a      	str	r2, [r3, #0]
		*GPIO_BSRR_Adress = Low_R3;
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	601a      	str	r2, [r3, #0]
		*GPIO_BSRR_Adress = High_R;
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007d6:	601a      	str	r2, [r3, #0]

				delay = 0U;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <E2V_CLICKS_Base_Aqu_Output+0x278>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
				while (delay<2U)
 80007de:	e016      	b.n	800080e <E2V_CLICKS_Base_Aqu_Output+0x28a>
 80007e0:	20000088 	.word	0x20000088
 80007e4:	20000078 	.word	0x20000078
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	08004208 	.word	0x08004208
 80007f0:	40020c18 	.word	0x40020c18
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	036c0093 	.word	0x036c0093
 80007fc:	2000007c 	.word	0x2000007c
 8000800:	20000080 	.word	0x20000080
					{
					delay++;
 8000804:	4b97      	ldr	r3, [pc, #604]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a96      	ldr	r2, [pc, #600]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 800080c:	6013      	str	r3, [r2, #0]
				while (delay<2U)
 800080e:	4b95      	ldr	r3, [pc, #596]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d9f6      	bls.n	8000804 <E2V_CLICKS_Base_Aqu_Output+0x280>
					}



	uint32_t Ticks_To_Wait = mS_To_Wait*6718-848;
 8000816:	4b94      	ldr	r3, [pc, #592]	; (8000a68 <E2V_CLICKS_Base_Aqu_Output+0x4e4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f641 223e 	movw	r2, #6718	; 0x1a3e
 800081e:	fb02 f303 	mul.w	r3, r2, r3
 8000822:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8000826:	60bb      	str	r3, [r7, #8]
//	Ticks_To_Wait = 5870+6718;

	delay = 0U;
 8000828:	4b8e      	ldr	r3, [pc, #568]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	while (delay<Ticks_To_Wait)
 800082e:	e008      	b.n	8000842 <E2V_CLICKS_Base_Aqu_Output+0x2be>
		{
		delay++;
 8000830:	4b8c      	ldr	r3, [pc, #560]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a8b      	ldr	r2, [pc, #556]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000838:	6013      	str	r3, [r2, #0]
		if (tcp_recieve) break;
 800083a:	4b8c      	ldr	r3, [pc, #560]	; (8000a6c <E2V_CLICKS_Base_Aqu_Output+0x4e8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d105      	bne.n	800084e <E2V_CLICKS_Base_Aqu_Output+0x2ca>
	while (delay<Ticks_To_Wait)
 8000842:	4b88      	ldr	r3, [pc, #544]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	429a      	cmp	r2, r3
 800084a:	d8f1      	bhi.n	8000830 <E2V_CLICKS_Base_Aqu_Output+0x2ac>
 800084c:	e000      	b.n	8000850 <E2V_CLICKS_Base_Aqu_Output+0x2cc>
		if (tcp_recieve) break;
 800084e:	bf00      	nop
		}

 	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1));
 8000850:	4b87      	ldr	r3, [pc, #540]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000852:	2210      	movs	r2, #16
 8000854:	619a      	str	r2, [r3, #24]
 	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1));
 8000856:	4b86      	ldr	r3, [pc, #536]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	619a      	str	r2, [r3, #24]

	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 800085c:	2300      	movs	r3, #0
 800085e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000862:	e2a1      	b.n	8000da8 <E2V_CLICKS_Base_Aqu_Output+0x824>
	{

		sn = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (lines_counter&0x0001)sn = 1;
 800086a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <E2V_CLICKS_Base_Aqu_Output+0x2f8>
 8000876:	2301      	movs	r3, #1
 8000878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		opcode = BSB_S0+sn*4;
 800087c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3301      	adds	r3, #1
 8000886:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM1;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	b25b      	sxtb	r3, r3
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	b25b      	sxtb	r3, r3
 8000894:	71fb      	strb	r3, [r7, #7]

		txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2124      	movs	r1, #36	; 0x24
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fbfa 	bl	8002094 <w5500_readReg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2125      	movs	r1, #37	; 0x25
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fbf2 	bl	8002094 <w5500_readReg>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		addr = (txWr0<<8)|(txWr1);
 80008b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ba:	021a      	lsls	r2, r3, #8
 80008bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80008c0:	4313      	orrs	r3, r2
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40

		opcode = BSB_S0_TX+sn*4;
 80008c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	3302      	adds	r3, #2
 80008ce:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM0;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	71fb      	strb	r3, [r7, #7]

		W5500_SS_SELECT();
 80008d6:	2200      	movs	r2, #0
 80008d8:	2110      	movs	r1, #16
 80008da:	4866      	ldr	r0, [pc, #408]	; (8000a74 <E2V_CLICKS_Base_Aqu_Output+0x4f0>)
 80008dc:	f002 fb88 	bl	8002ff0 <HAL_GPIO_WritePin>

		DMA2_Stream3->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80008e0:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <E2V_CLICKS_Base_Aqu_Output+0x4f4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a64      	ldr	r2, [pc, #400]	; (8000a78 <E2V_CLICKS_Base_Aqu_Output+0x4f4>)
 80008e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ea:	6013      	str	r3, [r2, #0]
		DMA2_Stream3->NDTR = buff_size;
 80008ec:	4b63      	ldr	r3, [pc, #396]	; (8000a7c <E2V_CLICKS_Base_Aqu_Output+0x4f8>)
 80008ee:	881a      	ldrh	r2, [r3, #0]
 80008f0:	4b61      	ldr	r3, [pc, #388]	; (8000a78 <E2V_CLICKS_Base_Aqu_Output+0x4f4>)
 80008f2:	605a      	str	r2, [r3, #4]
		DMA2_Stream3->PAR = &SPI1->DR;
 80008f4:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <E2V_CLICKS_Base_Aqu_Output+0x4f4>)
 80008f6:	4a62      	ldr	r2, [pc, #392]	; (8000a80 <E2V_CLICKS_Base_Aqu_Output+0x4fc>)
 80008f8:	609a      	str	r2, [r3, #8]
		DMA2_Stream3->M0AR = buff_to_send;
 80008fa:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <E2V_CLICKS_Base_Aqu_Output+0x4f4>)
 80008fc:	4a61      	ldr	r2, [pc, #388]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 80008fe:	60da      	str	r2, [r3, #12]
		SET_BIT(hspi1.Instance->CR1, SPI_CR1_SPE);
 8000900:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <E2V_CLICKS_Base_Aqu_Output+0x504>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <E2V_CLICKS_Base_Aqu_Output+0x504>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800090e:	601a      	str	r2, [r3, #0]

	    buff_to_send[0]=(addr & 0xFF00)>> 8;
 8000910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000912:	0a1b      	lsrs	r3, r3, #8
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b5b      	ldr	r3, [pc, #364]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000918:	701a      	strb	r2, [r3, #0]
	    buff_to_send[1]=(addr & 0x00FF);
 800091a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000920:	705a      	strb	r2, [r3, #1]
        buff_to_send[2]=opcode|(RWB_WRITE<<2);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 800092c:	709a      	strb	r2, [r3, #2]

        buff_to_send[3]=3;
 800092e:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000930:	2203      	movs	r2, #3
 8000932:	70da      	strb	r2, [r3, #3]
        buff_to_send[4]=14;
 8000934:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000936:	220e      	movs	r2, #14
 8000938:	711a      	strb	r2, [r3, #4]
	    buff_to_send[5]=15;
 800093a:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 800093c:	220f      	movs	r2, #15
 800093e:	715a      	strb	r2, [r3, #5]
	    buff_to_send[6]=92;
 8000940:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000942:	225c      	movs	r2, #92	; 0x5c
 8000944:	719a      	strb	r2, [r3, #6]
        buff_to_send[7]=65;
 8000946:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000948:	2241      	movs	r2, #65	; 0x41
 800094a:	71da      	strb	r2, [r3, #7]
        buff_to_send[8]=35;
 800094c:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 800094e:	2223      	movs	r2, #35	; 0x23
 8000950:	721a      	strb	r2, [r3, #8]
	    buff_to_send[9]=0;
 8000952:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000954:	2200      	movs	r2, #0
 8000956:	725a      	strb	r2, [r3, #9]
	    buff_to_send[10]=0;
 8000958:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 800095a:	2200      	movs	r2, #0
 800095c:	729a      	strb	r2, [r3, #10]

	    buff_to_send[11]=(uint8_t)((lines_counter&0xFF00)>>8);
 800095e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 800096a:	72da      	strb	r2, [r3, #11]
	    buff_to_send[12]=(uint8_t)((lines_counter&0x00FF));
 800096c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000974:	731a      	strb	r2, [r3, #12]
        buff_to_send[13]=0x00;
 8000976:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 8000978:	2200      	movs	r2, #0
 800097a:	735a      	strb	r2, [r3, #13]
        buff_to_send[14]=0x00;
 800097c:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <E2V_CLICKS_Base_Aqu_Output+0x500>)
 800097e:	2200      	movs	r2, #0
 8000980:	739a      	strb	r2, [r3, #14]

			  	  *spi1_cr2=0x0UL;
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <E2V_CLICKS_Base_Aqu_Output+0x508>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
			  	  *dma2_lifcr = 0xfc00000U; //DMA2_LIFCR
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <E2V_CLICKS_Base_Aqu_Output+0x50c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000992:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_ndtr = 14; //DMA2_Stream3->NDTR
 8000994:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <E2V_CLICKS_Base_Aqu_Output+0x510>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	220e      	movs	r2, #14
 800099a:	601a      	str	r2, [r3, #0]
			  	  *dma2_stream3_cr=0x600045fUL;//DMA2_Stream3->CR
 800099c:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <E2V_CLICKS_Base_Aqu_Output+0x514>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a3e      	ldr	r2, [pc, #248]	; (8000a9c <E2V_CLICKS_Base_Aqu_Output+0x518>)
 80009a2:	601a      	str	r2, [r3, #0]
			  	  *spi1_cr2=0x2UL;
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <E2V_CLICKS_Base_Aqu_Output+0x508>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2202      	movs	r2, #2
 80009aa:	601a      	str	r2, [r3, #0]


			  	//////////////////////////////////////////////////////////////////////////////////////////////////////////

				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I2));
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 80009ae:	2220      	movs	r2, #32
 80009b0:	619a      	str	r2, [r3, #24]
				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S2));
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 80009b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b8:	619a      	str	r2, [r3, #24]
				  	delay = 0U;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 80009c0:	e004      	b.n	80009cc <E2V_CLICKS_Base_Aqu_Output+0x448>
				  		{
				  		delay++;
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009ca:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b22      	cmp	r3, #34	; 0x22
 80009d2:	d9f6      	bls.n	80009c2 <E2V_CLICKS_Base_Aqu_Output+0x43e>
				  		}

				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U));
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 80009d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009da:	619a      	str	r2, [r3, #24]
				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1 + 16U));
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 80009de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e2:	619a      	str	r2, [r3, #24]
				  	delay = 0U;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 80009ea:	e004      	b.n	80009f6 <E2V_CLICKS_Base_Aqu_Output+0x472>
				  		{
				  		delay++;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009f4:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b22      	cmp	r3, #34	; 0x22
 80009fc:	d9f6      	bls.n	80009ec <E2V_CLICKS_Base_Aqu_Output+0x468>
				  		}

				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3));
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000a00:	2240      	movs	r2, #64	; 0x40
 8000a02:	619a      	str	r2, [r3, #24]
				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3));
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0a:	619a      	str	r2, [r3, #24]
				  	delay = 0U;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 8000a12:	e004      	b.n	8000a1e <E2V_CLICKS_Base_Aqu_Output+0x49a>
				  		{
				  		delay++;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a1c:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b22      	cmp	r3, #34	; 0x22
 8000a24:	d9f6      	bls.n	8000a14 <E2V_CLICKS_Base_Aqu_Output+0x490>
				  		}

				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I2 + 16U));
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000a28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a2c:	619a      	str	r2, [r3, #24]
				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S2 + 16U));
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a34:	619a      	str	r2, [r3, #24]
				  	delay = 0U;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
				  	while (delay<35U)
 8000a3c:	e004      	b.n	8000a48 <E2V_CLICKS_Base_Aqu_Output+0x4c4>
				  		{
				  		delay++;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a46:	6013      	str	r3, [r2, #0]
				  	while (delay<35U)
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b22      	cmp	r3, #34	; 0x22
 8000a4e:	d9f6      	bls.n	8000a3e <E2V_CLICKS_Base_Aqu_Output+0x4ba>
				  		}

				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1));
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	619a      	str	r2, [r3, #24]
				  	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S1));
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <E2V_CLICKS_Base_Aqu_Output+0x4ec>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	619a      	str	r2, [r3, #24]
				  	delay = 0U;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <E2V_CLICKS_Base_Aqu_Output+0x4e0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
					while (delay<35U)
 8000a62:	e022      	b.n	8000aaa <E2V_CLICKS_Base_Aqu_Output+0x526>
 8000a64:	2000007c 	.word	0x2000007c
 8000a68:	2000008c 	.word	0x2000008c
 8000a6c:	200002a0 	.word	0x200002a0
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40026458 	.word	0x40026458
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	4001300c 	.word	0x4001300c
 8000a84:	2000009c 	.word	0x2000009c
 8000a88:	200001e8 	.word	0x200001e8
 8000a8c:	20000004 	.word	0x20000004
 8000a90:	20000008 	.word	0x20000008
 8000a94:	2000000c 	.word	0x2000000c
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	0600045f 	.word	0x0600045f
				  		{
				  		delay++;
 8000aa0:	4b6f      	ldr	r3, [pc, #444]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a6e      	ldr	r2, [pc, #440]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000aa8:	6013      	str	r3, [r2, #0]
					while (delay<35U)
 8000aaa:	4b6d      	ldr	r3, [pc, #436]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b22      	cmp	r3, #34	; 0x22
 8000ab0:	d9f6      	bls.n	8000aa0 <E2V_CLICKS_Base_Aqu_Output+0x51c>
				  		}

					E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I3 + 16U));
 8000ab2:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <E2V_CLICKS_Base_Aqu_Output+0x6e0>)
 8000ab4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ab8:	619a      	str	r2, [r3, #24]
					E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_S3 + 16U));
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <E2V_CLICKS_Base_Aqu_Output+0x6e0>)
 8000abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ac0:	619a      	str	r2, [r3, #24]
					  	delay = 0U;
 8000ac2:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
						while (delay<35U)
 8000ac8:	e004      	b.n	8000ad4 <E2V_CLICKS_Base_Aqu_Output+0x550>
					  		{
					  		delay++;
 8000aca:	4b65      	ldr	r3, [pc, #404]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a63      	ldr	r2, [pc, #396]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000ad2:	6013      	str	r3, [r2, #0]
						while (delay<35U)
 8000ad4:	4b62      	ldr	r3, [pc, #392]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b22      	cmp	r3, #34	; 0x22
 8000ada:	d9f6      	bls.n	8000aca <E2V_CLICKS_Base_Aqu_Output+0x546>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
					  		}

				  	  __disable_irq();

		  				*GPIO_BSRR_Adress = Low_R;
 8000ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae4:	601a      	str	r2, [r3, #0]
					  	delay = 0U;
 8000ae6:	4b5e      	ldr	r3, [pc, #376]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
						while (delay<35U)
 8000aec:	e004      	b.n	8000af8 <E2V_CLICKS_Base_Aqu_Output+0x574>
					  		{
					  		delay++;
 8000aee:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a5a      	ldr	r2, [pc, #360]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000af6:	6013      	str	r3, [r2, #0]
						while (delay<35U)
 8000af8:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b22      	cmp	r3, #34	; 0x22
 8000afe:	d9f6      	bls.n	8000aee <E2V_CLICKS_Base_Aqu_Output+0x56a>
					  		}


			  	switch (E2V_CLICKS_OR_Clock_Freq)
 8000b00:	4b59      	ldr	r3, [pc, #356]	; (8000c68 <E2V_CLICKS_Base_Aqu_Output+0x6e4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b08:	f000 80a8 	beq.w	8000c5c <E2V_CLICKS_Base_Aqu_Output+0x6d8>
 8000b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b10:	f000 80c2 	beq.w	8000c98 <E2V_CLICKS_Base_Aqu_Output+0x714>
			  					delay++;
			  					}
			  				}
*/			  			break;
			  		default:
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b18:	e099      	b.n	8000c4e <E2V_CLICKS_Base_Aqu_Output+0x6ca>
			  				{
			  				*GPIO_BSRR_Adress = High_R3;
 8000b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b20:	4b4f      	ldr	r3, [pc, #316]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = High_R;
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b2a:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = Low_R1;
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
			  				while (delay<2U)
 8000b3e:	e004      	b.n	8000b4a <E2V_CLICKS_Base_Aqu_Output+0x5c6>
			  					{
			  					delay++;
 8000b40:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b48:	6013      	str	r3, [r2, #0]
			  				while (delay<2U)
 8000b4a:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d9f6      	bls.n	8000b40 <E2V_CLICKS_Base_Aqu_Output+0x5bc>
			  					}

			  				*GPIO_BSRR_Adress = Low_R;
 8000b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b56:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000b58:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
			  				while (delay<2U)
 8000b5e:	e004      	b.n	8000b6a <E2V_CLICKS_Base_Aqu_Output+0x5e6>
			  					{
			  					delay++;
 8000b60:	4b3f      	ldr	r3, [pc, #252]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b68:	6013      	str	r3, [r2, #0]
			  				while (delay<2U)
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d9f6      	bls.n	8000b60 <E2V_CLICKS_Base_Aqu_Output+0x5dc>
			  					}

			  				*GPIO_BSRR_Adress = High_R2;
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	601a      	str	r2, [r3, #0]

			  				  buff_to_send[0]=(uint8_t)((adc&0xFF00)>>8);		///////////////////////////////
 8000b78:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <E2V_CLICKS_Base_Aqu_Output+0x6e8>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	121b      	asrs	r3, r3, #8
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <E2V_CLICKS_Base_Aqu_Output+0x6ec>)
 8000b84:	701a      	strb	r2, [r3, #0]
			  				  buff_to_send[1]=(uint8_t)((adc&0x00FF));			///////////////////////////////
 8000b86:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <E2V_CLICKS_Base_Aqu_Output+0x6e8>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <E2V_CLICKS_Base_Aqu_Output+0x6ec>)
 8000b90:	705a      	strb	r2, [r3, #1]

			  				*spi1_cr2=0x0UL;									///////////////////////////////
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <E2V_CLICKS_Base_Aqu_Output+0x6f0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
			  				*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000b9a:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <E2V_CLICKS_Base_Aqu_Output+0x6f4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000ba2:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_ndtr = buff_size; //DMA2_Stream2->NDTR///////////////////////////////
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <E2V_CLICKS_Base_Aqu_Output+0x6f8>)
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <E2V_CLICKS_Base_Aqu_Output+0x6fc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	601a      	str	r2, [r3, #0]
			  				*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000bae:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <E2V_CLICKS_Base_Aqu_Output+0x700>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a35      	ldr	r2, [pc, #212]	; (8000c88 <E2V_CLICKS_Base_Aqu_Output+0x704>)
 8000bb4:	601a      	str	r2, [r3, #0]
			  				*spi1_cr2=0x2UL;									///////////////////////////////
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <E2V_CLICKS_Base_Aqu_Output+0x6f0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2202      	movs	r2, #2
 8000bbc:	601a      	str	r2, [r3, #0]


			  				delay = 0U;
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
			  				while (delay<10U)
 8000bc4:	e004      	b.n	8000bd0 <E2V_CLICKS_Base_Aqu_Output+0x64c>
			  					{
			  					delay++;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bce:	6013      	str	r3, [r2, #0]
			  				while (delay<10U)
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	d9f6      	bls.n	8000bc6 <E2V_CLICKS_Base_Aqu_Output+0x642>
			  					}

			  				*GPIO_BSRR_Adress = Low_R3;
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	601a      	str	r2, [r3, #0]

			  				ADC1->CR2 = 0x40000001;							///////////////////////////////
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <E2V_CLICKS_Base_Aqu_Output+0x708>)
 8000be0:	4a2b      	ldr	r2, [pc, #172]	; (8000c90 <E2V_CLICKS_Base_Aqu_Output+0x70c>)
 8000be2:	609a      	str	r2, [r3, #8]

			  				delay = 0U;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			  				while (delay<10U)
 8000bea:	e004      	b.n	8000bf6 <E2V_CLICKS_Base_Aqu_Output+0x672>
			  					{
			  					delay++;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bf4:	6013      	str	r3, [r2, #0]
			  				while (delay<10U)
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b09      	cmp	r3, #9
 8000bfc:	d9f6      	bls.n	8000bec <E2V_CLICKS_Base_Aqu_Output+0x668>
			  					}

			  			    adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <E2V_CLICKS_Base_Aqu_Output+0x708>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <E2V_CLICKS_Base_Aqu_Output+0x6e8>)
 8000c06:	801a      	strh	r2, [r3, #0]

			  				*GPIO_BSRR_Adress = High_R1;
 8000c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0a:	6a3a      	ldr	r2, [r7, #32]
 8000c0c:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
			  				while (delay<2U)
 8000c14:	e004      	b.n	8000c20 <E2V_CLICKS_Base_Aqu_Output+0x69c>
			  					{
			  					delay++;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c1e:	6013      	str	r3, [r2, #0]
			  				while (delay<2U)
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d9f6      	bls.n	8000c16 <E2V_CLICKS_Base_Aqu_Output+0x692>
			  					}

			  				*GPIO_BSRR_Adress = Low_R2;
 8000c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	601a      	str	r2, [r3, #0]
			  				delay = 0U;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
			  				while (delay<3U)
 8000c34:	e004      	b.n	8000c40 <E2V_CLICKS_Base_Aqu_Output+0x6bc>
			  					{
			  					delay++;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c3e:	6013      	str	r3, [r2, #0]
			  				while (delay<3U)
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <E2V_CLICKS_Base_Aqu_Output+0x6dc>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d9f6      	bls.n	8000c36 <E2V_CLICKS_Base_Aqu_Output+0x6b2>
			  			for (int i= 0;i<number_Of_Rows;i++)
 8000c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <E2V_CLICKS_Base_Aqu_Output+0x710>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f4ff af60 	bcc.w	8000b1a <E2V_CLICKS_Base_Aqu_Output+0x596>
			  				while (delay<3U)
			  					{
			  					delay++;
			  					}
*/			  				}
			  			break;
 8000c5a:	e01e      	b.n	8000c9a <E2V_CLICKS_Base_Aqu_Output+0x716>
*/			  			break;
 8000c5c:	bf00      	nop
 8000c5e:	e01c      	b.n	8000c9a <E2V_CLICKS_Base_Aqu_Output+0x716>
 8000c60:	2000007c 	.word	0x2000007c
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	20000078 	.word	0x20000078
 8000c6c:	2000019c 	.word	0x2000019c
 8000c70:	2000009c 	.word	0x2000009c
 8000c74:	20000004 	.word	0x20000004
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	20000010 	.word	0x20000010
 8000c88:	0600045f 	.word	0x0600045f
 8000c8c:	40012000 	.word	0x40012000
 8000c90:	40000001 	.word	0x40000001
 8000c94:	20000084 	.word	0x20000084
			  			    adc = ADC1->DR; // читаем полученное значение в переменную adc///////////////////////////////

//			  				delay = 0U;
//			  				delay = 0U;
			  				}
*/			  			break;
 8000c98:	bf00      	nop
			  		}

  				*GPIO_BSRR_Adress = High_R;
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9e:	601a      	str	r2, [r3, #0]
  				delay = 0U;
 8000ca0:	4ba0      	ldr	r3, [pc, #640]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
  				delay = 0U;
 8000ca6:	4b9f      	ldr	r3, [pc, #636]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
  				delay = 0U;
 8000cac:	4b9d      	ldr	r3, [pc, #628]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]

  				*GPIO_BSRR_Adress = High_R1;
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	6a3a      	ldr	r2, [r7, #32]
 8000cb6:	601a      	str	r2, [r3, #0]

				  buff_to_send[0]=(uint8_t)((adc&0xFF00)>>8);		///////////////////////////////
 8000cb8:	4b9b      	ldr	r3, [pc, #620]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	121b      	asrs	r3, r3, #8
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b9a      	ldr	r3, [pc, #616]	; (8000f2c <E2V_CLICKS_Base_Aqu_Output+0x9a8>)
 8000cc4:	701a      	strb	r2, [r3, #0]
				  buff_to_send[1]=(uint8_t)((adc&0x00FF));			///////////////////////////////
 8000cc6:	4b98      	ldr	r3, [pc, #608]	; (8000f28 <E2V_CLICKS_Base_Aqu_Output+0x9a4>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b97      	ldr	r3, [pc, #604]	; (8000f2c <E2V_CLICKS_Base_Aqu_Output+0x9a8>)
 8000cd0:	705a      	strb	r2, [r3, #1]

				*spi1_cr2=0x0UL;									///////////////////////////////
 8000cd2:	4b97      	ldr	r3, [pc, #604]	; (8000f30 <E2V_CLICKS_Base_Aqu_Output+0x9ac>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
				*dma2_lifcr = 0xfc00000U; //DMA2_LIFCR				///////////////////////////////
 8000cda:	4b96      	ldr	r3, [pc, #600]	; (8000f34 <E2V_CLICKS_Base_Aqu_Output+0x9b0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f04f 627c 	mov.w	r2, #264241152	; 0xfc00000
 8000ce2:	601a      	str	r2, [r3, #0]
				*dma2_stream3_ndtr = buff_size; //DMA2_Stream2->NDTR///////////////////////////////
 8000ce4:	4b94      	ldr	r3, [pc, #592]	; (8000f38 <E2V_CLICKS_Base_Aqu_Output+0x9b4>)
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	4b94      	ldr	r3, [pc, #592]	; (8000f3c <E2V_CLICKS_Base_Aqu_Output+0x9b8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	601a      	str	r2, [r3, #0]
				*dma2_stream3_cr=0x600045fUL;//DMA2_Stream2->CR		///////////////////////////////
 8000cee:	4b94      	ldr	r3, [pc, #592]	; (8000f40 <E2V_CLICKS_Base_Aqu_Output+0x9bc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a94      	ldr	r2, [pc, #592]	; (8000f44 <E2V_CLICKS_Base_Aqu_Output+0x9c0>)
 8000cf4:	601a      	str	r2, [r3, #0]
				*spi1_cr2=0x2UL;
 8000cf6:	4b8e      	ldr	r3, [pc, #568]	; (8000f30 <E2V_CLICKS_Base_Aqu_Output+0x9ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cfe:	b662      	cpsie	i
}
 8000d00:	bf00      	nop

				__enable_irq();

			  	//////////////////////////////////////////////////////////////////////////////////////////////////////////

		W5500_SS_DESELECT();
 8000d02:	2201      	movs	r2, #1
 8000d04:	2110      	movs	r1, #16
 8000d06:	4890      	ldr	r0, [pc, #576]	; (8000f48 <E2V_CLICKS_Base_Aqu_Output+0x9c4>)
 8000d08:	f002 f972 	bl	8002ff0 <HAL_GPIO_WritePin>
		addr = addr+number_Of_Rows*2+14;
 8000d0c:	4b8f      	ldr	r3, [pc, #572]	; (8000f4c <E2V_CLICKS_Base_Aqu_Output+0x9c8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	005a      	lsls	r2, r3, #1
 8000d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d14:	4413      	add	r3, r2
 8000d16:	330e      	adds	r3, #14
 8000d18:	643b      	str	r3, [r7, #64]	; 0x40
//		if (addr > 0xffff)addr=addr-0xffff;

		if (lines_counter == 70)
 8000d1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000d1e:	2b46      	cmp	r3, #70	; 0x46
 8000d20:	d102      	bne.n	8000d28 <E2V_CLICKS_Base_Aqu_Output+0x7a4>
		{
			delay = 0;
 8000d22:	4b80      	ldr	r3, [pc, #512]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
		}

		opcode = BSB_S0+sn*4;
 8000d28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	3301      	adds	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM1;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	71fb      	strb	r3, [r7, #7]

		txWr0 = (addr&0xFF00)>>8;
 8000d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		txWr1 = (addr&0x00FF);
 8000d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8000d50:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2124      	movs	r1, #36	; 0x24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 f969 	bl	8002030 <w5500_writeReg>
		w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8000d5e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2125      	movs	r1, #37	; 0x25
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f962 	bl	8002030 <w5500_writeReg>

		opcode=0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	71fb      	strb	r3, [r7, #7]
		opcode = BSB_S0+sn*4;
 8000d70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	71fb      	strb	r3, [r7, #7]
		opcode = (opcode<<3)|OM_FDM1;
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	71fb      	strb	r3, [r7, #7]
		w5500_writeReg(opcode,Sn_CR, CR_SEND);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f94d 	bl	8002030 <w5500_writeReg>


		if (tcp_recieve) break;
 8000d96:	4b6e      	ldr	r3, [pc, #440]	; (8000f50 <E2V_CLICKS_Base_Aqu_Output+0x9cc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10c      	bne.n	8000db8 <E2V_CLICKS_Base_Aqu_Output+0x834>
	for (lines_counter = 0;lines_counter<number_Of_Lines;lines_counter++)
 8000d9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000da8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000dac:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <E2V_CLICKS_Base_Aqu_Output+0x9d0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f4ff ad57 	bcc.w	8000864 <E2V_CLICKS_Base_Aqu_Output+0x2e0>
 8000db6:	e000      	b.n	8000dba <E2V_CLICKS_Base_Aqu_Output+0x836>
		if (tcp_recieve) break;
 8000db8:	bf00      	nop

	}

	HAL_ADC_Stop(&hadc1);
 8000dba:	4867      	ldr	r0, [pc, #412]	; (8000f58 <E2V_CLICKS_Base_Aqu_Output+0x9d4>)
 8000dbc:	f001 faa1 	bl	8002302 <HAL_ADC_Stop>

	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_I1 + 16U))|
 8000dc0:	4b66      	ldr	r3, [pc, #408]	; (8000f5c <E2V_CLICKS_Base_Aqu_Output+0x9d8>)
 8000dc2:	4a67      	ldr	r2, [pc, #412]	; (8000f60 <E2V_CLICKS_Base_Aqu_Output+0x9dc>)
 8000dc4:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_R1 + 16U))|
							(0x1UL << (E2V_CLICKS_R2 + 16U))|
							(0x1UL << (E2V_CLICKS_R3 + 16U));


	delay = 0U;
 8000dc6:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
	while (delay<100)
 8000dcc:	e004      	b.n	8000dd8 <E2V_CLICKS_Base_Aqu_Output+0x854>
		{
		delay++;
 8000dce:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a53      	ldr	r2, [pc, #332]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000dd6:	6013      	str	r3, [r2, #0]
	while (delay<100)
 8000dd8:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b63      	cmp	r3, #99	; 0x63
 8000dde:	d9f6      	bls.n	8000dce <E2V_CLICKS_Base_Aqu_Output+0x84a>
		}
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_SS + 16U));
 8000de0:	4b5e      	ldr	r3, [pc, #376]	; (8000f5c <E2V_CLICKS_Base_Aqu_Output+0x9d8>)
 8000de2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000de6:	619a      	str	r2, [r3, #24]
	delay = 0U;
 8000de8:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
	while (delay<100)
 8000dee:	e004      	b.n	8000dfa <E2V_CLICKS_Base_Aqu_Output+0x876>
		{
		delay++;
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a4b      	ldr	r2, [pc, #300]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000df8:	6013      	str	r3, [r2, #0]
	while (delay<100)
 8000dfa:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b63      	cmp	r3, #99	; 0x63
 8000e00:	d9f6      	bls.n	8000df0 <E2V_CLICKS_Base_Aqu_Output+0x86c>
		}
	E2V_CLICKS_PORT->BSRR = (0x1UL << (E2V_CLICKS_DG + 16U))|
 8000e02:	4b56      	ldr	r3, [pc, #344]	; (8000f5c <E2V_CLICKS_Base_Aqu_Output+0x9d8>)
 8000e04:	f04f 426f 	mov.w	r2, #4009754624	; 0xef000000
 8000e08:	619a      	str	r2, [r3, #24]
							(0x1UL << (E2V_CLICKS_SG + 16U))|		//??
							(0x1UL << (E2V_CLICKS_SS + 16U));



for (int i = 0; i < 10; i++ )
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e0e:	e079      	b.n	8000f04 <E2V_CLICKS_Base_Aqu_Output+0x980>
{
	while (delay<2000)
		{
		delay++;
 8000e10:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e18:	6013      	str	r3, [r2, #0]
	while (delay<2000)
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e22:	d3f5      	bcc.n	8000e10 <E2V_CLICKS_Base_Aqu_Output+0x88c>
		}
	sn = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	opcode = BSB_S0+sn*4;
 8000e2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	71fb      	strb	r3, [r7, #7]
	opcode = (opcode<<3)|OM_FDM1;
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	71fb      	strb	r3, [r7, #7]

	txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2124      	movs	r1, #36	; 0x24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 f923 	bl	8002094 <w5500_readReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2125      	movs	r1, #37	; 0x25
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 f91b 	bl	8002094 <w5500_readReg>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	addr = (txWr0<<8)|(txWr1);
 8000e64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e68:	021a      	lsls	r2, r3, #8
 8000e6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	643b      	str	r3, [r7, #64]	; 0x40


	addr = addr+14;
 8000e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e74:	330e      	adds	r3, #14
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
	if (addr > 0xffff)addr=addr-0xffffU;
 8000e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7e:	d304      	bcc.n	8000e8a <E2V_CLICKS_Base_Aqu_Output+0x906>
 8000e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e82:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000e86:	3bff      	subs	r3, #255	; 0xff
 8000e88:	643b      	str	r3, [r7, #64]	; 0x40

	opcode = BSB_S0+sn*4;
 8000e8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	71fb      	strb	r3, [r7, #7]
	opcode = (opcode<<3)|OM_FDM1;
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	71fb      	strb	r3, [r7, #7]

	txWr0 = (addr&0xFF00)>>8;
 8000ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	txWr1 = (addr&0x00FF);
 8000eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8000eb2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2124      	movs	r1, #36	; 0x24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 f8b8 	bl	8002030 <w5500_writeReg>
	w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8000ec0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2125      	movs	r1, #37	; 0x25
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 f8b1 	bl	8002030 <w5500_writeReg>

	opcode=0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	opcode = BSB_S0+sn*4;
 8000ed2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3301      	adds	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
	opcode = (opcode<<3)|OM_FDM1;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	71fb      	strb	r3, [r7, #7]
	w5500_writeReg(opcode,Sn_CR, CR_SEND);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2220      	movs	r2, #32
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f89c 	bl	8002030 <w5500_writeReg>
	delay = 0U;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <E2V_CLICKS_Base_Aqu_Output+0x9a0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
for (int i = 0; i < 10; i++ )
 8000efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f00:	3301      	adds	r3, #1
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
 8000f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f06:	2b09      	cmp	r3, #9
 8000f08:	dd87      	ble.n	8000e1a <E2V_CLICKS_Base_Aqu_Output+0x896>

}

if (tcp_recieve) TCP_Recieve();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <E2V_CLICKS_Base_Aqu_Output+0x9cc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <E2V_CLICKS_Base_Aqu_Output+0x992>
 8000f12:	f000 fd45 	bl	80019a0 <TCP_Recieve>
tcp_recieve = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <E2V_CLICKS_Base_Aqu_Output+0x9cc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

}
 8000f1c:	bf00      	nop
 8000f1e:	3748      	adds	r7, #72	; 0x48
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000007c 	.word	0x2000007c
 8000f28:	2000019c 	.word	0x2000019c
 8000f2c:	2000009c 	.word	0x2000009c
 8000f30:	20000004 	.word	0x20000004
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20000010 	.word	0x20000010
 8000f44:	0600045f 	.word	0x0600045f
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	20000084 	.word	0x20000084
 8000f50:	200002a0 	.word	0x200002a0
 8000f54:	20000080 	.word	0x20000080
 8000f58:	200001a0 	.word	0x200001a0
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	03ff0000 	.word	0x03ff0000

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 f8f1 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f861 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f96b 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f76:	f000 f94f 	bl	8001218 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f7a:	f000 f917 	bl	80011ac <MX_SPI1_Init>
  MX_ADC1_Init();
 8000f7e:	f000 f8c3 	bl	8001108 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  w5500_ini();
 8000f82:	f000 fb67 	bl	8001654 <w5500_ini>
  w5500_startUDP(0);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 fc9c 	bl	80018c4 <w5500_startUDP>
  w5500_startUDP(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 fc99 	bl	80018c4 <w5500_startUDP>
  w5500_startTCP();
 8000f92:	f000 ff03 	bl	8001d9c <w5500_startTCP>

  OR_Clock_period = 1;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <main+0xc0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
  E2V_CLICKS_Ini();
 8000f9c:	f7ff fa96 	bl	80004cc <E2V_CLICKS_Ini>
  uint8_t trigger = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t counter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  volatile uint32_t i= 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if ((CCD_Mode & 0x01) == 1)								//Start aqu
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <main+0xc4>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d02a      	beq.n	800100e <main+0xaa>
	  {
//		  if ((CCD_Mode & 0x02) == 0)							//Single
//		  {
			  if ((CCD_Mode & 0x04) == 0)						//no trigger
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <main+0xc4>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d109      	bne.n	8000fd8 <main+0x74>
			  {
	  		  	  E2V_CLICKS_Base_Aqu_Output();
 8000fc4:	f7ff fade 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <main+0xc4>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <main+0xc4>)
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e01a      	b.n	800100e <main+0xaa>
			  }
			  else											//trigger
			  {
				  while(1)
				  {
				  trigger=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <main+0xc8>)
 8000fdc:	f001 fff0 	bl	8002fc0 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
			  	  if (trigger == 1)							//triggered
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d102      	bne.n	8000ff0 <main+0x8c>
			  	  	  {
			  		  	  E2V_CLICKS_Base_Aqu_Output();
 8000fea:	f7ff facb 	bl	8000584 <E2V_CLICKS_Base_Aqu_Output>
			  		  	  break;
 8000fee:	e005      	b.n	8000ffc <main+0x98>
			  	  	  }
				  if (tcp_recieve) break;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <main+0xcc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d100      	bne.n	8000ffa <main+0x96>
				  trigger=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ff8:	e7ee      	b.n	8000fd8 <main+0x74>
				  if (tcp_recieve) break;
 8000ffa:	bf00      	nop
				  }
			  	  trigger = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <main+0xc4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <main+0xc4>)
 800100c:	701a      	strb	r2, [r3, #0]
	  		  	  CCD_Mode = CCD_Mode & 0xFE;
			  }
		  }*/
	  }

	  if (tcp_recieve)
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <main+0xcc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0ca      	beq.n	8000fac <main+0x48>
		  {
		  TCP_Recieve();
 8001016:	f000 fcc3 	bl	80019a0 <TCP_Recieve>
		  tcp_recieve = 0;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <main+0xcc>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	  if ((CCD_Mode & 0x01) == 1)								//Start aqu
 8001020:	e7c4      	b.n	8000fac <main+0x48>
 8001022:	bf00      	nop
 8001024:	20000088 	.word	0x20000088
 8001028:	20000090 	.word	0x20000090
 800102c:	40020000 	.word	0x40020000
 8001030:	200002a0 	.word	0x200002a0

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 f8cc 	bl	80041e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <SystemClock_Config+0xd0>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a8:	23a8      	movs	r3, #168	; 0xa8
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 ffd7 	bl	800306c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c4:	f000 f992 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2105      	movs	r1, #5
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fa38 	bl	800355c <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010f2:	f000 f97b 	bl	80013ec <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	; 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <MX_ADC1_Init+0x98>)
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <MX_ADC1_Init+0x9c>)
 800111e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001126:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <MX_ADC1_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <MX_ADC1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_ADC1_Init+0x98>)
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <MX_ADC1_Init+0xa0>)
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_ADC1_Init+0x98>)
 8001164:	2201      	movs	r2, #1
 8001166:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_ADC1_Init+0x98>)
 800116a:	f001 f887 	bl	800227c <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001174:	f000 f93a 	bl	80013ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001178:	230d      	movs	r3, #13
 800117a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_ADC1_Init+0x98>)
 800118a:	f001 f8ed 	bl	8002368 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001194:	f000 f92a 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001a0 	.word	0x200001a0
 80011a4:	40012000 	.word	0x40012000
 80011a8:	0f000001 	.word	0x0f000001

080011ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SPI1_Init+0x64>)
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <MX_SPI1_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SPI1_Init+0x64>)
 80011e0:	2208      	movs	r2, #8
 80011e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_SPI1_Init+0x64>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_SPI1_Init+0x64>)
 80011fe:	f002 fb99 	bl	8003934 <HAL_SPI_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001208:	f000 f8f0 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200001e8 	.word	0x200001e8
 8001214:	40013000 	.word	0x40013000

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_DMA_Init+0x30>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <MX_DMA_Init+0x30>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_DMA_Init+0x30>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <MX_GPIO_Init+0x18c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <MX_GPIO_Init+0x18c>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <MX_GPIO_Init+0x18c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <MX_GPIO_Init+0x18c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <MX_GPIO_Init+0x18c>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b52      	ldr	r3, [pc, #328]	; (80013d8 <MX_GPIO_Init+0x18c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b4e      	ldr	r3, [pc, #312]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a4d      	ldr	r2, [pc, #308]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b4b      	ldr	r3, [pc, #300]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a46      	ldr	r2, [pc, #280]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <MX_GPIO_Init+0x18c>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <MX_GPIO_Init+0x18c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_SCS_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2114      	movs	r1, #20
 800130e:	4833      	ldr	r0, [pc, #204]	; (80013dc <MX_GPIO_Init+0x190>)
 8001310:	f001 fe6e 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001314:	2200      	movs	r2, #0
 8001316:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800131a:	4831      	ldr	r0, [pc, #196]	; (80013e0 <MX_GPIO_Init+0x194>)
 800131c:	f001 fe68 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001324:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	482b      	ldr	r0, [pc, #172]	; (80013e4 <MX_GPIO_Init+0x198>)
 8001336:	f001 fca7 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800133a:	2301      	movs	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001342:	2302      	movs	r3, #2
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4823      	ldr	r0, [pc, #140]	; (80013dc <MX_GPIO_Init+0x190>)
 800134e:	f001 fc9b 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin SPI1_SCS_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_SCS_Pin;
 8001352:	2314      	movs	r3, #20
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <MX_GPIO_Init+0x190>)
 800136a:	f001 fc8d 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800136e:	2308      	movs	r3, #8
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001372:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001378:	2301      	movs	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4816      	ldr	r0, [pc, #88]	; (80013dc <MX_GPIO_Init+0x190>)
 8001384:	f001 fc80 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4812      	ldr	r0, [pc, #72]	; (80013e8 <MX_GPIO_Init+0x19c>)
 800139e:	f001 fc73 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <MX_GPIO_Init+0x194>)
 80013bc:	f001 fc64 	bl	8002c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2009      	movs	r0, #9
 80013c6:	f001 fac8 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013ca:	2009      	movs	r0, #9
 80013cc:	f001 fae1 	bl	8002992 <HAL_NVIC_EnableIRQ>

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40020400 	.word	0x40020400

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_MspInit+0x4c>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_MspInit+0x4c>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001436:	2007      	movs	r0, #7
 8001438:	f001 fa84 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_ADC_MspInit+0x7c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d127      	bne.n	80014ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_ADC_MspInit+0x80>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_ADC_MspInit+0x80>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_ADC_MspInit+0x80>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_ADC_MspInit+0x80>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_ADC_MspInit+0x80>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_ADC_MspInit+0x80>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a2:	2308      	movs	r3, #8
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a6:	2303      	movs	r3, #3
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_ADC_MspInit+0x84>)
 80014b6:	f001 fbe7 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40012000 	.word	0x40012000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800

080014d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <HAL_SPI_MspInit+0xe0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d159      	bne.n	80015a6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_SPI_MspInit+0xe4>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_SPI_MspInit+0xe4>)
 80014fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_SPI_MspInit+0xe4>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_SPI_MspInit+0xe4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_SPI_MspInit+0xe4>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_SPI_MspInit+0xe4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800152a:	23e0      	movs	r3, #224	; 0xe0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800153a:	2305      	movs	r3, #5
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <HAL_SPI_MspInit+0xe8>)
 8001546:	f001 fb9f 	bl	8002c88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_SPI_MspInit+0xec>)
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <HAL_SPI_MspInit+0xf0>)
 800154e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_SPI_MspInit+0xec>)
 8001552:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001556:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_SPI_MspInit+0xec>)
 800155a:	2240      	movs	r2, #64	; 0x40
 800155c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_SPI_MspInit+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_SPI_MspInit+0xec>)
 8001566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_SPI_MspInit+0xec>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_SPI_MspInit+0xec>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_SPI_MspInit+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_SPI_MspInit+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_SPI_MspInit+0xec>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <HAL_SPI_MspInit+0xec>)
 800158c:	f001 fa1c 	bl	80029c8 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001596:	f7ff ff29 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_SPI_MspInit+0xec>)
 800159e:	649a      	str	r2, [r3, #72]	; 0x48
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_SPI_MspInit+0xec>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	20000240 	.word	0x20000240
 80015c0:	40026458 	.word	0x40026458

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001610:	f000 fdf0 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800161c:	2008      	movs	r0, #8
 800161e:	f001 fd01 	bl	8003024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  tcp_recieve = 1;
 8001622:	4b02      	ldr	r3, [pc, #8]	; (800162c <EXTI3_IRQHandler+0x14>)
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200002a0 	.word	0x200002a0

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <w5500_ini>:

//-----------------------------------------------
//-----------------------------------------------

void w5500_ini(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  uint8_t opcode=0;
 800165a:	2300      	movs	r3, #0
 800165c:	71fb      	strb	r3, [r7, #7]
  //Hard Reset
  HAL_GPIO_WritePin(W5500_RST_GPIO_PORT, W5500_RST_PIN, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2104      	movs	r1, #4
 8001662:	4891      	ldr	r0, [pc, #580]	; (80018a8 <w5500_ini+0x254>)
 8001664:	f001 fcc4 	bl	8002ff0 <HAL_GPIO_WritePin>
  HAL_Delay(70);
 8001668:	2046      	movs	r0, #70	; 0x46
 800166a:	f000 fde3 	bl	8002234 <HAL_Delay>
  HAL_GPIO_WritePin(W5500_RST_GPIO_PORT, W5500_RST_PIN, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	488d      	ldr	r0, [pc, #564]	; (80018a8 <w5500_ini+0x254>)
 8001674:	f001 fcbc 	bl	8002ff0 <HAL_GPIO_WritePin>
  HAL_Delay(70);
 8001678:	2046      	movs	r0, #70	; 0x46
 800167a:	f000 fddb 	bl	8002234 <HAL_Delay>
  //Soft Reset
  opcode = (BSB_COMMON<<3)|OM_FDM1;
 800167e:	2301      	movs	r3, #1
 8001680:	71fb      	strb	r3, [r7, #7]
  w5500_writeReg(opcode, MR, 0x80);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fcd1 	bl	8002030 <w5500_writeReg>
  HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f000 fdd0 	bl	8002234 <HAL_Delay>
  //Configute Net
  w5500_writeReg(opcode, GAR0,ipgate[0]);
 8001694:	4b85      	ldr	r3, [pc, #532]	; (80018ac <w5500_ini+0x258>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2101      	movs	r1, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fcc7 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, GAR1,ipgate[1]);
 80016a2:	4b82      	ldr	r3, [pc, #520]	; (80018ac <w5500_ini+0x258>)
 80016a4:	785a      	ldrb	r2, [r3, #1]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fcc0 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, GAR2,ipgate[2]);
 80016b0:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <w5500_ini+0x258>)
 80016b2:	789a      	ldrb	r2, [r3, #2]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2103      	movs	r1, #3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fcb9 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, GAR3,ipgate[3]);
 80016be:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <w5500_ini+0x258>)
 80016c0:	78da      	ldrb	r2, [r3, #3]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2104      	movs	r1, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fcb2 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR0,ipmask[0]);
 80016cc:	4b78      	ldr	r3, [pc, #480]	; (80018b0 <w5500_ini+0x25c>)
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2105      	movs	r1, #5
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fcab 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR1,ipmask[1]);
 80016da:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <w5500_ini+0x25c>)
 80016dc:	785a      	ldrb	r2, [r3, #1]
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2106      	movs	r1, #6
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fca4 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR2,ipmask[2]);
 80016e8:	4b71      	ldr	r3, [pc, #452]	; (80018b0 <w5500_ini+0x25c>)
 80016ea:	789a      	ldrb	r2, [r3, #2]
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2107      	movs	r1, #7
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fc9d 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SUBR3,ipmask[3]);
 80016f6:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <w5500_ini+0x25c>)
 80016f8:	78da      	ldrb	r2, [r3, #3]
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2108      	movs	r1, #8
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fc96 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR0,macaddr[0]);
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <w5500_ini+0x260>)
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2109      	movs	r1, #9
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fc8f 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR1,macaddr[1]);
 8001712:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <w5500_ini+0x260>)
 8001714:	785a      	ldrb	r2, [r3, #1]
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	210a      	movs	r1, #10
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fc88 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR2,macaddr[2]);
 8001720:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <w5500_ini+0x260>)
 8001722:	789a      	ldrb	r2, [r3, #2]
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	210b      	movs	r1, #11
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fc81 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR3,macaddr[3]);
 800172e:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <w5500_ini+0x260>)
 8001730:	78da      	ldrb	r2, [r3, #3]
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	210c      	movs	r1, #12
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fc7a 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR4,macaddr[4]);
 800173c:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <w5500_ini+0x260>)
 800173e:	791a      	ldrb	r2, [r3, #4]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	210d      	movs	r1, #13
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fc73 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SHAR5,macaddr[5]);
 800174a:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <w5500_ini+0x260>)
 800174c:	795a      	ldrb	r2, [r3, #5]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	210e      	movs	r1, #14
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fc6c 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR0,ipaddr[0]);
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <w5500_ini+0x264>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	210f      	movs	r1, #15
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fc65 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR1,ipaddr[1]);
 8001766:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <w5500_ini+0x264>)
 8001768:	785a      	ldrb	r2, [r3, #1]
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2110      	movs	r1, #16
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fc5e 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR2,ipaddr[2]);
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <w5500_ini+0x264>)
 8001776:	789a      	ldrb	r2, [r3, #2]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2111      	movs	r1, #17
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fc57 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, SIPR3,ipaddr[3]);
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <w5500_ini+0x264>)
 8001784:	78da      	ldrb	r2, [r3, #3]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2112      	movs	r1, #18
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fc50 	bl	8002030 <w5500_writeReg>
  //Configure Interups
  w5500_writeReg(opcode, INTLEVEL0 ,0x00);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2200      	movs	r2, #0
 8001794:	2113      	movs	r1, #19
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fc4a 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, INTLEVEL1 ,0x00);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2200      	movs	r2, #0
 80017a0:	2114      	movs	r1, #20
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fc44 	bl	8002030 <w5500_writeReg>
  w5500_writeReg(opcode, IMR ,0x00);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2200      	movs	r2, #0
 80017ac:	2116      	movs	r1, #22
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fc3e 	bl	8002030 <w5500_writeReg>

  w5500_writeReg(opcode, SIMR ,0xff);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	2118      	movs	r1, #24
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fc38 	bl	8002030 <w5500_writeReg>

  w5500_writeReg((BSB_S0<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[0]);
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <w5500_ini+0x268>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	211e      	movs	r1, #30
 80017c8:	2009      	movs	r0, #9
 80017ca:	f000 fc31 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S1<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[1]);
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <w5500_ini+0x268>)
 80017d0:	785b      	ldrb	r3, [r3, #1]
 80017d2:	461a      	mov	r2, r3
 80017d4:	211e      	movs	r1, #30
 80017d6:	2029      	movs	r0, #41	; 0x29
 80017d8:	f000 fc2a 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S2<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[2]);
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <w5500_ini+0x268>)
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	461a      	mov	r2, r3
 80017e2:	211e      	movs	r1, #30
 80017e4:	2049      	movs	r0, #73	; 0x49
 80017e6:	f000 fc23 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S3<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[3]);
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <w5500_ini+0x268>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	461a      	mov	r2, r3
 80017f0:	211e      	movs	r1, #30
 80017f2:	2069      	movs	r0, #105	; 0x69
 80017f4:	f000 fc1c 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S4<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[4]);
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <w5500_ini+0x268>)
 80017fa:	791b      	ldrb	r3, [r3, #4]
 80017fc:	461a      	mov	r2, r3
 80017fe:	211e      	movs	r1, #30
 8001800:	2089      	movs	r0, #137	; 0x89
 8001802:	f000 fc15 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S5<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[5]);
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <w5500_ini+0x268>)
 8001808:	795b      	ldrb	r3, [r3, #5]
 800180a:	461a      	mov	r2, r3
 800180c:	211e      	movs	r1, #30
 800180e:	20a9      	movs	r0, #169	; 0xa9
 8001810:	f000 fc0e 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S6<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[6]);
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <w5500_ini+0x268>)
 8001816:	799b      	ldrb	r3, [r3, #6]
 8001818:	461a      	mov	r2, r3
 800181a:	211e      	movs	r1, #30
 800181c:	20c9      	movs	r0, #201	; 0xc9
 800181e:	f000 fc07 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S7<<3)|OM_FDM1, Sn_RXBUF_SIZE,rx_Buff_Size[7]);
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <w5500_ini+0x268>)
 8001824:	79db      	ldrb	r3, [r3, #7]
 8001826:	461a      	mov	r2, r3
 8001828:	211e      	movs	r1, #30
 800182a:	20e9      	movs	r0, #233	; 0xe9
 800182c:	f000 fc00 	bl	8002030 <w5500_writeReg>

  w5500_writeReg((BSB_S0<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[0]);
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <w5500_ini+0x26c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	211f      	movs	r1, #31
 8001838:	2009      	movs	r0, #9
 800183a:	f000 fbf9 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S1<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[1]);
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <w5500_ini+0x26c>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	461a      	mov	r2, r3
 8001844:	211f      	movs	r1, #31
 8001846:	2029      	movs	r0, #41	; 0x29
 8001848:	f000 fbf2 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S2<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[2]);
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <w5500_ini+0x26c>)
 800184e:	789b      	ldrb	r3, [r3, #2]
 8001850:	461a      	mov	r2, r3
 8001852:	211f      	movs	r1, #31
 8001854:	2049      	movs	r0, #73	; 0x49
 8001856:	f000 fbeb 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S3<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[3]);
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <w5500_ini+0x26c>)
 800185c:	78db      	ldrb	r3, [r3, #3]
 800185e:	461a      	mov	r2, r3
 8001860:	211f      	movs	r1, #31
 8001862:	2069      	movs	r0, #105	; 0x69
 8001864:	f000 fbe4 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S4<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[4]);
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <w5500_ini+0x26c>)
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	461a      	mov	r2, r3
 800186e:	211f      	movs	r1, #31
 8001870:	2089      	movs	r0, #137	; 0x89
 8001872:	f000 fbdd 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S5<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[5]);
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <w5500_ini+0x26c>)
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	461a      	mov	r2, r3
 800187c:	211f      	movs	r1, #31
 800187e:	20a9      	movs	r0, #169	; 0xa9
 8001880:	f000 fbd6 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S6<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[6]);
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <w5500_ini+0x26c>)
 8001886:	799b      	ldrb	r3, [r3, #6]
 8001888:	461a      	mov	r2, r3
 800188a:	211f      	movs	r1, #31
 800188c:	20c9      	movs	r0, #201	; 0xc9
 800188e:	f000 fbcf 	bl	8002030 <w5500_writeReg>
  w5500_writeReg((BSB_S7<<3)|OM_FDM1, Sn_TXBUF_SIZE,tx_Buff_Size[7]);
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <w5500_ini+0x26c>)
 8001894:	79db      	ldrb	r3, [r3, #7]
 8001896:	461a      	mov	r2, r3
 8001898:	211f      	movs	r1, #31
 800189a:	20e9      	movs	r0, #233	; 0xe9
 800189c:	f000 fbc8 	bl	8002030 <w5500_writeReg>


}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40020000 	.word	0x40020000
 80018ac:	20000018 	.word	0x20000018
 80018b0:	2000001c 	.word	0x2000001c
 80018b4:	2000004c 	.word	0x2000004c
 80018b8:	20000014 	.word	0x20000014
 80018bc:	20000028 	.word	0x20000028
 80018c0:	20000030 	.word	0x20000030

080018c4 <w5500_startUDP>:
//-----------------------------------------------

void w5500_startUDP(uint8_t sock_num)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	  uint8_t opcode=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
	  opcode = BSB_S0+sock_num*4;
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
	  opcode = (opcode<<3)|OM_FDM1;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]

	  w5500_writeReg(opcode, Sn_MR, Mode_UDP);
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2202      	movs	r2, #2
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fb9d 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DIPR0,ipaddr_dest[0]);
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <w5500_startUDP+0xd4>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	210c      	movs	r1, #12
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fb96 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR1,ipaddr_dest[1]);
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <w5500_startUDP+0xd4>)
 8001906:	785a      	ldrb	r2, [r3, #1]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	210d      	movs	r1, #13
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fb8f 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR2,ipaddr_dest[2]);
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <w5500_startUDP+0xd4>)
 8001914:	789a      	ldrb	r2, [r3, #2]
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	210e      	movs	r1, #14
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fb88 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR3,ipaddr_dest[3]);
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <w5500_startUDP+0xd4>)
 8001922:	78da      	ldrb	r2, [r3, #3]
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	210f      	movs	r1, #15
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fb81 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_PORT0,local_port>>8);
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <w5500_startUDP+0xd8>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b29b      	uxth	r3, r3
 8001936:	b2da      	uxtb	r2, r3
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2104      	movs	r1, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fb77 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_PORT1,local_port);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <w5500_startUDP+0xd8>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2105      	movs	r1, #5
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fb6f 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DPORT0,local_port>>8);
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <w5500_startUDP+0xd8>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	b2da      	uxtb	r2, r3
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2110      	movs	r1, #16
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fb65 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DPORT1,local_port);
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <w5500_startUDP+0xd8>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2111      	movs	r1, #17
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fb5d 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IMR,0x00);
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2200      	movs	r2, #0
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fb57 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2201      	movs	r2, #1
 8001986:	2101      	movs	r1, #1
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fb51 	bl	8002030 <w5500_writeReg>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000024 	.word	0x20000024
 800199c:	20000020 	.word	0x20000020

080019a0 <TCP_Recieve>:

void TCP_Recieve()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0c2      	sub	sp, #264	; 0x108
 80019a4:	af00      	add	r7, sp, #0
	uint8_t buffer_TCP[256];
	uint8_t sock_num = tcp_Socket;
 80019a6:	4bce      	ldr	r3, [pc, #824]	; (8001ce0 <TCP_Recieve+0x340>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  uint8_t opcode=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = BSB_S0+sock_num*4;
 80019b4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = (opcode<<3)|OM_FDM1;
 80019c2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

	uint8_t R0 = w5500_readReg(opcode,Sn_RX_RSR0);
 80019d4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80019d8:	2126      	movs	r1, #38	; 0x26
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fb5a 	bl	8002094 <w5500_readReg>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	uint8_t R1 = w5500_readReg(opcode,Sn_RX_RSR1);
 80019e6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80019ea:	2127      	movs	r1, #39	; 0x27
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fb51 	bl	8002094 <w5500_readReg>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint16_t len = (R0<<8)|(R1);
 80019f8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102

	R0 = w5500_readReg(opcode,Sn_RX_RD0);
 8001a0e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001a12:	2128      	movs	r1, #40	; 0x28
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fb3d 	bl	8002094 <w5500_readReg>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	R1 = w5500_readReg(opcode,Sn_RX_RD1);
 8001a20:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001a24:	2129      	movs	r1, #41	; 0x29
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fb34 	bl	8002094 <w5500_readReg>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	uint16_t addr = (R0<<8)|(R1);
 8001a32:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

	opcode = BSB_S0_RX+sock_num*4;
 8001a48:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3303      	adds	r3, #3
 8001a52:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	opcode = (opcode<<3)|OM_FDM0;
 8001a56:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	w5500_read_Buff(opcode,addr,buffer_TCP,len);
 8001a60:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001a64:	463a      	mov	r2, r7
 8001a66:	f8b7 1100 	ldrh.w	r1, [r7, #256]	; 0x100
 8001a6a:	f897 0106 	ldrb.w	r0, [r7, #262]	; 0x106
 8001a6e:	f000 faa5 	bl	8001fbc <w5500_read_Buff>

	OR_Clock_period = buffer_TCP[5];
 8001a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a7a:	795b      	ldrb	r3, [r3, #5]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b99      	ldr	r3, [pc, #612]	; (8001ce4 <TCP_Recieve+0x344>)
 8001a80:	601a      	str	r2, [r3, #0]

	mS_To_Wait = buffer_TCP[8] + 256 * buffer_TCP[7] + 256*256*buffer_TCP[6];
 8001a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a8a:	7a1b      	ldrb	r3, [r3, #8]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	441a      	add	r2, r3
 8001a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001aa4:	799b      	ldrb	r3, [r3, #6]
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	4413      	add	r3, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b8e      	ldr	r3, [pc, #568]	; (8001ce8 <TCP_Recieve+0x348>)
 8001aae:	601a      	str	r2, [r3, #0]
    CCD_Mode = buffer_TCP[9];
 8001ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ab8:	7a5a      	ldrb	r2, [r3, #9]
 8001aba:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <TCP_Recieve+0x34c>)
 8001abc:	701a      	strb	r2, [r3, #0]
    CCD_Brust_N = buffer_TCP[11] + 256 * buffer_TCP[10];
 8001abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ac6:	7adb      	ldrb	r3, [r3, #11]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ad2:	7a9b      	ldrb	r3, [r3, #10]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	4413      	add	r3, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b85      	ldr	r3, [pc, #532]	; (8001cf0 <TCP_Recieve+0x350>)
 8001adc:	601a      	str	r2, [r3, #0]
    CCD_Brust_Delay = buffer_TCP[14] + 256 * buffer_TCP[13] + 256 * 256 * buffer_TCP[12];
 8001ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ae6:	7b9b      	ldrb	r3, [r3, #14]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001af2:	7b5b      	ldrb	r3, [r3, #13]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	441a      	add	r2, r3
 8001af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b00:	7b1b      	ldrb	r3, [r3, #12]
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	4413      	add	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <TCP_Recieve+0x354>)
 8001b0a:	601a      	str	r2, [r3, #0]

    buffer_TCP[0] = 3;
 8001b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b14:	2203      	movs	r2, #3
 8001b16:	701a      	strb	r2, [r3, #0]
    buffer_TCP[1] = 14;
 8001b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b20:	220e      	movs	r2, #14
 8001b22:	705a      	strb	r2, [r3, #1]
    buffer_TCP[2] = 15;
 8001b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	709a      	strb	r2, [r3, #2]
    buffer_TCP[3] = 92;
 8001b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b38:	225c      	movs	r2, #92	; 0x5c
 8001b3a:	70da      	strb	r2, [r3, #3]
    buffer_TCP[4] = 65;
 8001b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b44:	2241      	movs	r2, #65	; 0x41
 8001b46:	711a      	strb	r2, [r3, #4]
    buffer_TCP[5] = (uint8_t)(OR_Clock_period & 0xFF);
 8001b48:	4b66      	ldr	r3, [pc, #408]	; (8001ce4 <TCP_Recieve+0x344>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b56:	715a      	strb	r2, [r3, #5]
    buffer_TCP[6] = (uint8_t)((mS_To_Wait & 0xFF0000) >> 16);
 8001b58:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <TCP_Recieve+0x348>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b68:	719a      	strb	r2, [r3, #6]
    buffer_TCP[7] = (uint8_t)((mS_To_Wait & 0x00FF00) >> 8);
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <TCP_Recieve+0x348>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b7a:	71da      	strb	r2, [r3, #7]
    buffer_TCP[8] = (uint8_t)(mS_To_Wait & 0x0000FF);
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <TCP_Recieve+0x348>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b8a:	721a      	strb	r2, [r3, #8]
    buffer_TCP[9] = (uint8_t)(CCD_Mode & 0xFF);
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <TCP_Recieve+0x34c>)
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b98:	725a      	strb	r2, [r3, #9]
    buffer_TCP[10] = (uint8_t)((CCD_Brust_N & 0x00FF00) >> 8);
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <TCP_Recieve+0x350>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001baa:	729a      	strb	r2, [r3, #10]
    buffer_TCP[11] = (uint8_t)(CCD_Brust_N & 0x0000FF);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <TCP_Recieve+0x350>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bba:	72da      	strb	r2, [r3, #11]
    buffer_TCP[12] = (uint8_t)((CCD_Brust_Delay & 0xFF0000) >> 16);
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <TCP_Recieve+0x354>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bcc:	731a      	strb	r2, [r3, #12]
    buffer_TCP[13] = (uint8_t)((CCD_Brust_Delay & 0x00FF00) >> 8);
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <TCP_Recieve+0x354>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bde:	735a      	strb	r2, [r3, #13]
    buffer_TCP[14] = (uint8_t)(CCD_Brust_Delay & 0x0000FF);
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <TCP_Recieve+0x354>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bee:	739a      	strb	r2, [r3, #14]

    buffer_TCP[15] = (uint8_t)((number_Of_Lines & 0x00FF00) >> 8);
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <TCP_Recieve+0x358>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c00:	73da      	strb	r2, [r3, #15]
    buffer_TCP[16] = (uint8_t)(number_Of_Lines & 0x0000FF);
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <TCP_Recieve+0x358>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c10:	741a      	strb	r2, [r3, #16]
    buffer_TCP[17] = (uint8_t)((number_Of_Rows & 0x00FF00) >> 8);
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <TCP_Recieve+0x35c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c22:	745a      	strb	r2, [r3, #17]
    buffer_TCP[18] = (uint8_t)(number_Of_Rows & 0x0000FF);
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <TCP_Recieve+0x35c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c32:	749a      	strb	r2, [r3, #18]
    buffer_TCP[19] = (uint8_t)(2 & 0x0000FF);
 8001c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	74da      	strb	r2, [r3, #19]

    buffer_TCP[20] = (uint8_t)CCD_Name[0];
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <TCP_Recieve+0x360>)
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c4c:	751a      	strb	r2, [r3, #20]
    buffer_TCP[21] = (uint8_t)CCD_Name[1];
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <TCP_Recieve+0x360>)
 8001c50:	785a      	ldrb	r2, [r3, #1]
 8001c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c5a:	755a      	strb	r2, [r3, #21]
    buffer_TCP[22] = (uint8_t)CCD_Name[2];
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <TCP_Recieve+0x360>)
 8001c5e:	789a      	ldrb	r2, [r3, #2]
 8001c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c68:	759a      	strb	r2, [r3, #22]
    buffer_TCP[23] = (uint8_t)CCD_Name[3];
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <TCP_Recieve+0x360>)
 8001c6c:	78da      	ldrb	r2, [r3, #3]
 8001c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c76:	75da      	strb	r2, [r3, #23]
    buffer_TCP[24] = (uint8_t)CCD_Name[4];
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <TCP_Recieve+0x360>)
 8001c7a:	791a      	ldrb	r2, [r3, #4]
 8001c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c84:	761a      	strb	r2, [r3, #24]
    buffer_TCP[25] = (uint8_t)CCD_Name[5];
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <TCP_Recieve+0x360>)
 8001c88:	795a      	ldrb	r2, [r3, #5]
 8001c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c92:	765a      	strb	r2, [r3, #25]
    buffer_TCP[26] = (uint8_t)CCD_Name[6];
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <TCP_Recieve+0x360>)
 8001c96:	799a      	ldrb	r2, [r3, #6]
 8001c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca0:	769a      	strb	r2, [r3, #26]
    buffer_TCP[27] = (uint8_t)CCD_Name[7];
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <TCP_Recieve+0x360>)
 8001ca4:	79da      	ldrb	r2, [r3, #7]
 8001ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cae:	76da      	strb	r2, [r3, #27]
    buffer_TCP[28] = (uint8_t)CCD_Name[8];
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <TCP_Recieve+0x360>)
 8001cb2:	7a1a      	ldrb	r2, [r3, #8]
 8001cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cbc:	771a      	strb	r2, [r3, #28]
    buffer_TCP[29] = (uint8_t)CCD_Name[9];
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <TCP_Recieve+0x360>)
 8001cc0:	7a5a      	ldrb	r2, [r3, #9]
 8001cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cca:	775a      	strb	r2, [r3, #29]
    buffer_TCP[30] = (uint8_t)CCD_Name[10];
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <TCP_Recieve+0x360>)
 8001cce:	7a9a      	ldrb	r2, [r3, #10]
 8001cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cd8:	779a      	strb	r2, [r3, #30]
    buffer_TCP[31] = (uint8_t)CCD_Name[11];
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <TCP_Recieve+0x360>)
 8001cdc:	7ada      	ldrb	r2, [r3, #11]
 8001cde:	e011      	b.n	8001d04 <TCP_Recieve+0x364>
 8001ce0:	20000045 	.word	0x20000045
 8001ce4:	20000088 	.word	0x20000088
 8001ce8:	2000008c 	.word	0x2000008c
 8001cec:	20000090 	.word	0x20000090
 8001cf0:	20000094 	.word	0x20000094
 8001cf4:	20000098 	.word	0x20000098
 8001cf8:	20000080 	.word	0x20000080
 8001cfc:	20000084 	.word	0x20000084
 8001d00:	20000038 	.word	0x20000038
 8001d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d0c:	77da      	strb	r2, [r3, #31]

    w5500_write_Tx_Buff(sock_num, buffer_TCP, 32);
 8001d0e:	4639      	mov	r1, r7
 8001d10:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001d14:	2220      	movs	r2, #32
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f8b6 	bl	8001e88 <w5500_write_Tx_Buff>

	  opcode = BSB_S0+sock_num*4;
 8001d1c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  opcode = (opcode<<3)|OM_FDM1;
 8001d2a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	  w5500_writeReg(opcode, Sn_CR, CR_SEND);
 8001d3c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d40:	2220      	movs	r2, #32
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f973 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IR, 0x04);
 8001d4a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d4e:	2204      	movs	r2, #4
 8001d50:	2102      	movs	r1, #2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f96c 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_DISCON);
 8001d58:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f965 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_CLOSE);
 8001d66:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f95e 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001d74:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f957 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_CR, CR_LISTEN);
 8001d82:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8001d86:	2202      	movs	r2, #2
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f950 	bl	8002030 <w5500_writeReg>

}
 8001d90:	bf00      	nop
 8001d92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <w5500_startTCP>:
void w5500_startTCP()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	  uint8_t sock_num = tcp_Socket;
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <w5500_startTCP+0xe0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
	  uint8_t opcode=0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	71bb      	strb	r3, [r7, #6]
	  opcode = BSB_S0+sock_num*4;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	71bb      	strb	r3, [r7, #6]
	  opcode = (opcode<<3)|OM_FDM1;
 8001db6:	79bb      	ldrb	r3, [r7, #6]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	71bb      	strb	r3, [r7, #6]

	  w5500_writeReg(opcode, Sn_MR, Mode_TCP);
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f930 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DIPR0,ipaddr_dest[0]);
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <w5500_startTCP+0xe4>)
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	210c      	movs	r1, #12
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f929 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR1,ipaddr_dest[1]);
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <w5500_startTCP+0xe4>)
 8001de0:	785a      	ldrb	r2, [r3, #1]
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	210d      	movs	r1, #13
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f922 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR2,ipaddr_dest[2]);
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <w5500_startTCP+0xe4>)
 8001dee:	789a      	ldrb	r2, [r3, #2]
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	210e      	movs	r1, #14
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f91b 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DIPR3,ipaddr_dest[3]);
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <w5500_startTCP+0xe4>)
 8001dfc:	78da      	ldrb	r2, [r3, #3]
 8001dfe:	79bb      	ldrb	r3, [r7, #6]
 8001e00:	210f      	movs	r1, #15
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f914 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_PORT0,tcp_port>>8);
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <w5500_startTCP+0xe8>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	2104      	movs	r1, #4
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f90a 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_PORT1,tcp_port);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <w5500_startTCP+0xe8>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	79bb      	ldrb	r3, [r7, #6]
 8001e24:	2105      	movs	r1, #5
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f902 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_DPORT0,tcp_port>>8);
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <w5500_startTCP+0xe8>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	2110      	movs	r1, #16
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8f8 	bl	8002030 <w5500_writeReg>
	  w5500_writeReg(opcode, Sn_DPORT1,tcp_port);
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <w5500_startTCP+0xe8>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	2111      	movs	r1, #17
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f8f0 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_IMR,0x04);
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	2204      	movs	r2, #4
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f8ea 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_OPEN);
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f8e4 	bl	8002030 <w5500_writeReg>

	  w5500_writeReg(opcode, Sn_CR, CR_LISTEN);
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f8de 	bl	8002030 <w5500_writeReg>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000045 	.word	0x20000045
 8001e80:	20000024 	.word	0x20000024
 8001e84:	20000022 	.word	0x20000022

08001e88 <w5500_write_Tx_Buff>:
	w5500_writeReg(opcode,Sn_CR, CR_SEND);
}

//-----------------------------------------------
void w5500_write_Tx_Buff (uint8_t sock_num, uint8_t *buff, uint16_t len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	80bb      	strh	r3, [r7, #4]
	uint8_t opcode=0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
	opcode = BSB_S0+sock_num*4;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM1;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]

	uint8_t txWr0 = w5500_readReg(opcode,Sn_TX_WR0);
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2124      	movs	r1, #36	; 0x24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f8eb 	bl	8002094 <w5500_readReg>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73bb      	strb	r3, [r7, #14]
	uint8_t txWr1 = w5500_readReg(opcode,Sn_TX_WR1);
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2125      	movs	r1, #37	; 0x25
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f8e4 	bl	8002094 <w5500_readReg>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	737b      	strb	r3, [r7, #13]
	uint16_t addr = (txWr0<<8)|(txWr1);
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	817b      	strh	r3, [r7, #10]

	opcode = BSB_S0_TX+sock_num*4;
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM0;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	73fb      	strb	r3, [r7, #15]

	w5500_write_Buff(opcode,addr,buff,len);
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	8979      	ldrh	r1, [r7, #10]
 8001ef4:	7bf8      	ldrb	r0, [r7, #15]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	f000 f826 	bl	8001f48 <w5500_write_Buff>

	addr += len;
 8001efc:	897a      	ldrh	r2, [r7, #10]
 8001efe:	88bb      	ldrh	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	817b      	strh	r3, [r7, #10]

	opcode = BSB_S0+sock_num*4;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
	opcode = (opcode<<3)|OM_FDM1;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	73fb      	strb	r3, [r7, #15]

	txWr0 = (addr&0xFF00)>>8;
 8001f1c:	897b      	ldrh	r3, [r7, #10]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	73bb      	strb	r3, [r7, #14]
	txWr1 = (addr&0x00FF);
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	737b      	strb	r3, [r7, #13]
	w5500_writeReg(opcode,Sn_TX_WR0,txWr0);
 8001f28:	7bba      	ldrb	r2, [r7, #14]
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2124      	movs	r1, #36	; 0x24
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f87e 	bl	8002030 <w5500_writeReg>
	w5500_writeReg(opcode,Sn_TX_WR1,txWr1);
 8001f34:	7b7a      	ldrb	r2, [r7, #13]
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2125      	movs	r1, #37	; 0x25
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f878 	bl	8002030 <w5500_writeReg>
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <w5500_write_Buff>:
//-----------------------------------------------
void w5500_write_Buff (uint8_t op, uint16_t addres, uint8_t* data, uint16_t len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60ba      	str	r2, [r7, #8]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	460b      	mov	r3, r1
 8001f58:	81bb      	strh	r3, [r7, #12]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
	  uint8_t buf[3] = {addres >> 8, addres, op|(RWB_WRITE<<2)};
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	753b      	strb	r3, [r7, #20]
 8001f68:	89bb      	ldrh	r3, [r7, #12]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	757b      	strb	r3, [r7, #21]
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	75bb      	strb	r3, [r7, #22]

	  W5500_SS_SELECT();
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <w5500_write_Buff+0x6c>)
 8001f7e:	f001 f837 	bl	8002ff0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);
 8001f82:	f107 0114 	add.w	r1, r7, #20
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <w5500_write_Buff+0x70>)
 8001f8e:	f001 fd5a 	bl	8003a46 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, data, len, 0xFFFFFFFF);
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <w5500_write_Buff+0x70>)
 8001f9c:	f001 fd53 	bl	8003a46 <HAL_SPI_Transmit>
	  W5500_SS_DESELECT();
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <w5500_write_Buff+0x6c>)
 8001fa6:	f001 f823 	bl	8002ff0 <HAL_GPIO_WritePin>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	200001e8 	.word	0x200001e8

08001fbc <w5500_read_Buff>:
//-----------------------------------------------
void w5500_read_Buff (uint8_t op, uint16_t addres, uint8_t* data, uint16_t len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	81bb      	strh	r3, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
	  uint8_t buf[] = {addres >> 8, addres, op|(RWB_READ<<2)};
 8001fd2:	89bb      	ldrh	r3, [r7, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	753b      	strb	r3, [r7, #20]
 8001fdc:	89bb      	ldrh	r3, [r7, #12]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	757b      	strb	r3, [r7, #21]
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	75bb      	strb	r3, [r7, #22]
	  uint8_t wbuf[4];

	  W5500_SS_SELECT();
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2110      	movs	r1, #16
 8001fea:	480f      	ldr	r0, [pc, #60]	; (8002028 <w5500_read_Buff+0x6c>)
 8001fec:	f001 f800 	bl	8002ff0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, buf, 3, 0xFFFFFFFF);
 8001ff0:	f107 0114 	add.w	r1, r7, #20
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <w5500_read_Buff+0x70>)
 8001ffc:	f001 fd23 	bl	8003a46 <HAL_SPI_Transmit>
	  HAL_SPI_TransmitReceive(&hspi1, wbuf, data, len, 0xFFFFFFFF);
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f107 0110 	add.w	r1, r7, #16
 8002006:	f04f 32ff 	mov.w	r2, #4294967295
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4807      	ldr	r0, [pc, #28]	; (800202c <w5500_read_Buff+0x70>)
 8002010:	f001 fe55 	bl	8003cbe <HAL_SPI_TransmitReceive>
	  W5500_SS_DESELECT();
 8002014:	2201      	movs	r2, #1
 8002016:	2110      	movs	r1, #16
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <w5500_read_Buff+0x6c>)
 800201a:	f000 ffe9 	bl	8002ff0 <HAL_GPIO_WritePin>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020000 	.word	0x40020000
 800202c:	200001e8 	.word	0x200001e8

08002030 <w5500_writeReg>:
//-----------------------------------------------

void w5500_writeReg(uint8_t op, uint16_t addres, uint8_t data)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	80bb      	strh	r3, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[] = {addres >> 8, addres, op|(RWB_WRITE<<2), data};
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	b29b      	uxth	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	733b      	strb	r3, [r7, #12]
 800204c:	88bb      	ldrh	r3, [r7, #4]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	737b      	strb	r3, [r7, #13]
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	b2db      	uxtb	r3, r3
 800205a:	73bb      	strb	r3, [r7, #14]
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	73fb      	strb	r3, [r7, #15]
  W5500_SS_SELECT();
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <w5500_writeReg+0x5c>)
 8002066:	f000 ffc3 	bl	8002ff0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buf, 4, 0xFFFFFFFF);
 800206a:	f107 010c 	add.w	r1, r7, #12
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	2204      	movs	r2, #4
 8002074:	4806      	ldr	r0, [pc, #24]	; (8002090 <w5500_writeReg+0x60>)
 8002076:	f001 fce6 	bl	8003a46 <HAL_SPI_Transmit>
  W5500_SS_DESELECT();
 800207a:	2201      	movs	r2, #1
 800207c:	2110      	movs	r1, #16
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <w5500_writeReg+0x5c>)
 8002080:	f000 ffb6 	bl	8002ff0 <HAL_GPIO_WritePin>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40020000 	.word	0x40020000
 8002090:	200001e8 	.word	0x200001e8

08002094 <w5500_readReg>:

//-----------------------------------------------
uint8_t w5500_readReg(uint8_t op, uint16_t addres)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	4603      	mov	r3, r0
 800209c:	460a      	mov	r2, r1
 800209e:	71fb      	strb	r3, [r7, #7]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80bb      	strh	r3, [r7, #4]
  uint8_t data;
  uint8_t wbuf[] = {addres >> 8, addres, op, 0x0};
 80020a4:	88bb      	ldrh	r3, [r7, #4]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	743b      	strb	r3, [r7, #16]
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	747b      	strb	r3, [r7, #17]
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	74bb      	strb	r3, [r7, #18]
 80020b8:	2300      	movs	r3, #0
 80020ba:	74fb      	strb	r3, [r7, #19]
  uint8_t rbuf[4];
  W5500_SS_SELECT();
 80020bc:	2200      	movs	r2, #0
 80020be:	2110      	movs	r1, #16
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <w5500_readReg+0x60>)
 80020c2:	f000 ff95 	bl	8002ff0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, wbuf, rbuf, 4, 0xFFFFFFFF);
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	f107 0110 	add.w	r1, r7, #16
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2304      	movs	r3, #4
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <w5500_readReg+0x64>)
 80020d8:	f001 fdf1 	bl	8003cbe <HAL_SPI_TransmitReceive>
  W5500_SS_DESELECT();
 80020dc:	2201      	movs	r2, #1
 80020de:	2110      	movs	r1, #16
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <w5500_readReg+0x60>)
 80020e2:	f000 ff85 	bl	8002ff0 <HAL_GPIO_WritePin>
  data = rbuf[3];
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	75fb      	strb	r3, [r7, #23]
  return data;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020000 	.word	0x40020000
 80020f8:	200001e8 	.word	0x200001e8

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002118:	4c0b      	ldr	r4, [pc, #44]	; (8002148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002126:	f7ff fa83 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f002 f835 	bl	8004198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7fe ff19 	bl	8000f64 <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002140:	08004234 	.word	0x08004234
  ldr r2, =_sbss
 8002144:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002148:	200002a8 	.word	0x200002a8

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 fbe3 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff f938 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fbfb 	bl	80029ae <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f000 fbc3 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000048 	.word	0x20000048
 80021ec:	20000058 	.word	0x20000058
 80021f0:	20000054 	.word	0x20000054

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000058 	.word	0x20000058
 8002218:	200002a4 	.word	0x200002a4

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200002a4 	.word	0x200002a4

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000058 	.word	0x20000058

0800227c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e033      	b.n	80022fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff f8d4 	bl	8001448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022c2:	f023 0302 	bic.w	r3, r3, #2
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f96c 	bl	80025ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	e001      	b.n	80022f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_Stop+0x16>
 8002314:	2302      	movs	r3, #2
 8002316:	e021      	b.n	800235c <HAL_ADC_Stop+0x5a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e105      	b.n	8002590 <HAL_ADC_ConfigChannel+0x228>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d925      	bls.n	80023e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68d9      	ldr	r1, [r3, #12]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	3b1e      	subs	r3, #30
 80023aa:	2207      	movs	r2, #7
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43da      	mvns	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	400a      	ands	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	4603      	mov	r3, r0
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4403      	add	r3, r0
 80023d2:	3b1e      	subs	r3, #30
 80023d4:	409a      	lsls	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	e022      	b.n	8002426 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6919      	ldr	r1, [r3, #16]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	2207      	movs	r2, #7
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6919      	ldr	r1, [r3, #16]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	4603      	mov	r3, r0
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4403      	add	r3, r0
 800241c:	409a      	lsls	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d824      	bhi.n	8002478 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b05      	subs	r3, #5
 8002440:	221f      	movs	r2, #31
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	400a      	ands	r2, r1
 800244e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b05      	subs	r3, #5
 800246a:	fa00 f203 	lsl.w	r2, r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	635a      	str	r2, [r3, #52]	; 0x34
 8002476:	e04c      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d824      	bhi.n	80024ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b23      	subs	r3, #35	; 0x23
 8002492:	221f      	movs	r2, #31
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	3b23      	subs	r3, #35	; 0x23
 80024bc:	fa00 f203 	lsl.w	r2, r0, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
 80024c8:	e023      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b41      	subs	r3, #65	; 0x41
 80024dc:	221f      	movs	r2, #31
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	3b41      	subs	r3, #65	; 0x41
 8002506:	fa00 f203 	lsl.w	r2, r0, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_ADC_ConfigChannel+0x234>)
 8002514:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_ADC_ConfigChannel+0x238>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d109      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1cc>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b12      	cmp	r3, #18
 8002526:	d105      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_ADC_ConfigChannel+0x238>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d123      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d003      	beq.n	800254e <HAL_ADC_ConfigChannel+0x1e6>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b11      	cmp	r3, #17
 800254c:	d11b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d111      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_ADC_ConfigChannel+0x240>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9a      	lsrs	r2, r3, #18
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002578:	e002      	b.n	8002580 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3b01      	subs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40012300 	.word	0x40012300
 80025a0:	40012000 	.word	0x40012000
 80025a4:	20000048 	.word	0x20000048
 80025a8:	431bde83 	.word	0x431bde83

080025ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b4:	4b79      	ldr	r3, [pc, #484]	; (800279c <ADC_Init+0x1f0>)
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <ADC_Init+0x1f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e00f      	b.n	80026aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0202 	bic.w	r2, r2, #2
 80026b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e1b      	ldrb	r3, [r3, #24]
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	3b01      	subs	r3, #1
 8002704:	035a      	lsls	r2, r3, #13
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e007      	b.n	8002720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	3b01      	subs	r3, #1
 800273c:	051a      	lsls	r2, r3, #20
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002762:	025a      	lsls	r2, r3, #9
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	029a      	lsls	r2, r3, #10
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40012300 	.word	0x40012300
 80027a0:	0f000001 	.word	0x0f000001

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fc22 	bl	800221c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fc09 	bl	800221c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f85f 	bl	8002b90 <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f816 	bl	8002b24 <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f010803f 	.word	0xf010803f

08002b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3b10      	subs	r3, #16
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <DMA_CalcBaseAndBitshift+0x64>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b3e:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d909      	bls.n	8002b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	659a      	str	r2, [r3, #88]	; 0x58
 8002b64:	e007      	b.n	8002b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	aaaaaaab 	.word	0xaaaaaaab
 8002b8c:	0800421c 	.word	0x0800421c

08002b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d856      	bhi.n	8002c5e <DMA_CheckFifoParam+0xce>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <DMA_CheckFifoParam+0x28>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bdb 	.word	0x08002bdb
 8002bc0:	08002bc9 	.word	0x08002bc9
 8002bc4:	08002c5f 	.word	0x08002c5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d046      	beq.n	8002c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e043      	b.n	8002c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be2:	d140      	bne.n	8002c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e03d      	b.n	8002c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d121      	bne.n	8002c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d837      	bhi.n	8002c6a <DMA_CheckFifoParam+0xda>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x70>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c17 	.word	0x08002c17
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002c29 	.word	0x08002c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e030      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d025      	beq.n	8002c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c26:	e022      	b.n	8002c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c36:	e01c      	b.n	8002c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d903      	bls.n	8002c46 <DMA_CheckFifoParam+0xb6>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d003      	beq.n	8002c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c44:	e018      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e015      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e00b      	b.n	8002c76 <DMA_CheckFifoParam+0xe6>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e00a      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e008      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e006      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
    }
  } 
  
  return status; 
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e16b      	b.n	8002f7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	f040 815a 	bne.w	8002f76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d005      	beq.n	8002cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d130      	bne.n	8002d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 0201 	and.w	r2, r3, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d017      	beq.n	8002d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d123      	bne.n	8002dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	08da      	lsrs	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3208      	adds	r2, #8
 8002d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	08da      	lsrs	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3208      	adds	r2, #8
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0203 	and.w	r2, r3, #3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80b4 	beq.w	8002f76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <HAL_GPIO_Init+0x30c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a5f      	ldr	r2, [pc, #380]	; (8002f94 <HAL_GPIO_Init+0x30c>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_GPIO_Init+0x30c>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2a:	4a5b      	ldr	r2, [pc, #364]	; (8002f98 <HAL_GPIO_Init+0x310>)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_GPIO_Init+0x314>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02b      	beq.n	8002eae <HAL_GPIO_Init+0x226>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <HAL_GPIO_Init+0x318>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d025      	beq.n	8002eaa <HAL_GPIO_Init+0x222>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a50      	ldr	r2, [pc, #320]	; (8002fa4 <HAL_GPIO_Init+0x31c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <HAL_GPIO_Init+0x21e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <HAL_GPIO_Init+0x320>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_Init+0x21a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0x216>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x328>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_Init+0x212>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_GPIO_Init+0x32c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_Init+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_GPIO_Init+0x330>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_Init+0x20a>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e00e      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e92:	2308      	movs	r3, #8
 8002e94:	e00c      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e96:	2306      	movs	r3, #6
 8002e98:	e00a      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_GPIO_Init+0x310>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f70:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f67f ae90 	bls.w	8002ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40021c00 	.word	0x40021c00
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e001      	b.n	8002fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800300c:	e003      	b.n	8003016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	041a      	lsls	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	619a      	str	r2, [r3, #24]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f806 	bl	8003054 <HAL_GPIO_EXTI_Callback>
  }
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40013c00 	.word	0x40013c00

08003054 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e267      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d075      	beq.n	8003176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d00c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	4b7e      	ldr	r3, [pc, #504]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d05b      	beq.n	8003174 <HAL_RCC_OscConfig+0x108>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d157      	bne.n	8003174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e242      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d106      	bne.n	80030e0 <HAL_RCC_OscConfig+0x74>
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a75      	ldr	r2, [pc, #468]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e01d      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030ea:	4b70      	ldr	r3, [pc, #448]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6f      	ldr	r2, [pc, #444]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6c      	ldr	r2, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0xb0>
 8003104:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a68      	ldr	r2, [pc, #416]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7ff f87a 	bl	800221c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7ff f876 	bl	800221c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e207      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0xc0>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff f866 	bl	800221c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7ff f862 	bl	800221c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1f3      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0xe8>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d063      	beq.n	800324a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	4b4a      	ldr	r3, [pc, #296]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003196:	2b08      	cmp	r3, #8
 8003198:	d11c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d116      	bne.n	80031d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e1c7      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4937      	ldr	r1, [pc, #220]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	e03a      	b.n	800324a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031dc:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_RCC_OscConfig+0x244>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7ff f81b 	bl	800221c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ea:	f7ff f817 	bl	800221c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1a8      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4925      	ldr	r1, [pc, #148]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
 800321c:	e015      	b.n	800324a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x244>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fffa 	bl	800221c <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322c:	f7fe fff6 	bl	800221c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e187      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d036      	beq.n	80032c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <HAL_RCC_OscConfig+0x248>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe ffda 	bl	800221c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326c:	f7fe ffd6 	bl	800221c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e167      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_OscConfig+0x240>)
 8003280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x200>
 800328a:	e01b      	b.n	80032c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_OscConfig+0x248>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe ffc3 	bl	800221c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	e00e      	b.n	80032b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329a:	f7fe ffbf 	bl	800221c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d907      	bls.n	80032b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e150      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	42470000 	.word	0x42470000
 80032b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ea      	bne.n	800329a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8097 	beq.w	8003400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d6:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a7c      	ldr	r2, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003302:	4b77      	ldr	r3, [pc, #476]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330e:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a73      	ldr	r2, [pc, #460]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7fe ff7f 	bl	800221c <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7fe ff7b 	bl	800221c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e10c      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <HAL_RCC_OscConfig+0x474>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x2ea>
 8003348:	4b64      	ldr	r3, [pc, #400]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a63      	ldr	r2, [pc, #396]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	e01c      	b.n	8003390 <HAL_RCC_OscConfig+0x324>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b05      	cmp	r3, #5
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x30c>
 800335e:	4b5f      	ldr	r3, [pc, #380]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a5e      	ldr	r2, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003364:	f043 0304 	orr.w	r3, r3, #4
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	e00b      	b.n	8003390 <HAL_RCC_OscConfig+0x324>
 8003378:	4b58      	ldr	r3, [pc, #352]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	4b55      	ldr	r3, [pc, #340]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a54      	ldr	r2, [pc, #336]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800338a:	f023 0304 	bic.w	r3, r3, #4
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe ff40 	bl	800221c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe ff3c 	bl	800221c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0cb      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ee      	beq.n	80033a0 <HAL_RCC_OscConfig+0x334>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fe ff2a 	bl	800221c <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe ff26 	bl	800221c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0b5      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ee      	bne.n	80033cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d105      	bne.n	8003400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	4a38      	ldr	r2, [pc, #224]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80033fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a1 	beq.w	800354c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b08      	cmp	r3, #8
 8003414:	d05c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d141      	bne.n	80034a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCC_OscConfig+0x478>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fefa 	bl	800221c <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fef6 	bl	800221c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e087      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	491b      	ldr	r1, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCC_OscConfig+0x478>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fe fecf 	bl	800221c <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe fecb 	bl	800221c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e05c      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x416>
 80034a0:	e054      	b.n	800354c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_RCC_OscConfig+0x478>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe feb8 	bl	800221c <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe feb4 	bl	800221c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e045      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x470>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x444>
 80034ce:	e03d      	b.n	800354c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e038      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40007000 	.word	0x40007000
 80034e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x4ec>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d028      	beq.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d121      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d11a      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0cc      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b68      	ldr	r3, [pc, #416]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d90c      	bls.n	8003598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b65      	ldr	r3, [pc, #404]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b8      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	494d      	ldr	r1, [pc, #308]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d044      	beq.n	800367c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d119      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e07f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d003      	beq.n	800361a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003616:	2b03      	cmp	r3, #3
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e067      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800363a:	4b37      	ldr	r3, [pc, #220]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f023 0203 	bic.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4934      	ldr	r1, [pc, #208]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	4313      	orrs	r3, r2
 800364a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800364c:	f7fe fde6 	bl	800221c <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003652:	e00a      	b.n	800366a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003654:	f7fe fde2 	bl	800221c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04f      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 020c 	and.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d1eb      	bne.n	8003654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d20c      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e032      	b.n	800370a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4916      	ldr	r1, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036e2:	f000 f821 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	490a      	ldr	r1, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	5ccb      	ldrb	r3, [r1, r3]
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fd46 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00
 8003718:	40023800 	.word	0x40023800
 800371c:	0800420c 	.word	0x0800420c
 8003720:	20000048 	.word	0x20000048
 8003724:	20000054 	.word	0x20000054

08003728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b094      	sub	sp, #80	; 0x50
 800372e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	647b      	str	r3, [r7, #68]	; 0x44
 8003734:	2300      	movs	r3, #0
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003738:	2300      	movs	r3, #0
 800373a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003740:	4b79      	ldr	r3, [pc, #484]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d00d      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x40>
 800374c:	2b08      	cmp	r3, #8
 800374e:	f200 80e1 	bhi.w	8003914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x34>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x3a>
 800375a:	e0db      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b73      	ldr	r3, [pc, #460]	; (800392c <HAL_RCC_GetSysClockFreq+0x204>)
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003760:	e0db      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003762:	4b73      	ldr	r3, [pc, #460]	; (8003930 <HAL_RCC_GetSysClockFreq+0x208>)
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003766:	e0d8      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003770:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	099b      	lsrs	r3, r3, #6
 8003784:	2200      	movs	r2, #0
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
 8003788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
 8003792:	2300      	movs	r3, #0
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
 8003796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800379a:	4622      	mov	r2, r4
 800379c:	462b      	mov	r3, r5
 800379e:	f04f 0000 	mov.w	r0, #0
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	0159      	lsls	r1, r3, #5
 80037a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ac:	0150      	lsls	r0, r2, #5
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4621      	mov	r1, r4
 80037b4:	1a51      	subs	r1, r2, r1
 80037b6:	6139      	str	r1, [r7, #16]
 80037b8:	4629      	mov	r1, r5
 80037ba:	eb63 0301 	sbc.w	r3, r3, r1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037cc:	4659      	mov	r1, fp
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d6:	4651      	mov	r1, sl
 80037d8:	018a      	lsls	r2, r1, #6
 80037da:	4651      	mov	r1, sl
 80037dc:	ebb2 0801 	subs.w	r8, r2, r1
 80037e0:	4659      	mov	r1, fp
 80037e2:	eb63 0901 	sbc.w	r9, r3, r1
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fa:	4690      	mov	r8, r2
 80037fc:	4699      	mov	r9, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	eb18 0303 	adds.w	r3, r8, r3
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	462b      	mov	r3, r5
 8003808:	eb49 0303 	adc.w	r3, r9, r3
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800381a:	4629      	mov	r1, r5
 800381c:	024b      	lsls	r3, r1, #9
 800381e:	4621      	mov	r1, r4
 8003820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003824:	4621      	mov	r1, r4
 8003826:	024a      	lsls	r2, r1, #9
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382e:	2200      	movs	r2, #0
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
 8003832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003838:	f7fc fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	e058      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	4618      	mov	r0, r3
 8003850:	4611      	mov	r1, r2
 8003852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003860:	4642      	mov	r2, r8
 8003862:	464b      	mov	r3, r9
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0159      	lsls	r1, r3, #5
 800386e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003872:	0150      	lsls	r0, r2, #5
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4641      	mov	r1, r8
 800387a:	ebb2 0a01 	subs.w	sl, r2, r1
 800387e:	4649      	mov	r1, r9
 8003880:	eb63 0b01 	sbc.w	fp, r3, r1
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003898:	ebb2 040a 	subs.w	r4, r2, sl
 800389c:	eb63 050b 	sbc.w	r5, r3, fp
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	00eb      	lsls	r3, r5, #3
 80038aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ae:	00e2      	lsls	r2, r4, #3
 80038b0:	4614      	mov	r4, r2
 80038b2:	461d      	mov	r5, r3
 80038b4:	4643      	mov	r3, r8
 80038b6:	18e3      	adds	r3, r4, r3
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	464b      	mov	r3, r9
 80038bc:	eb45 0303 	adc.w	r3, r5, r3
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ce:	4629      	mov	r1, r5
 80038d0:	028b      	lsls	r3, r1, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d8:	4621      	mov	r1, r4
 80038da:	028a      	lsls	r2, r1, #10
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e2:	2200      	movs	r2, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	61fa      	str	r2, [r7, #28]
 80038e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ec:	f7fc fc6c 	bl	80001c8 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_GetSysClockFreq+0x200>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	3301      	adds	r3, #1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetSysClockFreq+0x204>)
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800391c:	4618      	mov	r0, r3
 800391e:	3750      	adds	r7, #80	; 0x50
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	00f42400 	.word	0x00f42400
 8003930:	007a1200 	.word	0x007a1200

08003934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07b      	b.n	8003a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003956:	d009      	beq.n	800396c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	e005      	b.n	800396c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fda2 	bl	80014d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	ea42 0103 	orr.w	r1, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0104 	and.w	r1, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f003 0210 	and.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b088      	sub	sp, #32
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_SPI_Transmit+0x22>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e126      	b.n	8003cb6 <HAL_SPI_Transmit+0x270>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a70:	f7fe fbd4 	bl	800221c <HAL_GetTick>
 8003a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d002      	beq.n	8003a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a8a:	e10b      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x52>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a9c:	e102      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d10f      	bne.n	8003b06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d007      	beq.n	8003b24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d14b      	bne.n	8003bc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Transmit+0xf6>
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d13e      	bne.n	8003bba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b60:	e02b      	b.n	8003bba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d112      	bne.n	8003b96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b94:	e011      	b.n	8003bba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b96:	f7fe fb41 	bl	800221c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d803      	bhi.n	8003bae <HAL_SPI_Transmit+0x168>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Transmit+0x16e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb8:	e074      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ce      	bne.n	8003b62 <HAL_SPI_Transmit+0x11c>
 8003bc4:	e04c      	b.n	8003c60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x18e>
 8003bce:	8afb      	ldrh	r3, [r7, #22]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d140      	bne.n	8003c56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bfa:	e02c      	b.n	8003c56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d113      	bne.n	8003c32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c30:	e011      	b.n	8003c56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c32:	f7fe faf3 	bl	800221c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d803      	bhi.n	8003c4a <HAL_SPI_Transmit+0x204>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_Transmit+0x20a>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c54:	e026      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1cd      	bne.n	8003bfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	6839      	ldr	r1, [r7, #0]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa55 	bl	8004114 <SPI_EndRxTxTransaction>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e000      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08c      	sub	sp, #48	; 0x30
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x26>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e18a      	b.n	8003ffa <HAL_SPI_TransmitReceive+0x33c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cec:	f7fe fa96 	bl	800221c <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d00f      	beq.n	8003d2e <HAL_SPI_TransmitReceive+0x70>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d14:	d107      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x68>
 8003d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d2c:	e15b      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0x82>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_SPI_TransmitReceive+0x82>
 8003d3a:	887b      	ldrh	r3, [r7, #2]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d46:	e14e      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d003      	beq.n	8003d5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2205      	movs	r2, #5
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	887a      	ldrh	r2, [r7, #2]
 8003d72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d007      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db8:	d178      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x10a>
 8003dc2:	8b7b      	ldrh	r3, [r7, #26]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d166      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dec:	e053      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d11b      	bne.n	8003e34 <HAL_SPI_TransmitReceive+0x176>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x176>
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d113      	bne.n	8003e34 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d119      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x1b8>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d014      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	b292      	uxth	r2, r2
 8003e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e72:	2301      	movs	r3, #1
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e76:	f7fe f9d1 	bl	800221c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d807      	bhi.n	8003e96 <HAL_SPI_TransmitReceive+0x1d8>
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d003      	beq.n	8003e96 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e94:	e0a7      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1a6      	bne.n	8003dee <HAL_SPI_TransmitReceive+0x130>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1a1      	bne.n	8003dee <HAL_SPI_TransmitReceive+0x130>
 8003eaa:	e07c      	b.n	8003fa6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x1fc>
 8003eb4:	8b7b      	ldrh	r3, [r7, #26]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d16b      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee0:	e057      	b.n	8003f92 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11c      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x26c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d017      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x26c>
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d114      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	7812      	ldrb	r2, [r2, #0]
 8003f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d119      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x2ae>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f6c:	f7fe f956 	bl	800221c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d803      	bhi.n	8003f84 <HAL_SPI_TransmitReceive+0x2c6>
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d102      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x2cc>
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f90:	e029      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1a2      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x224>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d19d      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f8b2 	bl	8004114 <SPI_EndRxTxTransaction>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fc2:	e010      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	e000      	b.n	8003fe6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3730      	adds	r7, #48	; 0x30
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004014:	f7fe f902 	bl	800221c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4413      	add	r3, r2
 8004022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004024:	f7fe f8fa 	bl	800221c <HAL_GetTick>
 8004028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800402a:	4b39      	ldr	r3, [pc, #228]	; (8004110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	015b      	lsls	r3, r3, #5
 8004030:	0d1b      	lsrs	r3, r3, #20
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403a:	e054      	b.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d050      	beq.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004044:	f7fe f8ea 	bl	800221c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	429a      	cmp	r2, r3
 8004052:	d902      	bls.n	800405a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d13d      	bne.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004072:	d111      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407c:	d004      	beq.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d107      	bne.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a0:	d10f      	bne.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e017      	b.n	8004106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	429a      	cmp	r2, r3
 8004102:	d19b      	bne.n	800403c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000048 	.word	0x20000048

08004114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <SPI_EndRxTxTransaction+0x7c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <SPI_EndRxTxTransaction+0x80>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0d5b      	lsrs	r3, r3, #21
 800412c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004130:	fb02 f303 	mul.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413e:	d112      	bne.n	8004166 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff5a 	bl	8004004 <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00f      	b.n	8004186 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3b01      	subs	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d0f2      	beq.n	8004166 <SPI_EndRxTxTransaction+0x52>
 8004180:	e000      	b.n	8004184 <SPI_EndRxTxTransaction+0x70>
        break;
 8004182:	bf00      	nop
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000048 	.word	0x20000048
 8004194:	165e9f81 	.word	0x165e9f81

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	; (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	; (80041d4 <__libc_init_array+0x3c>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2600      	movs	r6, #0
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	; (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 f820 	bl	80041f0 <_init>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2600      	movs	r6, #0
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	0800422c 	.word	0x0800422c
 80041d4:	0800422c 	.word	0x0800422c
 80041d8:	0800422c 	.word	0x0800422c
 80041dc:	08004230 	.word	0x08004230

080041e0 <memset>:
 80041e0:	4402      	add	r2, r0
 80041e2:	4603      	mov	r3, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d100      	bne.n	80041ea <memset+0xa>
 80041e8:	4770      	bx	lr
 80041ea:	f803 1b01 	strb.w	r1, [r3], #1
 80041ee:	e7f9      	b.n	80041e4 <memset+0x4>

080041f0 <_init>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr

080041fc <_fini>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr
